<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="endian__test_8cc" kind="file" language="C++">
    <compoundname>endian_test.cc</compoundname>
    <includes refid="endian_8h" local="yes">iceberg/util/endian.h</includes>
    <includes local="no">array</includes>
    <includes local="no">cmath</includes>
    <includes local="no">limits</includes>
    <includes local="no">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="1">
        <label>iceberg/test/endian_test.cc</label>
        <link refid="endian__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iceberg/util/endian.h</label>
        <link refid="endian_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>array</label>
      </node>
      <node id="3">
        <label>bit</label>
      </node>
      <node id="7">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>concepts</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="9">
        <label>gtest/gtest.h</label>
      </node>
      <node id="8">
        <label>limits</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceiceberg">iceberg</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="endian__test_8cc_1a3370e8f0a4b8f7e65864d17acf7a96c2" prot="public" static="no">
        <name>EXPECT_ROUNDTRIP</name>
        <param><defname>value</defname></param>
        <initializer>  do {                                                         \
    EXPECT_EQ(FromLittleEndian(ToLittleEndian(value)), value); \
    EXPECT_EQ(FromBigEndian(ToBigEndian(value)), value);       \
  } while (false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/endian_test.cc" line="30" column="9" bodyfile="iceberg/test/endian_test.cc" bodystart="30" bodyend="34"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="endian_8h" kindref="compound">iceberg/util/endian.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">iceberg<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_ROUNDTRIP(value)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EXPECT_EQ(FromLittleEndian(ToLittleEndian(value)),<sp/>value);<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EXPECT_EQ(FromBigEndian(ToBigEndian(value)),<sp/>value);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">TEST(EndianTest,<sp/>RoundTripPreservesValue)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x1234));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xDEADBEEF));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(std::numeric_limits&lt;uint64_t&gt;::max());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-0x12345678));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(std::numeric_limits&lt;int64_t&gt;::min());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(std::numeric_limits&lt;int16_t&gt;::max());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(3.14f);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(2.718281828459045);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(0.0f);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(-0.0f);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(0.0);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(-0.0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(std::numeric_limits&lt;float&gt;::infinity());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(-std::numeric_limits&lt;float&gt;::infinity());</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(std::numeric_limits&lt;double&gt;::infinity());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>EXPECT_ROUNDTRIP(-std::numeric_limits&lt;double&gt;::infinity());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(std::isnan(</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="endian_8h_1a3c625e7e9cbdc285af7559f3f20098ff" kindref="member">FromLittleEndian</ref>(<ref refid="endian_8h_1a213342dba249a0224ead295465dbbfd0" kindref="member">ToLittleEndian</ref>(std::numeric_limits&lt;float&gt;::quiet_NaN()))));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::isnan(<ref refid="endian_8h_1ad32cff8f6ada2e4ab2e0701f0a043f28" kindref="member">FromBigEndian</ref>(<ref refid="endian_8h_1aa051ea16b5c1c3d2c4b5c04db46ffa43" kindref="member">ToBigEndian</ref>(std::numeric_limits&lt;double&gt;::quiet_NaN()))));</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">TEST(EndianTest,<sp/>ByteWiseValidation)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>uint32_t<sp/>original_int<sp/>=<sp/>0x12345678;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>uint32_t<sp/>little_endian_int<sp/>=<sp/><ref refid="endian_8h_1a213342dba249a0224ead295465dbbfd0" kindref="member">ToLittleEndian</ref>(original_int);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>uint32_t<sp/>big_endian_int<sp/>=<sp/><ref refid="endian_8h_1aa051ea16b5c1c3d2c4b5c04db46ffa43" kindref="member">ToBigEndian</ref>(original_int);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>little_int_bytes<sp/>=<sp/>std::bit_cast&lt;std::array&lt;uint8_t,<sp/>4&gt;&gt;(little_endian_int);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>big_int_bytes<sp/>=<sp/>std::bit_cast&lt;std::array&lt;uint8_t,<sp/>4&gt;&gt;(big_endian_int);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>EXPECT_EQ(little_int_bytes,<sp/>(std::array&lt;uint8_t,<sp/>4&gt;{0x78,<sp/>0x56,<sp/>0x34,<sp/>0x12}));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>EXPECT_EQ(big_int_bytes,<sp/>(std::array&lt;uint8_t,<sp/>4&gt;{0x12,<sp/>0x34,<sp/>0x56,<sp/>0x78}));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>original_float<sp/>=<sp/>3.14f;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>little_endian_float<sp/>=<sp/><ref refid="endian_8h_1a213342dba249a0224ead295465dbbfd0" kindref="member">ToLittleEndian</ref>(original_float);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>big_endian_float<sp/>=<sp/><ref refid="endian_8h_1aa051ea16b5c1c3d2c4b5c04db46ffa43" kindref="member">ToBigEndian</ref>(original_float);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>little_float_bytes<sp/>=<sp/>std::bit_cast&lt;std::array&lt;uint8_t,<sp/>4&gt;&gt;(little_endian_float);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>big_float_bytes<sp/>=<sp/>std::bit_cast&lt;std::array&lt;uint8_t,<sp/>4&gt;&gt;(big_endian_float);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>EXPECT_EQ(little_float_bytes,<sp/>(std::array&lt;uint8_t,<sp/>4&gt;{0xC3,<sp/>0xF5,<sp/>0x48,<sp/>0x40}));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>EXPECT_EQ(big_float_bytes,<sp/>(std::array&lt;uint8_t,<sp/>4&gt;{0x40,<sp/>0x48,<sp/>0xF5,<sp/>0xC3}));</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>iceberg</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="iceberg/test/endian_test.cc"/>
  </compounddef>
</doxygen>
