<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="struct__like__test_8cc" kind="file" language="C++">
    <compoundname>struct_like_test.cc</compoundname>
    <includes local="no">arrow/c/bridge.h</includes>
    <includes local="no">arrow/json/from_string.h</includes>
    <includes local="no">arrow/type.h</includes>
    <includes local="no">arrow/util/decimal.h</includes>
    <includes refid="arrow__c__data__guard__internal_8h" local="yes">iceberg/arrow_c_data_guard_internal.h</includes>
    <includes refid="manifest__list_8h" local="yes">iceberg/manifest_list.h</includes>
    <includes refid="manifest__reader__internal_8h" local="yes">iceberg/manifest_reader_internal.h</includes>
    <includes refid="arrow__array__wrapper_8h" local="yes">iceberg/row/arrow_array_wrapper.h</includes>
    <includes refid="manifest__wrapper_8h" local="yes">iceberg/row/manifest_wrapper.h</includes>
    <includes refid="schema__internal_8h" local="yes">iceberg/schema_internal.h</includes>
    <includes refid="matchers_8h" local="yes">iceberg/test/matchers.h</includes>
    <incdepgraph>
      <node id="8">
        <label>iceberg/arrow_c_data.h</label>
        <link refid="arrow__c__data_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>iceberg/arrow_c_data_guard_internal.h</label>
        <link refid="arrow__c__data__guard__internal_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>iceberg/file_format.h</label>
        <link refid="file__format_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>iceberg/file_reader.h</label>
        <link refid="file__reader_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>iceberg/iceberg_export.h</label>
        <link refid="iceberg__export_8h_source"/>
      </node>
      <node id="47">
        <label>iceberg/inheritable_metadata.h</label>
        <link refid="inheritable__metadata_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>iceberg/manifest_list.h</label>
        <link refid="manifest__list_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>iceberg/manifest_reader.h</label>
        <link refid="manifest__reader_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>iceberg/manifest_reader_internal.h</label>
        <link refid="manifest__reader__internal_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>iceberg/partition_field.h</label>
        <link refid="partition__field_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>iceberg/partition_spec.h</label>
        <link refid="partition__spec_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>iceberg/result.h</label>
        <link refid="result_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>iceberg/row/arrow_array_wrapper.h</label>
        <link refid="arrow__array__wrapper_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>iceberg/row/manifest_wrapper.h</label>
        <link refid="manifest__wrapper_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>iceberg/row/struct_like.h</label>
        <link refid="struct__like_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>iceberg/schema_field.h</label>
        <link refid="schema__field_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>iceberg/schema_internal.h</label>
        <link refid="schema__internal_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>iceberg/snapshot.h</label>
        <link refid="snapshot_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>iceberg/table_metadata.h</label>
        <link refid="table__metadata_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>iceberg/test/matchers.h</label>
        <link refid="matchers_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>iceberg/test/struct_like_test.cc</label>
        <link refid="struct__like__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>iceberg/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>iceberg/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
      </node>
      <node id="51">
        <label>iceberg/util/decimal.h</label>
        <link refid="decimal_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>iceberg/util/formattable.h</label>
        <link refid="formattable_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>iceberg/util/int128.h</label>
        <link refid="int128_8h"/>
      </node>
      <node id="36">
        <label>iceberg/util/lazy.h</label>
        <link refid="lazy_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>iceberg/util/macros.h</label>
        <link refid="macros_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>iceberg/util/string_util.h</label>
        <link refid="string__util_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>iceberg/util/timepoint.h</label>
        <link refid="timepoint_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>algorithm</label>
      </node>
      <node id="35">
        <label>array</label>
      </node>
      <node id="2">
        <label>arrow/c/bridge.h</label>
      </node>
      <node id="3">
        <label>arrow/json/from_string.h</label>
      </node>
      <node id="4">
        <label>arrow/type.h</label>
      </node>
      <node id="5">
        <label>arrow/util/decimal.h</label>
      </node>
      <node id="40">
        <label>cassert</label>
      </node>
      <node id="32">
        <label>chrono</label>
      </node>
      <node id="52">
        <label>compare</label>
      </node>
      <node id="37">
        <label>concepts</label>
      </node>
      <node id="9">
        <label>cstdint</label>
      </node>
      <node id="25">
        <label>expected</label>
      </node>
      <node id="26">
        <label>format</label>
      </node>
      <node id="38">
        <label>functional</label>
      </node>
      <node id="59">
        <label>gmock/gmock.h</label>
      </node>
      <node id="60">
        <label>gtest/gtest.h</label>
      </node>
      <node id="53">
        <label>iosfwd</label>
      </node>
      <node id="21">
        <label>memory</label>
      </node>
      <node id="17">
        <label>mutex</label>
      </node>
      <node id="7">
        <label>nanoarrow/nanoarrow.h</label>
      </node>
      <node id="11">
        <label>optional</label>
      </node>
      <node id="46">
        <label>ranges</label>
      </node>
      <node id="18">
        <label>span</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="13">
        <label>string_view</label>
      </node>
      <node id="54">
        <label>type_traits</label>
      </node>
      <node id="29">
        <label>unordered_map</label>
      </node>
      <node id="14">
        <label>utility</label>
      </node>
      <node id="30">
        <label>variant</label>
      </node>
      <node id="19">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceiceberg">iceberg</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="struct__like__test_8cc_1a42c0565c0f513b9f31c818b29a157aa3" prot="public" static="no">
        <name>EXPECT_SCALAR_EQ</name>
        <param><defname>result</defname></param>
        <param><defname>expected_type</defname></param>
        <param><defname>expected_value</defname></param>
        <initializer>  do {                                                          \
    ASSERT_THAT(result, IsOk());                                \
    auto scalar = result.value();                               \
    ASSERT_TRUE(std::holds_alternative&lt;expected_type&gt;(scalar)); \
    EXPECT_EQ(std::get&lt;expected_type&gt;(scalar), expected_value); \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/struct_like_test.cc" line="35" column="9" bodyfile="iceberg/test/struct_like_test.cc" bodystart="35" bodyend="41"/>
      </memberdef>
      <memberdef kind="define" id="struct__like__test_8cc_1a20d7ffa7965522f9f20092b0601b398d" prot="public" static="no">
        <name>EXPECT_DECIMAL_EQ</name>
        <param><defname>result</defname></param>
        <param><defname>scale</defname></param>
        <param><defname>expected_value</defname></param>
        <initializer>  do {                                                    \
    ASSERT_THAT(result, IsOk());                          \
    auto scalar = result.value();                         \
    ASSERT_TRUE(std::holds_alternative&lt;Decimal&gt;(scalar)); \
    auto decimal = std::get&lt;Decimal&gt;(scalar);             \
    EXPECT_EQ(decimal.ToString(scale), expected_value);   \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/struct_like_test.cc" line="43" column="9" bodyfile="iceberg/test/struct_like_test.cc" bodystart="43" bodyend="50"/>
      </memberdef>
      <memberdef kind="define" id="struct__like__test_8cc_1a822c71c6682024a8e921f979753cae21" prot="public" static="no">
        <name>EXPECT_SCALAR_NULL</name>
        <param><defname>result</defname></param>
        <initializer>  do {                                                           \
    ASSERT_THAT(result, IsOk());                                 \
    auto scalar = result.value();                                \
    ASSERT_TRUE(std::holds_alternative&lt;std::monostate&gt;(scalar)); \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/struct_like_test.cc" line="52" column="9" bodyfile="iceberg/test/struct_like_test.cc" bodystart="52" bodyend="57"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arrow/c/bridge.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arrow/json/from_string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arrow/type.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arrow/util/decimal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/arrow_c_data_guard_internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="manifest__list_8h" kindref="compound">iceberg/manifest_list.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/manifest_reader_internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow__array__wrapper_8h" kindref="compound">iceberg/row/arrow_array_wrapper.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/row/manifest_wrapper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/schema_internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/test/matchers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">iceberg<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_SCALAR_EQ(result,<sp/>expected_type,<sp/>expected_value)<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>auto<sp/>scalar<sp/>=<sp/>result.value();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_TRUE(std::holds_alternative&lt;expected_type&gt;(scalar));<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EXPECT_EQ(std::get&lt;expected_type&gt;(scalar),<sp/>expected_value);<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_DECIMAL_EQ(result,<sp/>scale,<sp/>expected_value)<sp/><sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>auto<sp/>scalar<sp/>=<sp/>result.value();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_TRUE(std::holds_alternative&lt;Decimal&gt;(scalar));<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>auto<sp/>decimal<sp/>=<sp/>std::get&lt;Decimal&gt;(scalar);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EXPECT_EQ(decimal.ToString(scale),<sp/>expected_value);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_SCALAR_NULL(result)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>auto<sp/>scalar<sp/>=<sp/>result.value();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_TRUE(std::holds_alternative&lt;std::monostate&gt;(scalar));<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">TEST(ManifestFileStructLike,<sp/>BasicFields)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>ManifestFile<sp/>manifest_file{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.manifest_path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/path/to/manifest.avro&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.manifest_length<sp/>=<sp/>12345,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.partition_spec_id<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.content<sp/>=<sp/><ref refid="structiceberg_1_1ManifestFile_1a94a84385ede1722fcb750664bdd99deca0ac87546e8b36fcb3034694d4d909ea3" kindref="member">ManifestFile::Content::kData</ref>,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.sequence_number<sp/>=<sp/>100,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.min_sequence_number<sp/>=<sp/>90,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.added_snapshot_id<sp/>=<sp/>1001,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.added_files_count<sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.existing_files_count<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.deleted_files_count<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.added_rows_count<sp/>=<sp/>1000,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.existing_rows_count<sp/>=<sp/>500,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.deleted_rows_count<sp/>=<sp/>20,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>ManifestFileStructLike<sp/>struct_like(manifest_file);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>EXPECT_EQ(struct_like.num_fields(),<sp/>16);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_EQ(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>struct_like.GetField(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ManifestFileField::kManifestPath)),</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view,<sp/></highlight><highlight class="stringliteral">&quot;/path/to/manifest.avro&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_EQ(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>struct_like.GetField(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ManifestFileField::kManifestLength)),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t,<sp/>12345);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_EQ(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>struct_like.GetField(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ManifestFileField::kPartitionSpecId)),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t,<sp/>1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_EQ(struct_like.GetField(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ManifestFileField::kContent)),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structiceberg_1_1ManifestFile_1a94a84385ede1722fcb750664bdd99deca0ac87546e8b36fcb3034694d4d909ea3" kindref="member">ManifestFile::Content::kData</ref>));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_EQ(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>struct_like.GetField(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ManifestFileField::kSequenceNumber)),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t,<sp/>100);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_EQ(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>struct_like.GetField(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ManifestFileField::kAddedFilesCount)),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t,<sp/>10);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>EXPECT_THAT(struct_like.GetField(100),<sp/>IsError(ErrorKind::kInvalidArgument));</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">TEST(ManifestFileStructLike,<sp/>OptionalFields)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>ManifestFile<sp/>manifest_file{.manifest_path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/path/to/manifest2.avro&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.manifest_length<sp/>=<sp/>54321,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.partition_spec_id<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.content<sp/>=<sp/><ref refid="structiceberg_1_1ManifestFile_1a94a84385ede1722fcb750664bdd99deca93fc560f1ee64f4259f4bdfd420e9ae1" kindref="member">ManifestFile::Content::kDeletes</ref>,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sequence_number<sp/>=<sp/>200,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.min_sequence_number<sp/>=<sp/>180,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.added_snapshot_id<sp/>=<sp/>2001,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.added_files_count<sp/>=<sp/>std::nullopt,<sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>optional<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.existing_files_count<sp/>=<sp/>15,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.deleted_files_count<sp/>=<sp/>std::nullopt,<sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>optional<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.added_rows_count<sp/>=<sp/>std::nullopt,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>optional<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.existing_rows_count<sp/>=<sp/>1500,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.deleted_rows_count<sp/>=<sp/>200,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.partitions<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.key_metadata<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.first_row_id<sp/>=<sp/>12345};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>ManifestFileStructLike<sp/>struct_like(manifest_file);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_NULL(</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>struct_like.GetField(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ManifestFileField::kAddedFilesCount)));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_EQ(</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>struct_like.GetField(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ManifestFileField::kExistingFilesCount)),</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t,<sp/>15);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_EQ(</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>struct_like.GetField(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ManifestFileField::kFirstRowId)),<sp/>int64_t,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>12345);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_EQ(struct_like.GetField(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ManifestFileField::kContent)),</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structiceberg_1_1ManifestFile_1a94a84385ede1722fcb750664bdd99deca93fc560f1ee64f4259f4bdfd420e9ae1" kindref="member">ManifestFile::Content::kDeletes</ref>));</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">TEST(ManifestFileStructLike,<sp/>WithPartitions)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>ManifestFile<sp/>manifest_file{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.manifest_path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/path/to/manifest3.avro&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.manifest_length<sp/>=<sp/>98765,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.partition_spec_id<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.content<sp/>=<sp/><ref refid="structiceberg_1_1ManifestFile_1a94a84385ede1722fcb750664bdd99deca0ac87546e8b36fcb3034694d4d909ea3" kindref="member">ManifestFile::Content::kData</ref>,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.sequence_number<sp/>=<sp/>300,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.min_sequence_number<sp/>=<sp/>290,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.added_snapshot_id<sp/>=<sp/>3001,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.added_files_count<sp/>=<sp/>20,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.existing_files_count<sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.deleted_files_count<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.added_rows_count<sp/>=<sp/>2000,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.existing_rows_count<sp/>=<sp/>1000,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.deleted_rows_count<sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.partitions<sp/>=<sp/>{{.contains_null<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contains_nan<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.lower_bound<sp/>=<sp/>std::vector&lt;uint8_t&gt;{0x01,<sp/>0x02,<sp/>0x03},</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.upper_bound<sp/>=<sp/>std::vector&lt;uint8_t&gt;{0x04,<sp/>0x05,<sp/>0x06}},</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.contains_null<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.contains_nan<sp/>=<sp/>std::nullopt,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.lower_bound<sp/>=<sp/>std::vector&lt;uint8_t&gt;{0x10,<sp/>0x20},</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.upper_bound<sp/>=<sp/>std::nullopt}}};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>ManifestFileStructLike<sp/>struct_like(manifest_file);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>partitions_result<sp/>=<sp/>struct_like.GetField(</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ManifestFileField::kPartitionFieldSummary));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>ASSERT_THAT(partitions_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>partitions_scalar<sp/>=<sp/>partitions_result.value();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(std::holds_alternative&lt;std::shared_ptr&lt;ArrayLike&gt;&gt;(partitions_scalar));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>partitions_array<sp/>=<sp/>std::get&lt;std::shared_ptr&lt;ArrayLike&gt;&gt;(partitions_scalar);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>EXPECT_EQ(partitions_array-&gt;size(),<sp/>2);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1st<sp/>partition<sp/>summary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_partition_result<sp/>=<sp/>partitions_array-&gt;GetElement(0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>ASSERT_THAT(first_partition_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_partition_scalar<sp/>=<sp/>first_partition_result.value();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::holds_alternative&lt;std::shared_ptr&lt;StructLike&gt;&gt;(first_partition_scalar));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_partition_struct<sp/>=</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;std::shared_ptr&lt;StructLike&gt;&gt;(first_partition_scalar);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>EXPECT_EQ(first_partition_struct-&gt;num_fields(),<sp/>4);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_EQ(first_partition_struct-&gt;GetField(0),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_EQ(first_partition_struct-&gt;GetField(1),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lower_bound_result<sp/>=<sp/>first_partition_struct-&gt;GetField(2);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>ASSERT_THAT(lower_bound_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lower_bound_scalar<sp/>=<sp/>lower_bound_result.value();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(std::holds_alternative&lt;std::string_view&gt;(lower_bound_scalar));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lower_bound_view<sp/>=<sp/>std::get&lt;std::string_view&gt;(lower_bound_scalar);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>EXPECT_EQ(lower_bound_view.size(),<sp/>3);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lower_bound_view[0]),<sp/>0x01);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lower_bound_view[1]),<sp/>0x02);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lower_bound_view[2]),<sp/>0x03);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>2nd<sp/>partition<sp/>summary<sp/>with<sp/>null<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>second_partition_result<sp/>=<sp/>partitions_array-&gt;GetElement(1);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>ASSERT_THAT(second_partition_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>second_partition_scalar<sp/>=<sp/>second_partition_result.value();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::holds_alternative&lt;std::shared_ptr&lt;StructLike&gt;&gt;(second_partition_scalar));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>second_partition_struct<sp/>=</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;std::shared_ptr&lt;StructLike&gt;&gt;(second_partition_scalar);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_NULL(second_partition_struct-&gt;GetField(1));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>EXPECT_SCALAR_NULL(second_partition_struct-&gt;GetField(3));</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">TEST(ArrowArrayStructLike,<sp/>PrimitiveFields)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>struct_type<sp/>=<sp/>::arrow::struct_(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{::arrow::field(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/>::arrow::int64(),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::field(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>::arrow::utf8(),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::field(</highlight><highlight class="stringliteral">&quot;score&quot;</highlight><highlight class="normal">,<sp/>::arrow::float32(),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::field(</highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">,<sp/>::arrow::boolean(),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::field(</highlight><highlight class="stringliteral">&quot;date&quot;</highlight><highlight class="normal">,<sp/>::arrow::date32(),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::field(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/>::arrow::time64(::arrow::TimeUnit::MICRO),</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::field(</highlight><highlight class="stringliteral">&quot;timestamp&quot;</highlight><highlight class="normal">,<sp/>::arrow::timestamp(::arrow::TimeUnit::MICRO),</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::field(</highlight><highlight class="stringliteral">&quot;fixed&quot;</highlight><highlight class="normal">,<sp/>::arrow::fixed_size_binary(4),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::field(</highlight><highlight class="stringliteral">&quot;decimal&quot;</highlight><highlight class="normal">,<sp/>::arrow::decimal128(10,<sp/>2),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">)});</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrow_array<sp/>=<sp/>::arrow::json::ArrayFromJSONString(struct_type,<sp/>R</highlight><highlight class="stringliteral">&quot;([</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{&quot;id&quot;:<sp/>1,<sp/>&quot;name&quot;:<sp/>&quot;Alice&quot;,<sp/>&quot;score&quot;:<sp/>95.5,<sp/>&quot;active&quot;:<sp/>true,<sp/>&quot;date&quot;:<sp/>1714396800,</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>&quot;time&quot;:<sp/>123456,<sp/>&quot;timestamp&quot;:<sp/>1714396800000000,<sp/>&quot;fixed&quot;:<sp/>&quot;aaaa&quot;,<sp/>&quot;decimal&quot;:<sp/>&quot;1234.56&quot;},</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{&quot;id&quot;:<sp/>2,<sp/>&quot;name&quot;:<sp/>&quot;Bob&quot;,<sp/>&quot;score&quot;:<sp/>null,<sp/>&quot;active&quot;:<sp/>false,<sp/>&quot;date&quot;:<sp/>1714396801,</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>&quot;time&quot;:<sp/>123457,<sp/>&quot;timestamp&quot;:<sp/>1714396800000001,<sp/>&quot;fixed&quot;:<sp/>&quot;bbbb&quot;,<sp/>&quot;decimal&quot;:<sp/>&quot;-1234.56&quot;},</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{&quot;id&quot;:<sp/>3,<sp/>&quot;name&quot;:<sp/>null,<sp/>&quot;score&quot;:<sp/>87.2,<sp/>&quot;active&quot;:<sp/>true,<sp/>&quot;date&quot;:<sp/>1714396802,</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>&quot;time&quot;:<sp/>123458,<sp/>&quot;timestamp&quot;:<sp/>1714396800000002,<sp/>&quot;fixed&quot;:<sp/>&quot;cccc&quot;,<sp/>&quot;decimal&quot;:<sp/>&quot;1234.00&quot;}])&quot;)</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ValueOrDie();</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><ref refid="structArrowSchema" kindref="compound">ArrowSchema</ref><sp/>c_schema;</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><ref refid="structArrowArray" kindref="compound">ArrowArray</ref><sp/>c_array;</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/>internal::ArrowSchemaGuard<sp/>schema_guard(&amp;c_schema);</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/>internal::ArrowArrayGuard<sp/>array_guard(&amp;c_array);</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(::arrow::ExportType(*struct_type,<sp/>&amp;c_schema).ok());</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(::arrow::ExportArray(*arrow_array,<sp/>&amp;c_array).ok());</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>struct_like_result<sp/>=<sp/>ArrowArrayStructLike::Make(c_schema,<sp/>c_array);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>ASSERT_THAT(struct_like_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>struct_like<sp/>=<sp/>std::move(struct_like_result.value());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>int64_t<sp/>kNumRows<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>std::array&lt;int64_t,<sp/>kNumRows&gt;<sp/>ids<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>std::array&lt;std::optional&lt;std::string&gt;,<sp/>kNumRows&gt;<sp/>names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Alice&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Bob&quot;</highlight><highlight class="normal">,<sp/>std::nullopt};</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>std::array&lt;std::optional&lt;float&gt;,<sp/>kNumRows&gt;<sp/>scores<sp/>=<sp/>{95.5f,<sp/>std::nullopt,<sp/>87.2f};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>std::array&lt;bool,<sp/>kNumRows&gt;<sp/>actives<sp/>=<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>std::array&lt;int32_t,<sp/>kNumRows&gt;<sp/>dates<sp/>=<sp/>{1714396800,<sp/>1714396801,<sp/>1714396802};</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>std::array&lt;int64_t,<sp/>kNumRows&gt;<sp/>times<sp/>=<sp/>{123456,<sp/>123457,<sp/>123458};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>std::array&lt;int64_t,<sp/>kNumRows&gt;<sp/>timestamps<sp/>=<sp/>{1714396800000000,<sp/>1714396800000001,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1714396800000002};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>std::array&lt;std::string,<sp/>kNumRows&gt;<sp/>fixeds<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;aaaa&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bbbb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cccc&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>std::array&lt;std::string,<sp/>kNumRows&gt;<sp/>decimals<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;1234.56&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-1234.56&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1234.00&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kNumRows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(struct_like-&gt;Reset(i),<sp/>IsOk());</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(struct_like-&gt;GetField(0),<sp/>int64_t,<sp/>ids[i]);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(names[i].has_value())<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(struct_like-&gt;GetField(1),<sp/>std::string_view,<sp/>names[i]);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_SCALAR_NULL(struct_like-&gt;GetField(1));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scores[i].has_value())<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(struct_like-&gt;GetField(2),<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>scores[i].value());</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_SCALAR_NULL(struct_like-&gt;GetField(2));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(struct_like-&gt;GetField(3),<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>actives[i]);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(struct_like-&gt;GetField(4),<sp/>int32_t,<sp/>dates[i]);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(struct_like-&gt;GetField(5),<sp/>int64_t,<sp/>times[i]);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(struct_like-&gt;GetField(6),<sp/>int64_t,<sp/>timestamps[i]);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(struct_like-&gt;GetField(7),<sp/>std::string_view,<sp/>fixeds[i]);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DECIMAL_EQ(struct_like-&gt;GetField(8),<sp/></highlight><highlight class="comment">/*scale=*/</highlight><highlight class="normal">2,<sp/>decimals[i]);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">TEST(ArrowArrayStructLike,<sp/>NestedStruct)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>person_type<sp/>=</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::struct_({::arrow::field(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>::arrow::utf8(),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::field(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>::arrow::int32(),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">)});</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>root_type<sp/>=</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::struct_({::arrow::field(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/>::arrow::int64(),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::field(</highlight><highlight class="stringliteral">&quot;person&quot;</highlight><highlight class="normal">,<sp/>person_type,<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">)});</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrow_array<sp/>=<sp/>::arrow::json::ArrayFromJSONString(root_type,<sp/>R</highlight><highlight class="stringliteral">&quot;([</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{&quot;id&quot;:<sp/>1,<sp/>&quot;person&quot;:<sp/>{&quot;name&quot;:<sp/>&quot;Alice&quot;,<sp/>&quot;age&quot;:<sp/>30}},</highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{&quot;id&quot;:<sp/>2,<sp/>&quot;person&quot;:<sp/>{&quot;name&quot;:<sp/>&quot;Bob&quot;,<sp/>&quot;age&quot;:<sp/>25}}])&quot;)</highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ValueOrDie();</highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral"><sp/><sp/><ref refid="structArrowSchema" kindref="compound">ArrowSchema</ref><sp/>c_schema;</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral"><sp/><sp/><ref refid="structArrowArray" kindref="compound">ArrowArray</ref><sp/>c_array;</highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"><sp/><sp/>internal::ArrowSchemaGuard<sp/>schema_guard(&amp;c_schema);</highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral"><sp/><sp/>internal::ArrowArrayGuard<sp/>array_guard(&amp;c_array);</highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(::arrow::ExportType(*root_type,<sp/>&amp;c_schema).ok());</highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(::arrow::ExportArray(*arrow_array,<sp/>&amp;c_array).ok());</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>struct_like_result<sp/>=<sp/>ArrowArrayStructLike::Make(c_schema,<sp/>c_array);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>ASSERT_THAT(struct_like_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>struct_like<sp/>=<sp/>std::move(struct_like_result.value());</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>int64_t<sp/>kNumRows<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>std::array&lt;int64_t,<sp/>kNumRows&gt;<sp/>ids<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>std::array&lt;std::string,<sp/>kNumRows&gt;<sp/>names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Alice&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Bob&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>std::array&lt;int32_t,<sp/>kNumRows&gt;<sp/>ages<sp/>=<sp/>{30,<sp/>25};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kNumRows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(struct_like-&gt;Reset(i),<sp/>IsOk());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(struct_like-&gt;num_fields(),<sp/>2);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(struct_like-&gt;GetField(0),<sp/>int64_t,<sp/>ids[i]);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>person_result<sp/>=<sp/>struct_like-&gt;GetField(1);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(person_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>person_scalar<sp/>=<sp/>person_result.value();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(std::holds_alternative&lt;std::shared_ptr&lt;StructLike&gt;&gt;(person_scalar));</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>person_struct<sp/>=<sp/>std::get&lt;std::shared_ptr&lt;StructLike&gt;&gt;(person_scalar);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(person_struct-&gt;num_fields(),<sp/>2);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(person_struct-&gt;GetField(0),<sp/>std::string_view,<sp/>names[i]);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(person_struct-&gt;GetField(1),<sp/>int32_t,<sp/>ages[i]);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">TEST(ArrowArrayStructLike,<sp/>PrimitiveList)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_type<sp/>=</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::list(::arrow::field(</highlight><highlight class="stringliteral">&quot;item&quot;</highlight><highlight class="normal">,<sp/>::arrow::int32(),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrow_array<sp/>=<sp/>::arrow::json::ArrayFromJSONString(list_type,<sp/>R</highlight><highlight class="stringliteral">&quot;([</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>[1,<sp/>2,<sp/>3,<sp/>4,<sp/>5],</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>[10,<sp/>20],</highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>[]])&quot;)</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ValueOrDie();</highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><ref refid="structArrowSchema" kindref="compound">ArrowSchema</ref><sp/>c_schema;</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><ref refid="structArrowArray" kindref="compound">ArrowArray</ref><sp/>c_array;</highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"><sp/><sp/>internal::ArrowSchemaGuard<sp/>schema_guard(&amp;c_schema);</highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/>internal::ArrowArrayGuard<sp/>array_guard(&amp;c_array);</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(::arrow::ExportType(*list_type,<sp/>&amp;c_schema).ok());</highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(::arrow::ExportArray(*arrow_array,<sp/>&amp;c_array).ok());</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>array_like_result<sp/>=<sp/>ArrowArrayArrayLike::Make(c_schema,<sp/>c_array);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>ASSERT_THAT(array_like_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>array_like<sp/>=<sp/>std::move(array_like_result.value());</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>int64_t<sp/>kNumRows<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>std::array&lt;std::vector&lt;int32_t&gt;,<sp/>kNumRows&gt;<sp/>expected_lists<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int32_t&gt;{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5},</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int32_t&gt;{10,<sp/>20},</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int32_t&gt;{},</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kNumRows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(array_like-&gt;Reset(i),<sp/>IsOk());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>expected_list<sp/>=<sp/>expected_lists[i];</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(array_like-&gt;size(),<sp/>expected_list.size());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>expected_list.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(array_like-&gt;GetElement(j),<sp/>int32_t,<sp/>expected_list[j]);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">TEST(ArrowArrayStructLike,<sp/>PrimitiveMap)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_type<sp/>=<sp/>std::make_shared&lt;::arrow::MapType&gt;(</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::field(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>::arrow::utf8(),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::field(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>::arrow::int32(),<sp/></highlight><highlight class="comment">/*nullable=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrow_array<sp/>=<sp/>::arrow::json::ArrayFromJSONString(map_type,<sp/>R</highlight><highlight class="stringliteral">&quot;([</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>[[&quot;Foo&quot;,<sp/>1],<sp/>[&quot;Bar&quot;,<sp/>2]],</highlight></codeline>
<codeline lineno="356"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>[[&quot;Baz&quot;,<sp/>1]],</highlight></codeline>
<codeline lineno="357"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>[]])&quot;)</highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ValueOrDie();</highlight></codeline>
<codeline lineno="359"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral"><sp/><sp/><ref refid="structArrowSchema" kindref="compound">ArrowSchema</ref><sp/>c_schema;</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral"><sp/><sp/><ref refid="structArrowArray" kindref="compound">ArrowArray</ref><sp/>c_array;</highlight></codeline>
<codeline lineno="362"><highlight class="stringliteral"><sp/><sp/>internal::ArrowSchemaGuard<sp/>schema_guard(&amp;c_schema);</highlight></codeline>
<codeline lineno="363"><highlight class="stringliteral"><sp/><sp/>internal::ArrowArrayGuard<sp/>array_guard(&amp;c_array);</highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(::arrow::ExportType(*map_type,<sp/>&amp;c_schema).ok());</highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral"><sp/><sp/>ASSERT_TRUE(::arrow::ExportArray(*arrow_array,<sp/>&amp;c_array).ok());</highlight></codeline>
<codeline lineno="366"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_like_result<sp/>=<sp/>ArrowArrayMapLike::Make(c_schema,<sp/>c_array);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>ASSERT_THAT(map_like_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_like<sp/>=<sp/>std::move(map_like_result.value());</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>int64_t<sp/>kNumRows<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>std::array&lt;std::vector&lt;std::pair&lt;std::string,<sp/>int32_t&gt;&gt;,<sp/>kNumRows&gt;<sp/>expected_maps<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>int32_t&gt;&gt;{{</highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;Bar&quot;</highlight><highlight class="normal">,<sp/>2}},</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>int32_t&gt;&gt;{{</highlight><highlight class="stringliteral">&quot;Baz&quot;</highlight><highlight class="normal">,<sp/>1}},</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>int32_t&gt;&gt;{},</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kNumRows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(map_like-&gt;Reset(i),<sp/>IsOk());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>expected_map<sp/>=<sp/>expected_maps[i];</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(map_like-&gt;size(),<sp/>expected_map.size());</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>expected_map.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(map_like-&gt;GetKey(j),<sp/>std::string_view,<sp/>expected_map[j].first);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_SCALAR_EQ(map_like-&gt;GetValue(j),<sp/>int32_t,<sp/>expected_map[j].second);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>iceberg</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="iceberg/test/struct_like_test.cc"/>
  </compounddef>
</doxygen>
