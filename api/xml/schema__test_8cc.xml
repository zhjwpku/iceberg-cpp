<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="schema__test_8cc" kind="file" language="C++">
    <compoundname>schema_test.cc</compoundname>
    <includes refid="schema_8h" local="yes">iceberg/schema.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">thread</includes>
    <includes local="no">gmock/gmock.h</includes>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="result_8h" local="yes">iceberg/result.h</includes>
    <includes refid="schema__field_8h" local="yes">iceberg/schema_field.h</includes>
    <includes refid="matchers_8h" local="yes">iceberg/test/matchers.h</includes>
    <includes refid="formatter_8h" local="yes">iceberg/util/formatter.h</includes>
    <incdepgraph>
      <node id="8">
        <label>iceberg/iceberg_export.h</label>
        <link refid="iceberg__export_8h_source"/>
      </node>
      <node id="9">
        <label>iceberg/result.h</label>
        <link refid="result_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iceberg/schema.h</label>
        <link refid="schema_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>iceberg/schema_field.h</label>
        <link refid="schema__field_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>iceberg/test/matchers.h</label>
        <link refid="matchers_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>iceberg/test/schema_test.cc</label>
        <link refid="schema__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>iceberg/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>iceberg/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
      </node>
      <node id="16">
        <label>iceberg/util/formattable.h</label>
        <link refid="formattable_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>iceberg/util/formatter.h</label>
        <link refid="formatter_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>iceberg/util/lazy.h</label>
        <link refid="lazy_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>iceberg/util/macros.h</label>
        <link refid="macros_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>iceberg/util/string_util.h</label>
        <link refid="string__util_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>algorithm</label>
      </node>
      <node id="18">
        <label>array</label>
      </node>
      <node id="26">
        <label>cassert</label>
      </node>
      <node id="22">
        <label>concepts</label>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="10">
        <label>expected</label>
      </node>
      <node id="11">
        <label>format</label>
      </node>
      <node id="23">
        <label>functional</label>
      </node>
      <node id="31">
        <label>gmock/gmock.h</label>
      </node>
      <node id="32">
        <label>gtest/gtest.h</label>
      </node>
      <node id="13">
        <label>memory</label>
      </node>
      <node id="24">
        <label>mutex</label>
      </node>
      <node id="4">
        <label>optional</label>
      </node>
      <node id="29">
        <label>ranges</label>
      </node>
      <node id="19">
        <label>span</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="14">
        <label>string_view</label>
      </node>
      <node id="30">
        <label>thread</label>
      </node>
      <node id="20">
        <label>unordered_map</label>
      </node>
      <node id="6">
        <label>unordered_set</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classBasicShortNameTest" prot="public">BasicShortNameTest</innerclass>
    <innerclass refid="classComplexShortNameTest" prot="public">ComplexShortNameTest</innerclass>
    <innerclass refid="classComplexMapStructShortNameTest" prot="public">ComplexMapStructShortNameTest</innerclass>
    <innerclass refid="structSelectTestParam" prot="public">SelectTestParam</innerclass>
    <innerclass refid="classSelectParamTest" prot="public">SelectParamTest</innerclass>
    <innerclass refid="structProjectTestParam" prot="public">ProjectTestParam</innerclass>
    <innerclass refid="classProjectParamTest" prot="public">ProjectParamTest</innerclass>
    <innerclass refid="classSchemaThreadSafetyTest" prot="public">SchemaThreadSafetyTest</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="schema__test_8cc_1a53c5ea9cf65ba6616e0b954875353a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classiceberg_1_1StructType" kindref="compound">iceberg::StructType</ref> &gt;</type>
        <definition>std::shared_ptr&lt; iceberg::StructType &gt; MakeStructType</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>MakeStructType</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="35" column="17" bodyfile="iceberg/test/schema_test.cc" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1ac09c8d84f129dd8f754f469eb6ab7aec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="classiceberg_1_1Schema" kindref="compound">iceberg::Schema</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iceberg::Schema &gt; MakeSchema</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>MakeSchema</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="41" column="17" bodyfile="iceberg/test/schema_test.cc" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1ab938b1a442016f178220c6c0bd410950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SchemaTest, Basics)</argsstring>
        <name>TEST</name>
        <param>
          <type>SchemaTest</type>
        </param>
        <param>
          <type>Basics</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="46" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="46" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a57ce4593398d56cc109cba664703d30d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SchemaTest, Equality)</argsstring>
        <name>TEST</name>
        <param>
          <type>SchemaTest</type>
        </param>
        <param>
          <type>Equality</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="77" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="77" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1aaa3401d0aa21bb0565f7489389a11a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(BasicShortNameTest, TestFindById)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classBasicShortNameTest" kindref="compound">BasicShortNameTest</ref></type>
        </param>
        <param>
          <type>TestFindById</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="133" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="133" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a53a6b22b11a16d5b4c5f3559e527091d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(BasicShortNameTest, TestFindByName)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classBasicShortNameTest" kindref="compound">BasicShortNameTest</ref></type>
        </param>
        <param>
          <type>TestFindByName</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="145" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="145" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a0d31e9cfe470fb15e8c2e428f62e98c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(BasicShortNameTest, TestFindByNameCaseInsensitive)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classBasicShortNameTest" kindref="compound">BasicShortNameTest</ref></type>
        </param>
        <param>
          <type>TestFindByNameCaseInsensitive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="162" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="162" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1ae75dae779738cccd7ad2e6b8554cc518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(BasicShortNameTest, TestFindByShortNameCaseInsensitive)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classBasicShortNameTest" kindref="compound">BasicShortNameTest</ref></type>
        </param>
        <param>
          <type>TestFindByShortNameCaseInsensitive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="180" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="180" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a3bcf814f01cfafcf0e5c3509bc7b0c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ComplexShortNameTest, TestFindById)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classComplexShortNameTest" kindref="compound">ComplexShortNameTest</ref></type>
        </param>
        <param>
          <type>TestFindById</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="235" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="235" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1aaa1e9e840dc082ec14d078aa9dfcab40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ComplexShortNameTest, TestFindByName)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classComplexShortNameTest" kindref="compound">ComplexShortNameTest</ref></type>
        </param>
        <param>
          <type>TestFindByName</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="249" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="249" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1ad11a689d2087bd6cf8da6b31a89c4a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ComplexShortNameTest, TestFindByNameCaseInsensitive)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classComplexShortNameTest" kindref="compound">ComplexShortNameTest</ref></type>
        </param>
        <param>
          <type>TestFindByNameCaseInsensitive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="269" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="269" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a1d408cf4dc7ed6821682aa9412e5de24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ComplexShortNameTest, TestFindByShortName)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classComplexShortNameTest" kindref="compound">ComplexShortNameTest</ref></type>
        </param>
        <param>
          <type>TestFindByShortName</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="290" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="290" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1af667e12997b678a795ee9588a95bde9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ComplexShortNameTest, TestFindByShortNameCaseInsensitive)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classComplexShortNameTest" kindref="compound">ComplexShortNameTest</ref></type>
        </param>
        <param>
          <type>TestFindByShortNameCaseInsensitive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="304" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="304" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a7d3a290b5f46ac6f8be0029c589f9789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ComplexMapStructShortNameTest, TestFindById)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classComplexMapStructShortNameTest" kindref="compound">ComplexMapStructShortNameTest</ref></type>
        </param>
        <param>
          <type>TestFindById</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="377" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="377" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a91d2e04f5d077a2f71943d497475b1a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ComplexMapStructShortNameTest, TestFindByName)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classComplexMapStructShortNameTest" kindref="compound">ComplexMapStructShortNameTest</ref></type>
        </param>
        <param>
          <type>TestFindByName</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="391" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="391" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a34abf7678a0a3838f25fa65edd855aec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ComplexMapStructShortNameTest, TestFindByNameCaseInsensitive)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classComplexMapStructShortNameTest" kindref="compound">ComplexMapStructShortNameTest</ref></type>
        </param>
        <param>
          <type>TestFindByNameCaseInsensitive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="413" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="413" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a9d34756a0d4dd85fe6f9d968c013d6c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(ComplexMapStructShortNameTest, TestInvalidPaths)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classComplexMapStructShortNameTest" kindref="compound">ComplexMapStructShortNameTest</ref></type>
        </param>
        <param>
          <type>TestInvalidPaths</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="437" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="437" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a7a55e9706fd6b559c6c7d895c1676d32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SchemaTest, DuplicatePathErrorCaseSensitive)</argsstring>
        <name>TEST</name>
        <param>
          <type>SchemaTest</type>
        </param>
        <param>
          <type>DuplicatePathErrorCaseSensitive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="447" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="447" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1ae86b50350d6d3b32ceda84543b97e1a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SchemaTest, DuplicatePathErrorCaseInsensitive)</argsstring>
        <name>TEST</name>
        <param>
          <type>SchemaTest</type>
        </param>
        <param>
          <type>DuplicatePathErrorCaseInsensitive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="464" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="464" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1ad26b703ccf914fb9cf379b3710dbfd75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(SchemaTest, NestedDuplicateFieldIdError)</argsstring>
        <name>TEST</name>
        <param>
          <type>SchemaTest</type>
        </param>
        <param>
          <type>NestedDuplicateFieldIdError</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="481" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="481" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a9c7066c7145def60158b2e377177b25c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(SelectParamTest, SelectFields)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classSelectParamTest" kindref="compound">SelectParamTest</ref></type>
        </param>
        <param>
          <type>SelectFields</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="618" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="618" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a2e1c02644cb55ef1d75ab672de3e1ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(SelectTestCases, SelectParamTest, ::testing::Values(SelectTestParam{.test_name=&quot;SelectAllColumns&quot;,.create_schema=[]() { return BasicSchema();},.select_fields={&quot;*&quot;},.expected_schema=[]() { return BasicSchema();},.should_succeed=true}, SelectTestParam{.test_name=&quot;SelectSingleField&quot;,.create_schema=[]() { return BasicSchema();},.select_fields={&quot;name&quot;},.expected_schema=[]() { return MakeSchema(Name());},.should_succeed=true}, SelectTestParam{ .test_name=&quot;SelectMultipleFields&quot;,.create_schema=[]() { return BasicSchema();},.select_fields={&quot;id&quot;, &quot;name&quot;, &quot;age&quot;},.expected_schema=[]() { return MakeSchema(Id(), Name(), Age());},.should_succeed=true}, SelectTestParam{.test_name=&quot;SelectNonExistentField&quot;,.create_schema=[]() { return BasicSchema();},.select_fields={&quot;nonexistent&quot;},.expected_schema=[]() { return MakeSchema();},.should_succeed=true}, SelectTestParam{.test_name=&quot;SelectCaseSensitive&quot;,.create_schema=[]() { return BasicSchema();},.select_fields={&quot;Name&quot;},.expected_schema=[]() { return MakeSchema();},.should_succeed=true}, SelectTestParam{.test_name=&quot;SelectCaseInsensitive&quot;,.create_schema=[]() { return BasicSchema();},.select_fields={&quot;Name&quot;},.expected_schema=[]() { return MakeSchema(Name());},.should_succeed=true,.case_sensitive=false}))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>SelectTestCases</type>
        </param>
        <param>
          <type><ref refid="classSelectParamTest" kindref="compound">SelectParamTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name=&quot;SelectAllColumns&quot;,.create_schema=[]() { return BasicSchema();},.select_fields={&quot;*&quot;},.expected_schema=[]() { return BasicSchema();},.should_succeed=true}, <ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name=&quot;SelectSingleField&quot;,.create_schema=[]() { return BasicSchema();},.select_fields={&quot;name&quot;},.expected_schema=[]() { return MakeSchema(Name());},.should_succeed=true}, <ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{ .test_name=&quot;SelectMultipleFields&quot;,.create_schema=[]() { return BasicSchema();},.select_fields={&quot;id&quot;, &quot;name&quot;, &quot;age&quot;},.expected_schema=[]() { return MakeSchema(Id(), Name(), Age());},.should_succeed=true}, <ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name=&quot;SelectNonExistentField&quot;,.create_schema=[]() { return BasicSchema();},.select_fields={&quot;nonexistent&quot;},.expected_schema=[]() { return MakeSchema();},.should_succeed=true}, <ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name=&quot;SelectCaseSensitive&quot;,.create_schema=[]() { return BasicSchema();},.select_fields={&quot;Name&quot;},.expected_schema=[]() { return MakeSchema();},.should_succeed=true}, <ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name=&quot;SelectCaseInsensitive&quot;,.create_schema=[]() { return BasicSchema();},.select_fields={&quot;Name&quot;},.expected_schema=[]() { return MakeSchema(Name());},.should_succeed=true,.case_sensitive=false})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="633" column="1" declfile="iceberg/test/schema_test.cc" declline="633" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1aa58ddb4dc37870e3502f2c3757f5dda5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(SelectNestedTestCases, SelectParamTest, ::testing::Values(SelectTestParam{ .test_name=&quot;SelectTopLevelFields&quot;,.create_schema=[]() { return AddressSchema();},.select_fields={&quot;id&quot;, &quot;name&quot;},.expected_schema=[]() { return MakeSchema(Id(), Name());},.should_succeed=true}, SelectTestParam{.test_name=&quot;SelectNestedField&quot;,.create_schema=[]() { return AddressSchema();},.select_fields={&quot;address.street&quot;},.expected_schema=[]() { auto address_type=MakeStructType(Street());auto address_field=iceberg::SchemaField{ 14, &quot;address&quot;, std::move(address_type), true};return MakeSchema(address_field);},.should_succeed=true}))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>SelectNestedTestCases</type>
        </param>
        <param>
          <type><ref refid="classSelectParamTest" kindref="compound">SelectParamTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{ .test_name=&quot;SelectTopLevelFields&quot;,.create_schema=[]() { return AddressSchema();},.select_fields={&quot;id&quot;, &quot;name&quot;},.expected_schema=[]() { return MakeSchema(Id(), Name());},.should_succeed=true}, <ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name=&quot;SelectNestedField&quot;,.create_schema=[]() { return AddressSchema();},.select_fields={&quot;address.street&quot;},.expected_schema=[]() { auto address_type=MakeStructType(Street());auto address_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 14, &quot;address&quot;, std::move(address_type), true};return MakeSchema(address_field);},.should_succeed=true})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="674" column="1" declfile="iceberg/test/schema_test.cc" declline="674" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a25926ede568c90890512d6b82939c4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(SelectMultiLevelTestCases, SelectParamTest, ::testing::Values(SelectTestParam{.test_name=&quot;SelectTopLevelAndNestedFields&quot;,.create_schema=[]() { return NestedUserSchema();},.select_fields={&quot;id&quot;, &quot;user.name&quot;, &quot;user.address.street&quot;},.expected_schema=[]() { auto address_type=MakeStructType(Street());auto address_field=iceberg::SchemaField{ 16, &quot;address&quot;, std::move(address_type), true};auto user_type=MakeStructType(Name(), address_field);auto user_field=iceberg::SchemaField{ 17, &quot;user&quot;, std::move(user_type), true};return MakeSchema(Id(), user_field);},.should_succeed=true}, SelectTestParam{.test_name=&quot;SelectNestedFieldsAtDifferentLevels&quot;,.create_schema=[]() { return MultiLevelSchema();},.select_fields={&quot;user.profile.name&quot;, &quot;user.settings.theme&quot;},.expected_schema=[]() { auto profile_type=MakeStructType(Name());auto profile_field=iceberg::SchemaField{ 23, &quot;profile&quot;, std::move(profile_type), true};auto settings_type=MakeStructType(Theme());auto settings_field=iceberg::SchemaField{ 25, &quot;settings&quot;, std::move(settings_type), true};auto user_type=MakeStructType(profile_field, settings_field);auto user_field=iceberg::SchemaField{ 26, &quot;user&quot;, std::move(user_type), true};return MakeSchema(user_field);},.should_succeed=true}, SelectTestParam{.test_name=&quot;SelectListAndNestedFields&quot;,.create_schema=[]() { return ListSchema();},.select_fields={&quot;id&quot;, &quot;user.name&quot;},.expected_schema=[]() { auto user_type=MakeStructType(Name());auto user_field=iceberg::SchemaField{ 45, &quot;user&quot;, std::move(user_type), true};return MakeSchema(Id(), user_field);},.should_succeed=true}))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>SelectMultiLevelTestCases</type>
        </param>
        <param>
          <type><ref refid="classSelectParamTest" kindref="compound">SelectParamTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name=&quot;SelectTopLevelAndNestedFields&quot;,.create_schema=[]() { return NestedUserSchema();},.select_fields={&quot;id&quot;, &quot;user.name&quot;, &quot;user.address.street&quot;},.expected_schema=[]() { auto address_type=MakeStructType(Street());auto address_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 16, &quot;address&quot;, std::move(address_type), true};auto user_type=MakeStructType(Name(), address_field);auto user_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 17, &quot;user&quot;, std::move(user_type), true};return MakeSchema(Id(), user_field);},.should_succeed=true}, <ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name=&quot;SelectNestedFieldsAtDifferentLevels&quot;,.create_schema=[]() { return MultiLevelSchema();},.select_fields={&quot;user.profile.name&quot;, &quot;user.settings.theme&quot;},.expected_schema=[]() { auto profile_type=MakeStructType(Name());auto profile_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 23, &quot;profile&quot;, std::move(profile_type), true};auto settings_type=MakeStructType(Theme());auto settings_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 25, &quot;settings&quot;, std::move(settings_type), true};auto user_type=MakeStructType(profile_field, settings_field);auto user_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 26, &quot;user&quot;, std::move(user_type), true};return MakeSchema(user_field);},.should_succeed=true}, <ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name=&quot;SelectListAndNestedFields&quot;,.create_schema=[]() { return ListSchema();},.select_fields={&quot;id&quot;, &quot;user.name&quot;},.expected_schema=[]() { auto user_type=MakeStructType(Name());auto user_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 45, &quot;user&quot;, std::move(user_type), true};return MakeSchema(Id(), user_field);},.should_succeed=true})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="696" column="1" declfile="iceberg/test/schema_test.cc" declline="696" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a5fdff11c6e4fe20da6dba85e9487b67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(ProjectParamTest, ProjectFields)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref></type>
        </param>
        <param>
          <type>ProjectFields</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="758" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="758" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1ad5e027a3f9955674305876d040afc22d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(ProjectTestCases, ProjectParamTest, ::testing::Values(ProjectTestParam{.test_name=&quot;ProjectAllFields&quot;,.create_schema=[]() { return BasicSchema();},.selected_ids={1, 2, 3, 4},.expected_schema=[]() { return BasicSchema();},.should_succeed=true}, ProjectTestParam{ .test_name=&quot;ProjectSingleField&quot;,.create_schema=[]() { return BasicSchema();},.selected_ids={2},.expected_schema=[]() { return MakeSchema(Name());},.should_succeed=true}, ProjectTestParam{.test_name=&quot;ProjectNonExistentFieldId&quot;,.create_schema=[]() { return BasicSchema();},.selected_ids={999},.expected_schema=[]() { return MakeSchema();},.should_succeed=true}, ProjectTestParam{.test_name=&quot;ProjectEmptySelection&quot;,.create_schema=[]() { return BasicSchema();},.selected_ids={},.expected_schema=[]() { return MakeSchema();},.should_succeed=true}))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>ProjectTestCases</type>
        </param>
        <param>
          <type><ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name=&quot;ProjectAllFields&quot;,.create_schema=[]() { return BasicSchema();},.selected_ids={1, 2, 3, 4},.expected_schema=[]() { return BasicSchema();},.should_succeed=true}, <ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{ .test_name=&quot;ProjectSingleField&quot;,.create_schema=[]() { return BasicSchema();},.selected_ids={2},.expected_schema=[]() { return MakeSchema(Name());},.should_succeed=true}, <ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name=&quot;ProjectNonExistentFieldId&quot;,.create_schema=[]() { return BasicSchema();},.selected_ids={999},.expected_schema=[]() { return MakeSchema();},.should_succeed=true}, <ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name=&quot;ProjectEmptySelection&quot;,.create_schema=[]() { return BasicSchema();},.selected_ids={},.expected_schema=[]() { return MakeSchema();},.should_succeed=true})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="773" column="1" declfile="iceberg/test/schema_test.cc" declline="773" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1accd8ad4487f0ef2f4b43f987a49f917b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(ProjectNestedTestCases, ProjectParamTest, ::testing::Values(ProjectTestParam{ .test_name=&quot;ProjectNestedStructField&quot;,.create_schema=[]() { return AddressSchema();},.selected_ids={11},.expected_schema=[]() { auto address_type=MakeStructType(Street());auto address_field=iceberg::SchemaField{ 14, &quot;address&quot;, std::move(address_type), true};return MakeSchema(address_field);},.should_succeed=true}))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>ProjectNestedTestCases</type>
        </param>
        <param>
          <type><ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{ .test_name=&quot;ProjectNestedStructField&quot;,.create_schema=[]() { return AddressSchema();},.selected_ids={11},.expected_schema=[]() { auto address_type=MakeStructType(Street());auto address_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 14, &quot;address&quot;, std::move(address_type), true};return MakeSchema(address_field);},.should_succeed=true})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="800" column="1" declfile="iceberg/test/schema_test.cc" declline="800" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a7f1548c4712ac1794f3850c1306f09f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(ProjectMultiLevelTestCases, ProjectParamTest, ::testing::Values(ProjectTestParam{.test_name=&quot;ProjectTopLevelAndNestedFields&quot;,.create_schema=[]() { return NestedUserSchema();},.selected_ids={1, 2, 11},.expected_schema=[]() { auto address_type=MakeStructType(Street());auto address_field=iceberg::SchemaField{ 16, &quot;address&quot;, std::move(address_type), true};auto user_type=MakeStructType(Name(), address_field);auto user_field=iceberg::SchemaField{ 17, &quot;user&quot;, std::move(user_type), true};return MakeSchema(Id(), user_field);},.should_succeed=true}, ProjectTestParam{.test_name=&quot;ProjectNestedFieldsAtDifferentLevels&quot;,.create_schema=[]() { return MultiLevelSchema();},.selected_ids={2, 24},.expected_schema=[]() { auto profile_type=MakeStructType(Name());auto profile_field=iceberg::SchemaField{ 23, &quot;profile&quot;, std::move(profile_type), true};auto settings_type=MakeStructType(Theme());auto settings_field=iceberg::SchemaField{ 25, &quot;settings&quot;, std::move(settings_type), true};auto user_type=MakeStructType(profile_field, settings_field);auto user_field=iceberg::SchemaField{ 26, &quot;user&quot;, std::move(user_type), true};return MakeSchema(user_field);},.should_succeed=true}, ProjectTestParam{.test_name=&quot;ProjectListAndNestedFields&quot;,.create_schema=[]() { return ListSchema();},.selected_ids={1, 2},.expected_schema=[]() { auto user_type=MakeStructType(Name());auto user_field=iceberg::SchemaField{ 45, &quot;user&quot;, std::move(user_type), true};return MakeSchema(Id(), user_field);},.should_succeed=true}))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>ProjectMultiLevelTestCases</type>
        </param>
        <param>
          <type><ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name=&quot;ProjectTopLevelAndNestedFields&quot;,.create_schema=[]() { return NestedUserSchema();},.selected_ids={1, 2, 11},.expected_schema=[]() { auto address_type=MakeStructType(Street());auto address_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 16, &quot;address&quot;, std::move(address_type), true};auto user_type=MakeStructType(Name(), address_field);auto user_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 17, &quot;user&quot;, std::move(user_type), true};return MakeSchema(Id(), user_field);},.should_succeed=true}, <ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name=&quot;ProjectNestedFieldsAtDifferentLevels&quot;,.create_schema=[]() { return MultiLevelSchema();},.selected_ids={2, 24},.expected_schema=[]() { auto profile_type=MakeStructType(Name());auto profile_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 23, &quot;profile&quot;, std::move(profile_type), true};auto settings_type=MakeStructType(Theme());auto settings_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 25, &quot;settings&quot;, std::move(settings_type), true};auto user_type=MakeStructType(profile_field, settings_field);auto user_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 26, &quot;user&quot;, std::move(user_type), true};return MakeSchema(user_field);},.should_succeed=true}, <ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name=&quot;ProjectListAndNestedFields&quot;,.create_schema=[]() { return ListSchema();},.selected_ids={1, 2},.expected_schema=[]() { auto user_type=MakeStructType(Name());auto user_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 45, &quot;user&quot;, std::move(user_type), true};return MakeSchema(Id(), user_field);},.should_succeed=true})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="814" column="1" declfile="iceberg/test/schema_test.cc" declline="814" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a5cf66426c87d1cbb230b895b513f6262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(ProjectMapErrorTestCases, ProjectParamTest, ::testing::Values(ProjectTestParam{ .test_name=&quot;ProjectMapWithOnlyKey&quot;,.create_schema=[]() { return MapSchema();},.selected_ids={31},.expected_schema=[]() { return nullptr;},.should_succeed=false,.expected_error_message=&quot;Cannot project Map without value field&quot;}))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>ProjectMapErrorTestCases</type>
        </param>
        <param>
          <type><ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{ .test_name=&quot;ProjectMapWithOnlyKey&quot;,.create_schema=[]() { return MapSchema();},.selected_ids={31},.expected_schema=[]() { return nullptr;},.should_succeed=false,.expected_error_message=&quot;Cannot project Map without value field&quot;})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="865" column="1" declfile="iceberg/test/schema_test.cc" declline="865" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a2559c5903d56b2e20915908f2a6bdce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(ProjectListAndMapTestCases, ProjectParamTest, ::testing::Values(ProjectTestParam{.test_name=&quot;ProjectListElement&quot;,.create_schema=[]() { return ListWithStructElementSchema();},.selected_ids={2},.expected_schema=[]() { auto struct_type=MakeStructType(Name());auto element_field=iceberg::SchemaField{ 53, &quot;element&quot;, std::move(struct_type), false};auto list_type=std::make_shared&lt; iceberg::ListType &gt;(element_field);auto list_field=iceberg::SchemaField{ 54, &quot;list_field&quot;, std::move(list_type), true};return MakeSchema(list_field);},.should_succeed=true}, ProjectTestParam{.test_name=&quot;ProjectListOfMap&quot;,.create_schema=[]() { return ListOfMapSchema();},.selected_ids={2, 3},.expected_schema=[]() { auto map_value_struct=MakeStructType(Name(), Age());auto map_value_field=iceberg::SchemaField{ 64, &quot;value&quot;, std::move(map_value_struct), false};auto map_type=std::make_shared&lt; iceberg::MapType &gt;(Key(), map_value_field);auto list_element=iceberg::SchemaField{ 65, &quot;element&quot;, std::move(map_type), false};auto list_type=std::make_shared&lt; iceberg::ListType &gt;(list_element);auto list_field=iceberg::SchemaField{ 66, &quot;list_field&quot;, std::move(list_type), true};return MakeSchema(list_field);},.should_succeed=true}, ProjectTestParam{ .test_name=&quot;ProjectMapKeyAndValue&quot;,.create_schema=[]() { return ComplexMapSchema();},.selected_ids={71, 74},.expected_schema=[]() { auto key_id_field=iceberg::SchemaField{71, &quot;id&quot;, iceberg::int32(), false};auto key_struct=MakeStructType(key_id_field);auto key_field=iceberg::SchemaField{73, &quot;key&quot;, std::move(key_struct), false};auto value_id_field=iceberg::SchemaField{74, &quot;id&quot;, iceberg::int32(), false};auto value_struct=MakeStructType(value_id_field);auto value_field=iceberg::SchemaField{76, &quot;value&quot;, std::move(value_struct), false};auto map_type=std::make_shared&lt; iceberg::MapType &gt;(key_field, value_field);auto map_field=iceberg::SchemaField{77, &quot;map_field&quot;, std::move(map_type), true};return MakeSchema(map_field);},.should_succeed=true}, ProjectTestParam{.test_name=&quot;ProjectEmptyResult&quot;,.create_schema=[]() { return BasicSchema();},.selected_ids={999},.expected_schema=[]() { return MakeSchema();},.should_succeed=true}))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <param>
          <type>ProjectListAndMapTestCases</type>
        </param>
        <param>
          <type><ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name=&quot;ProjectListElement&quot;,.create_schema=[]() { return ListWithStructElementSchema();},.selected_ids={2},.expected_schema=[]() { auto struct_type=MakeStructType(Name());auto element_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 53, &quot;element&quot;, std::move(struct_type), false};auto list_type=std::make_shared&lt; <ref refid="classiceberg_1_1ListType" kindref="compound">iceberg::ListType</ref> &gt;(element_field);auto list_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 54, &quot;list_field&quot;, std::move(list_type), true};return MakeSchema(list_field);},.should_succeed=true}, <ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name=&quot;ProjectListOfMap&quot;,.create_schema=[]() { return ListOfMapSchema();},.selected_ids={2, 3},.expected_schema=[]() { auto map_value_struct=MakeStructType(Name(), Age());auto map_value_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 64, &quot;value&quot;, std::move(map_value_struct), false};auto map_type=std::make_shared&lt; <ref refid="classiceberg_1_1MapType" kindref="compound">iceberg::MapType</ref> &gt;(Key(), map_value_field);auto list_element=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 65, &quot;element&quot;, std::move(map_type), false};auto list_type=std::make_shared&lt; <ref refid="classiceberg_1_1ListType" kindref="compound">iceberg::ListType</ref> &gt;(list_element);auto list_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{ 66, &quot;list_field&quot;, std::move(list_type), true};return MakeSchema(list_field);},.should_succeed=true}, <ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{ .test_name=&quot;ProjectMapKeyAndValue&quot;,.create_schema=[]() { return ComplexMapSchema();},.selected_ids={71, 74},.expected_schema=[]() { auto key_id_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{71, &quot;id&quot;, <ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(), false};auto key_struct=MakeStructType(key_id_field);auto key_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{73, &quot;key&quot;, std::move(key_struct), false};auto value_id_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{74, &quot;id&quot;, <ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(), false};auto value_struct=MakeStructType(value_id_field);auto value_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{76, &quot;value&quot;, std::move(value_struct), false};auto map_type=std::make_shared&lt; <ref refid="classiceberg_1_1MapType" kindref="compound">iceberg::MapType</ref> &gt;(key_field, value_field);auto map_field=<ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{77, &quot;map_field&quot;, std::move(map_type), true};return MakeSchema(map_field);},.should_succeed=true}, <ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name=&quot;ProjectEmptyResult&quot;,.create_schema=[]() { return BasicSchema();},.selected_ids={999},.expected_schema=[]() { return MakeSchema();},.should_succeed=true})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="875" column="1" declfile="iceberg/test/schema_test.cc" declline="875" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1a87cbfb67fea3058b43cfb7ec896da030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SchemaThreadSafetyTest, ConcurrentFindFieldById)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classSchemaThreadSafetyTest" kindref="compound">SchemaThreadSafetyTest</ref></type>
        </param>
        <param>
          <type>ConcurrentFindFieldById</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="962" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="962" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="schema__test_8cc_1ac5368d774c0047b69d16d5b0d0e594c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SchemaThreadSafetyTest, MixedConcurrentOperations)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classSchemaThreadSafetyTest" kindref="compound">SchemaThreadSafetyTest</ref></type>
        </param>
        <param>
          <type>MixedConcurrentOperations</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_test.cc" line="981" column="1" bodyfile="iceberg/test/schema_test.cc" bodystart="981" bodyend="1011"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="schema_8h" kindref="compound">iceberg/schema.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gmock/gmock.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/result.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="schema__field_8h" kindref="compound">iceberg/schema_field.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/test/matchers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="formatter_8h" kindref="compound">iceberg/util/formatter.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>keep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">std::shared_ptr&lt;iceberg::StructType&gt;<sp/>MakeStructType(Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;iceberg::StructType&gt;(</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{std::move(args)...});</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">std::unique_ptr&lt;iceberg::Schema&gt;<sp/>MakeSchema(Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;iceberg::Schema&gt;(</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{std::move(args)...},<sp/>std::nullopt);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">TEST(SchemaTest,<sp/>Basics)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>field1(5,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>field2(7,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1Schema" kindref="compound">iceberg::Schema</ref><sp/>schema({field1,<sp/>field2},<sp/>100);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(schema,<sp/>schema);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(100,<sp/>schema.schema_id());</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::span&lt;const<sp/>iceberg::SchemaField&gt;<sp/>fields<sp/>=<sp/>schema.fields();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(2,<sp/>fields.size());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(field1,<sp/>fields[0]);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(field2,<sp/>fields[1]);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(schema.GetFieldById(5),<sp/>::testing::Optional(field1));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(schema.GetFieldById(7),<sp/>::testing::Optional(field2));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(schema.GetFieldByIndex(0),<sp/>::testing::Optional(field1));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(schema.GetFieldByIndex(1),<sp/>::testing::Optional(field2));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(schema.GetFieldByName(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(field1));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(schema.GetFieldByName(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(field2));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(std::nullopt,<sp/>schema.GetFieldById(0));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>schema.GetFieldByIndex(2);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsError(iceberg::ErrorKind::kInvalidArgument));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iceberg::HasErrorMessage(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>index<sp/>2<sp/>to<sp/>get<sp/>field<sp/>from<sp/>struct&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>schema.GetFieldByIndex(-1);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsError(iceberg::ErrorKind::kInvalidArgument));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iceberg::HasErrorMessage(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>index<sp/>-1<sp/>to<sp/>get<sp/>field<sp/>from<sp/>struct&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(std::nullopt,<sp/>schema.GetFieldByName(</highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">TEST(SchemaTest,<sp/>Equality)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>field1(5,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>field2(7,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>field3(5,<sp/></highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="classiceberg_1_1Schema" kindref="compound">iceberg::Schema</ref><sp/>schema1({field1,<sp/>field2},<sp/>100);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="classiceberg_1_1Schema" kindref="compound">iceberg::Schema</ref><sp/>schema2({field1,<sp/>field2},<sp/>101);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="classiceberg_1_1Schema" kindref="compound">iceberg::Schema</ref><sp/>schema3({field1},<sp/>101);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="classiceberg_1_1Schema" kindref="compound">iceberg::Schema</ref><sp/>schema4({field3,<sp/>field2},<sp/>101);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="classiceberg_1_1Schema" kindref="compound">iceberg::Schema</ref><sp/>schema5({field1,<sp/>field2},<sp/>100);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>ASSERT_EQ(schema1,<sp/>schema1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>ASSERT_NE(schema1,<sp/>schema2);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>ASSERT_NE(schema2,<sp/>schema1);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>ASSERT_NE(schema1,<sp/>schema3);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>ASSERT_NE(schema3,<sp/>schema1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>ASSERT_NE(schema1,<sp/>schema4);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>ASSERT_NE(schema4,<sp/>schema1);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>ASSERT_EQ(schema1,<sp/>schema5);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>ASSERT_EQ(schema5,<sp/>schema1);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classBasicShortNameTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classBasicShortNameTest" kindref="compound">BasicShortNameTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>field1_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(1,<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>field2_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(2,<sp/></highlight><highlight class="stringliteral">&quot;Bar&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>field3_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(3,<sp/></highlight><highlight class="stringliteral">&quot;Foobar&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>structtype<sp/>=<sp/>std::make_shared&lt;iceberg::StructType&gt;(</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{*field1_,<sp/>*field2_,<sp/>*field3_});</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>field4_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(4,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,<sp/>structtype,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>listype<sp/>=<sp/>std::make_shared&lt;iceberg::ListType&gt;(*field4_);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>field5_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(5,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>field6_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(6,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>listype,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maptype<sp/>=<sp/>std::make_shared&lt;iceberg::MapType&gt;(*field5_,<sp/>*field6_);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>field7_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(7,<sp/></highlight><highlight class="stringliteral">&quot;Value&quot;</highlight><highlight class="normal">,<sp/>maptype,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>schema_<sp/>=</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::Schema&gt;(std::vector&lt;iceberg::SchemaField&gt;{*field7_},<sp/>1);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>schema_;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field1_;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field2_;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field3_;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field4_;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field5_;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field6_;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field7_;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">TEST_F(<ref refid="classBasicShortNameTest" kindref="compound">BasicShortNameTest</ref>,<sp/>TestFindById)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(7),<sp/>::testing::Optional(*field7_));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(6),<sp/>::testing::Optional(*field6_));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(5),<sp/>::testing::Optional(*field5_));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(4),<sp/>::testing::Optional(*field4_));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(3),<sp/>::testing::Optional(*field3_));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(2),<sp/>::testing::Optional(*field2_));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(1),<sp/>::testing::Optional(*field1_));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(10),<sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">TEST_F(<ref refid="classBasicShortNameTest" kindref="compound">BasicShortNameTest</ref>,<sp/>TestFindByName)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Value&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(*field7_));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Value.value&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(*field6_));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Value.key&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(*field5_));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Value.value.element&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field4_));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Value.value.element.Foobar&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field3_));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Value.value.element.Bar&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field2_));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Value.value.element.Foo&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field1_));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Value.value.element.FoO&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">TEST_F(<ref refid="classBasicShortNameTest" kindref="compound">BasicShortNameTest</ref>,<sp/>TestFindByNameCaseInsensitive)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;vALue&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>::testing::Optional(*field7_));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;vALue.VALUE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field6_));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;valUe.kEy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field5_));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;vaLue.vAlue.elEment&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field4_));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;vaLue.vAlue.eLement.fOObar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field3_));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;valUe.vaLUe.elemEnt.Bar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field2_));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;valUe.valUe.ELEMENT.FOO&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field1_));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;valUe.valUe.ELEMENT.FO&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">TEST_F(<ref refid="classBasicShortNameTest" kindref="compound">BasicShortNameTest</ref>,<sp/>TestFindByShortNameCaseInsensitive)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;vaLue.value.FOO&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field1_));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Value.value.Bar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field2_));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Value.value.FooBAR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field3_));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Value.value.FooBAR.a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="classComplexShortNameTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classComplexShortNameTest" kindref="compound">ComplexShortNameTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>field1_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(1,<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>field2_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(2,<sp/></highlight><highlight class="stringliteral">&quot;Bar&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>field3_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(3,<sp/></highlight><highlight class="stringliteral">&quot;Foobar&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>structtype<sp/>=<sp/>std::make_shared&lt;iceberg::StructType&gt;(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{*field1_,<sp/>*field2_,<sp/>*field3_});</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>field4_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(4,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,<sp/>structtype,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>listype<sp/>=<sp/>std::make_shared&lt;iceberg::ListType&gt;(*field4_);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>field5_<sp/>=</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(5,<sp/></highlight><highlight class="stringliteral">&quot;First_child&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>field6_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(6,<sp/></highlight><highlight class="stringliteral">&quot;Second_child&quot;</highlight><highlight class="normal">,<sp/>listype,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>structtype2<sp/>=<sp/>std::make_shared&lt;iceberg::StructType&gt;(</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{*field5_,<sp/>*field6_});</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>field7_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(7,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>field8_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(8,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>structtype2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maptype<sp/>=<sp/>std::make_shared&lt;iceberg::MapType&gt;(*field7_,<sp/>*field8_);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>field9_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(9,<sp/></highlight><highlight class="stringliteral">&quot;Map&quot;</highlight><highlight class="normal">,<sp/>maptype,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>schema_<sp/>=</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::Schema&gt;(std::vector&lt;iceberg::SchemaField&gt;{*field9_},<sp/>1);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>schema_;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field1_;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field2_;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field3_;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field4_;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field5_;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field6_;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field7_;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field8_;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field9_;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">};</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">TEST_F(<ref refid="classComplexShortNameTest" kindref="compound">ComplexShortNameTest</ref>,<sp/>TestFindById)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(9),<sp/>::testing::Optional(*field9_));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(8),<sp/>::testing::Optional(*field8_));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(7),<sp/>::testing::Optional(*field7_));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(6),<sp/>::testing::Optional(*field6_));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(5),<sp/>::testing::Optional(*field5_));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(4),<sp/>::testing::Optional(*field4_));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(3),<sp/>::testing::Optional(*field3_));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(2),<sp/>::testing::Optional(*field2_));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(1),<sp/>::testing::Optional(*field1_));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(0),<sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">TEST_F(<ref refid="classComplexShortNameTest" kindref="compound">ComplexShortNameTest</ref>,<sp/>TestFindByName)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(*field9_));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.value&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(*field8_));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.key&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(*field7_));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.value.Second_child&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field6_));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.value.First_child&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field5_));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.value.Second_child.element&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field4_));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.value.Second_child.element.Foobar&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field3_));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.value.Second_child.element.Bar&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field2_));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.value.Second_child.element.Foo&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field1_));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.value.Second_child.element.Fooo&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">TEST_F(<ref refid="classComplexShortNameTest" kindref="compound">ComplexShortNameTest</ref>,<sp/>TestFindByNameCaseInsensitive)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>::testing::Optional(*field9_));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.vALUE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field8_));</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.Key&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>::testing::Optional(*field7_));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.Value.second_Child&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field6_));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.Value.first_chIld&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field5_));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.Value.second_child.Element&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field4_));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.Value.second_child.Element.foobar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field3_));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.VaLue.second_child.Element.bar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field2_));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.value.Second_child.Element.foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field1_));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.value.Second_child.Element.fooo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">TEST_F(<ref refid="classComplexShortNameTest" kindref="compound">ComplexShortNameTest</ref>,<sp/>TestFindByShortName)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.Second_child&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field6_));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.First_child&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(*field5_));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.Second_child.Foobar&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field3_));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.Second_child.Bar&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field2_));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.Second_child.Foo&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field1_));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.Second_child.aaa&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">TEST_F(<ref refid="classComplexShortNameTest" kindref="compound">ComplexShortNameTest</ref>,<sp/>TestFindByShortNameCaseInsensitive)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.second_child&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field6_));</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.first_child&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field5_));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.second_child.foobar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field3_));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.second_child.bar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field2_));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;map.second_child.foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field1_));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;Map.Second_child.aaa&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="classComplexMapStructShortNameTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classComplexMapStructShortNameTest" kindref="compound">ComplexMapStructShortNameTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_inner_key_key_<sp/>=</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(10,<sp/></highlight><highlight class="stringliteral">&quot;inner_key&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_inner_key_value_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11,<sp/></highlight><highlight class="stringliteral">&quot;inner_value&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inner_struct_type_key_<sp/>=<sp/>std::make_shared&lt;iceberg::StructType&gt;(</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{*exp_inner_key_key_,<sp/>*exp_inner_key_value_});</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_inner_value_k_<sp/>=</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(12,<sp/></highlight><highlight class="stringliteral">&quot;inner_k&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_inner_value_v_<sp/>=</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(13,<sp/></highlight><highlight class="stringliteral">&quot;inner_v&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inner_struct_type_value_<sp/>=<sp/>std::make_shared&lt;iceberg::StructType&gt;(</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{*exp_inner_value_k_,<sp/>*exp_inner_value_v_});</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_key_struct_key_<sp/>=</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(14,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_key_struct_value_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>inner_struct_type_key_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key_struct_type_<sp/>=<sp/>std::make_shared&lt;iceberg::StructType&gt;(</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{*exp_key_struct_key_,<sp/>*exp_key_struct_value_});</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_value_struct_key_<sp/>=</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(16,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_value_struct_value_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>17,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>inner_struct_type_value_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_struct_type_<sp/>=</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;iceberg::StructType&gt;(std::vector&lt;iceberg::SchemaField&gt;{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*exp_value_struct_key_,<sp/>*exp_value_struct_value_});</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_map_key_<sp/>=</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(18,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>key_struct_type_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_map_value_<sp/>=</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(19,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>value_struct_type_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_type_<sp/>=<sp/>std::make_shared&lt;iceberg::MapType&gt;(*exp_map_key_,<sp/>*exp_map_value_);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_field_a_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(20,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>map_type_,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>schema_<sp/>=<sp/>std::make_unique&lt;iceberg::Schema&gt;(</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{*exp_field_a_},<sp/>1);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>schema_;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>exp_inner_key_key_;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>exp_inner_key_value_;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>exp_inner_value_k_;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>exp_inner_value_v_;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>exp_key_struct_key_;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>exp_key_struct_value_;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>exp_value_struct_key_;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>exp_value_struct_value_;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>exp_map_key_;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>exp_map_value_;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>exp_field_a_;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">};</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">TEST_F(<ref refid="classComplexMapStructShortNameTest" kindref="compound">ComplexMapStructShortNameTest</ref>,<sp/>TestFindById)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(20),<sp/>::testing::Optional(*exp_field_a_));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(19),<sp/>::testing::Optional(*exp_map_value_));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(18),<sp/>::testing::Optional(*exp_map_key_));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(17),<sp/>::testing::Optional(*exp_value_struct_value_));</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(16),<sp/>::testing::Optional(*exp_value_struct_key_));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(15),<sp/>::testing::Optional(*exp_key_struct_value_));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(14),<sp/>::testing::Optional(*exp_key_struct_key_));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(13),<sp/>::testing::Optional(*exp_inner_value_v_));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(12),<sp/>::testing::Optional(*exp_inner_value_k_));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(11),<sp/>::testing::Optional(*exp_inner_key_value_));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(10),<sp/>::testing::Optional(*exp_inner_key_key_));</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">TEST_F(<ref refid="classComplexMapStructShortNameTest" kindref="compound">ComplexMapStructShortNameTest</ref>,<sp/>TestFindByName)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(*exp_field_a_));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.key&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(*exp_map_key_));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.value&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(*exp_map_value_));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.key.key&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_key_struct_key_));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.key.value&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_key_struct_value_));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.key.value.inner_key&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_inner_key_key_));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.key.value.inner_value&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_inner_key_value_));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.value.key&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_value_struct_key_));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.value.value&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_value_struct_value_));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.value.value.inner_k&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_inner_value_k_));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.value.value.inner_v&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_inner_value_v_));</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">TEST_F(<ref refid="classComplexMapStructShortNameTest" kindref="compound">ComplexMapStructShortNameTest</ref>,<sp/>TestFindByNameCaseInsensitive)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>::testing::Optional(*exp_field_a_));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A.KEY&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_map_key_));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A.VALUE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_map_value_));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A.KEY.KEY&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_key_struct_key_));</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A.KEY.VALUE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_key_struct_value_));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A.KEY.VALUE.INNER_KEY&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_inner_key_key_));</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A.KEY.VALUE.INNER_VALUE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_inner_key_value_));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A.VALUE.KEY&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_value_struct_key_));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A.VALUE.VALUE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_value_struct_value_));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A.VALUE.VALUE.INNER_K&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_inner_value_k_));</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A.VALUE.VALUE.INNER_V&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*exp_inner_value_v_));</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">TEST_F(<ref refid="classComplexMapStructShortNameTest" kindref="compound">ComplexMapStructShortNameTest</ref>,<sp/>TestInvalidPaths)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.invalid&quot;</highlight><highlight class="normal">),<sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.key.invalid&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.value.invalid&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A.KEY.VALUE.INVALID&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">TEST(SchemaTest,<sp/>DuplicatePathErrorCaseSensitive)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nested_b<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(2,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nested_struct<sp/>=</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;iceberg::StructType&gt;(std::vector&lt;iceberg::SchemaField&gt;{*nested_b});</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(1,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>nested_struct,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>duplicate_ab<sp/>=</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(3,<sp/></highlight><highlight class="stringliteral">&quot;a.b&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>schema<sp/>=<sp/>std::make_unique&lt;iceberg::Schema&gt;(</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{*a,<sp/>*duplicate_ab},<sp/>1);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>schema-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;a.b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(result.has_value());</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>EXPECT_EQ(result.error().kind,<sp/>iceberg::ErrorKind::kInvalidSchema);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>EXPECT_THAT(result.error().message,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::HasSubstr(</highlight><highlight class="stringliteral">&quot;Duplicate<sp/>path<sp/>found:<sp/>a.b,<sp/>prev<sp/>id:<sp/>2,<sp/>curr<sp/>id:<sp/>3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal">TEST(SchemaTest,<sp/>DuplicatePathErrorCaseInsensitive)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nested_b<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(2,<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nested_struct<sp/>=</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;iceberg::StructType&gt;(std::vector&lt;iceberg::SchemaField&gt;{*nested_b});</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(1,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>nested_struct,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>duplicate_ab<sp/>=</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(3,<sp/></highlight><highlight class="stringliteral">&quot;a.b&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>schema<sp/>=<sp/>std::make_unique&lt;iceberg::Schema&gt;(</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{*a,<sp/>*duplicate_ab},<sp/>1);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>schema-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;A.B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(result.has_value());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>EXPECT_EQ(result.error().kind,<sp/>iceberg::ErrorKind::kInvalidSchema);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>EXPECT_THAT(result.error().message,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::HasSubstr(</highlight><highlight class="stringliteral">&quot;Duplicate<sp/>path<sp/>found:<sp/>a.b,<sp/>prev<sp/>id:<sp/>2,<sp/>curr<sp/>id:<sp/>3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">TEST(SchemaTest,<sp/>NestedDuplicateFieldIdError)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Outer<sp/>struct<sp/>with<sp/>field<sp/>ID<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outer_field<sp/>=</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(1,<sp/></highlight><highlight class="stringliteral">&quot;outer&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Inner<sp/>struct<sp/>with<sp/>duplicate<sp/>field<sp/>ID<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inner_field<sp/>=</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(1,<sp/></highlight><highlight class="stringliteral">&quot;inner&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inner_struct<sp/>=<sp/>std::make_shared&lt;iceberg::StructType&gt;(</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{*inner_field});</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Nested<sp/>field<sp/>with<sp/>inner<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nested_field<sp/>=</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;iceberg::SchemaField&gt;(2,<sp/></highlight><highlight class="stringliteral">&quot;nested&quot;</highlight><highlight class="normal">,<sp/>inner_struct,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Schema<sp/>with<sp/>outer<sp/>and<sp/>nested<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>schema<sp/>=<sp/>std::make_unique&lt;iceberg::Schema&gt;(</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{*outer_field,<sp/>*nested_field},<sp/>1);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempt<sp/>to<sp/>find<sp/>a<sp/>field,<sp/>which<sp/>should<sp/>trigger<sp/>duplicate<sp/>ID<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>schema-&gt;FindFieldById(1);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(result.has_value());</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>EXPECT_EQ(result.error().kind,<sp/>iceberg::ErrorKind::kInvalidSchema);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>EXPECT_THAT(result.error().message,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::HasSubstr(</highlight><highlight class="stringliteral">&quot;Duplicate<sp/>field<sp/>id<sp/>found:<sp/>1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>Id()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>Name()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{2,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>Age()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{3,<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>Email()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{4,<sp/></highlight><highlight class="stringliteral">&quot;email&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>Street()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{11,<sp/></highlight><highlight class="stringliteral">&quot;street&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>City()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{12,<sp/></highlight><highlight class="stringliteral">&quot;city&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>Zip()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{13,<sp/></highlight><highlight class="stringliteral">&quot;zip&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>Theme()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{24,<sp/></highlight><highlight class="stringliteral">&quot;theme&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>Key()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{31,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>Value()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{32,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref><sp/>Element()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{41,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>BasicSchema()<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Id(),<sp/>Name(),<sp/>Age(),<sp/>Email());</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>AddressSchema()<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_type<sp/>=<sp/>MakeStructType(Street(),<sp/>City(),<sp/>Zip());</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{14,<sp/></highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">,<sp/>std::move(address_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Id(),<sp/>Name(),<sp/>std::move(address_field));</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>NestedUserSchema()<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_type<sp/>=<sp/>MakeStructType(Street(),<sp/>City());</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{16,<sp/></highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">,<sp/>std::move(address_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_type<sp/>=<sp/>MakeStructType(Name(),<sp/>address_field);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{17,<sp/></highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">,<sp/>std::move(user_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Id(),<sp/>user_field);</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>MultiLevelSchema()<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>profile_type<sp/>=<sp/>MakeStructType(Name(),<sp/>Age());</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>profile_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{23,<sp/></highlight><highlight class="stringliteral">&quot;profile&quot;</highlight><highlight class="normal">,<sp/>std::move(profile_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>settings_type<sp/>=<sp/>MakeStructType(Theme());</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>settings_field<sp/>=</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{25,<sp/></highlight><highlight class="stringliteral">&quot;settings&quot;</highlight><highlight class="normal">,<sp/>std::move(settings_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_type<sp/>=<sp/>MakeStructType(profile_field,<sp/>settings_field);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{26,<sp/></highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">,<sp/>std::move(user_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Id(),<sp/>user_field);</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>ListSchema()<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_type<sp/>=<sp/>std::make_shared&lt;iceberg::ListType&gt;(Element());</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tags_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{42,<sp/></highlight><highlight class="stringliteral">&quot;tags&quot;</highlight><highlight class="normal">,<sp/>std::move(list_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_type<sp/>=<sp/>MakeStructType(Name(),<sp/>Age());</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{45,<sp/></highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">,<sp/>std::move(user_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Id(),<sp/>tags_field,<sp/>user_field);</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>MapSchema()<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_type<sp/>=<sp/>std::make_shared&lt;iceberg::MapType&gt;(Key(),<sp/>Value());</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{33,<sp/></highlight><highlight class="stringliteral">&quot;map_field&quot;</highlight><highlight class="normal">,<sp/>std::move(map_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(map_field);</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>ListWithStructElementSchema()<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>struct_type<sp/>=<sp/>MakeStructType(Name(),<sp/>Age());</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{53,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,<sp/>std::move(struct_type),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_type<sp/>=<sp/>std::make_shared&lt;iceberg::ListType&gt;(element_field);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{54,<sp/></highlight><highlight class="stringliteral">&quot;list_field&quot;</highlight><highlight class="normal">,<sp/>std::move(list_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(list_field);</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>ListOfMapSchema()<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_value_struct<sp/>=<sp/>MakeStructType(Name(),<sp/>Age());</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_value_field<sp/>=</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{64,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>std::move(map_value_struct),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_type<sp/>=<sp/>std::make_shared&lt;iceberg::MapType&gt;(Key(),<sp/>map_value_field);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_element<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{65,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,<sp/>std::move(map_type),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_type<sp/>=<sp/>std::make_shared&lt;iceberg::ListType&gt;(list_element);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{66,<sp/></highlight><highlight class="stringliteral">&quot;list_field&quot;</highlight><highlight class="normal">,<sp/>std::move(list_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(list_field);</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>ComplexMapSchema()<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key_id_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{71,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key_name_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{72,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key_struct<sp/>=<sp/>MakeStructType(key_id_field,<sp/>key_name_field);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{73,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>std::move(key_struct),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_id_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{74,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_name_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{75,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_struct<sp/>=<sp/>MakeStructType(value_id_field,<sp/>value_name_field);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{76,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>std::move(value_struct),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_type<sp/>=<sp/>std::make_shared&lt;iceberg::MapType&gt;(key_field,<sp/>value_field);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{77,<sp/></highlight><highlight class="stringliteral">&quot;map_field&quot;</highlight><highlight class="normal">,<sp/>std::move(map_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(map_field);</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606" refid="structSelectTestParam" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>std::string<sp/>test_name;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>std::function&lt;std::unique_ptr&lt;iceberg::Schema&gt;()&gt;<sp/>create_schema;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>select_fields;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>std::function&lt;std::unique_ptr&lt;iceberg::Schema&gt;()&gt;<sp/>expected_schema;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_succeed;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>std::string<sp/>expected_error_message;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>case_sensitive<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614"><highlight class="normal">};</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616" refid="classSelectParamTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSelectParamTest" kindref="compound">SelectParamTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::TestWithParam&lt;SelectTestParam&gt;<sp/>{};</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">TEST_P(<ref refid="classSelectParamTest" kindref="compound">SelectParamTest</ref>,<sp/>SelectFields)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>GetParam();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>input_schema<sp/>=<sp/>param.create_schema();</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>input_schema-&gt;Select(param.select_fields,<sp/>param.case_sensitive);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.should_succeed)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(result.has_value());</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(*result.value(),<sp/>*param.expected_schema());</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(result.has_value());</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>iceberg::IsError(iceberg::ErrorKind::kInvalidArgument));</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>iceberg::HasErrorMessage(param.expected_error_message));</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>SelectTestCases,<sp/><ref refid="classSelectParamTest" kindref="compound">SelectParamTest</ref>,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::Values(</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SelectAllColumns&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.select_fields<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SelectSingleField&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.select_fields<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Name());<sp/>},</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SelectMultipleFields&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.select_fields<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Id(),<sp/>Name(),<sp/>Age());<sp/>},</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SelectNonExistentField&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.select_fields<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;nonexistent&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema();<sp/>},</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SelectCaseSensitive&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.select_fields<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Name&quot;</highlight><highlight class="normal">},<sp/><sp/></highlight><highlight class="comment">//<sp/>case-sensitive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema();<sp/>},</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SelectCaseInsensitive&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.select_fields<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Name&quot;</highlight><highlight class="normal">},<sp/><sp/></highlight><highlight class="comment">//<sp/>case-insensitive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Name());<sp/>},</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.case_sensitive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>SelectNestedTestCases,<sp/><ref refid="classSelectParamTest" kindref="compound">SelectParamTest</ref>,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::Values(<ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SelectTopLevelFields&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AddressSchema();<sp/>},</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.select_fields<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Id(),<sp/>Name());<sp/>},</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SelectNestedField&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AddressSchema();<sp/>},</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.select_fields<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;address.street&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_type<sp/>=<sp/>MakeStructType(Street());</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14,<sp/></highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">,<sp/>std::move(address_type),</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(address_field);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>SelectMultiLevelTestCases,<sp/><ref refid="classSelectParamTest" kindref="compound">SelectParamTest</ref>,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::Values(</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SelectTopLevelAndNestedFields&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NestedUserSchema();<sp/>},</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.select_fields<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;user.name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;user.address.street&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_type<sp/>=<sp/>MakeStructType(Street());</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16,<sp/></highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">,<sp/>std::move(address_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_type<sp/>=<sp/>MakeStructType(Name(),<sp/>address_field);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>17,<sp/></highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">,<sp/>std::move(user_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Id(),<sp/>user_field);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SelectNestedFieldsAtDifferentLevels&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MultiLevelSchema();<sp/>},</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.select_fields<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;user.profile.name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;user.settings.theme&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>profile_type<sp/>=<sp/>MakeStructType(Name());</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>profile_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23,<sp/></highlight><highlight class="stringliteral">&quot;profile&quot;</highlight><highlight class="normal">,<sp/>std::move(profile_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>settings_type<sp/>=<sp/>MakeStructType(Theme());</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>settings_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>25,<sp/></highlight><highlight class="stringliteral">&quot;settings&quot;</highlight><highlight class="normal">,<sp/>std::move(settings_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_type<sp/>=</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MakeStructType(profile_field,<sp/>settings_field);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>26,<sp/></highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">,<sp/>std::move(user_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(user_field);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSelectTestParam" kindref="compound">SelectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SelectListAndNestedFields&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ListSchema();<sp/>},</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.select_fields<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;user.name&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_type<sp/>=<sp/>MakeStructType(Name());</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>45,<sp/></highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">,<sp/>std::move(user_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Id(),<sp/>user_field);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747" refid="structProjectTestParam" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>std::string<sp/>test_name;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>std::function&lt;std::unique_ptr&lt;iceberg::Schema&gt;()&gt;<sp/>create_schema;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>std::unordered_set&lt;int32_t&gt;<sp/>selected_ids;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>std::function&lt;std::unique_ptr&lt;iceberg::Schema&gt;()&gt;<sp/>expected_schema;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_succeed;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>std::string<sp/>expected_error_message;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">};</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="classProjectParamTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::TestWithParam&lt;ProjectTestParam&gt;<sp/>{};</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal">TEST_P(<ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref>,<sp/>ProjectFields)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>GetParam();</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>input_schema<sp/>=<sp/>param.create_schema();</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>input_schema-&gt;Project(param.selected_ids);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.should_succeed)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(result.has_value());</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(*result.value(),<sp/>*param.expected_schema());</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(result.has_value());</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>iceberg::IsError(iceberg::ErrorKind::kInvalidArgument));</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>iceberg::HasErrorMessage(param.expected_error_message));</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>ProjectTestCases,<sp/><ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref>,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::Values(<ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectAllFields&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4},</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectSingleField&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{2},</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Name());<sp/>},</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectNonExistentFieldId&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{999},</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema();<sp/>},</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectEmptySelection&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema();<sp/>},</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(ProjectNestedTestCases,<sp/><ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref>,</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Values(<ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectNestedStructField&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AddressSchema();<sp/>},</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{11},</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_type<sp/>=<sp/>MakeStructType(Street());</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14,<sp/></highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">,<sp/>std::move(address_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(address_field);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>ProjectMultiLevelTestCases,<sp/><ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref>,</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::Values(</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectTopLevelAndNestedFields&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NestedUserSchema();<sp/>},</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{1,<sp/>2,<sp/>11},</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_type<sp/>=<sp/>MakeStructType(Street());</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16,<sp/></highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">,<sp/>std::move(address_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_type<sp/>=<sp/>MakeStructType(Name(),<sp/>address_field);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>17,<sp/></highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">,<sp/>std::move(user_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Id(),<sp/>user_field);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectNestedFieldsAtDifferentLevels&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MultiLevelSchema();<sp/>},</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{2,<sp/>24},</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>profile_type<sp/>=<sp/>MakeStructType(Name());</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>profile_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23,<sp/></highlight><highlight class="stringliteral">&quot;profile&quot;</highlight><highlight class="normal">,<sp/>std::move(profile_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>settings_type<sp/>=<sp/>MakeStructType(Theme());</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>settings_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>25,<sp/></highlight><highlight class="stringliteral">&quot;settings&quot;</highlight><highlight class="normal">,<sp/>std::move(settings_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_type<sp/>=</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MakeStructType(profile_field,<sp/>settings_field);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>26,<sp/></highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">,<sp/>std::move(user_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(user_field);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectListAndNestedFields&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ListSchema();<sp/>},</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{1,<sp/>2},</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_type<sp/>=<sp/>MakeStructType(Name());</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>user_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>45,<sp/></highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">,<sp/>std::move(user_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(Id(),<sp/>user_field);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>ProjectMapErrorTestCases,<sp/><ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref>,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::Values(<ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectMapWithOnlyKey&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MapSchema();<sp/>},</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{31},<sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>select<sp/>key<sp/>field,<sp/>not<sp/>value<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>},</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_error_message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>project<sp/>Map<sp/>without<sp/>value<sp/>field&quot;</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal">INSTANTIATE_TEST_SUITE_P(</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>ProjectListAndMapTestCases,<sp/><ref refid="classProjectParamTest" kindref="compound">ProjectParamTest</ref>,</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::Values(</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectListElement&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ListWithStructElementSchema();<sp/>},</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{2},<sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>select<sp/>name<sp/>field<sp/>from<sp/>list<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>struct_type<sp/>=<sp/>MakeStructType(Name());</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>53,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,<sp/>std::move(struct_type),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_type<sp/>=</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;iceberg::ListType&gt;(element_field);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>54,<sp/></highlight><highlight class="stringliteral">&quot;list_field&quot;</highlight><highlight class="normal">,<sp/>std::move(list_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(list_field);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectListOfMap&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ListOfMapSchema();<sp/>},</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{2,<sp/>3},</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_value_struct<sp/>=<sp/>MakeStructType(Name(),<sp/>Age());</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_value_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>64,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>std::move(map_value_struct),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_type<sp/>=<sp/>std::make_shared&lt;iceberg::MapType&gt;(</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Key(),<sp/>map_value_field);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_element<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>65,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,<sp/>std::move(map_type),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_type<sp/>=</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;iceberg::ListType&gt;(list_element);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_field<sp/>=<sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>66,<sp/></highlight><highlight class="stringliteral">&quot;list_field&quot;</highlight><highlight class="normal">,<sp/>std::move(list_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(list_field);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectMapKeyAndValue&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ComplexMapSchema();<sp/>},</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{71,<sp/>74},</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key_id_field<sp/>=</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{71,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key_struct<sp/>=<sp/>MakeStructType(key_id_field);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key_field<sp/>=</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{73,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>std::move(key_struct),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_id_field<sp/>=</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{74,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_struct<sp/>=<sp/>MakeStructType(value_id_field);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_field<sp/>=</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{76,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>std::move(value_struct),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_type<sp/>=</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;iceberg::MapType&gt;(key_field,<sp/>value_field);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_field<sp/>=</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField" kindref="compound">iceberg::SchemaField</ref>{77,<sp/></highlight><highlight class="stringliteral">&quot;map_field&quot;</highlight><highlight class="normal">,<sp/>std::move(map_type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema(map_field);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structProjectTestParam" kindref="compound">ProjectTestParam</ref>{.test_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProjectEmptyResult&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.create_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BasicSchema();<sp/>},</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.selected_ids<sp/>=<sp/>{999},<sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>non-existent<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_schema<sp/>=<sp/>[]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSchema();<sp/>},</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.should_succeed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946" refid="classSchemaThreadSafetyTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSchemaThreadSafetyTest" kindref="compound">SchemaThreadSafetyTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>field1_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>field2_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(2,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>field3_<sp/>=<sp/>std::make_unique&lt;iceberg::SchemaField&gt;(3,<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>schema_<sp/>=<sp/>std::make_unique&lt;iceberg::Schema&gt;(</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;iceberg::SchemaField&gt;{*field1_,<sp/>*field2_,<sp/>*field3_},<sp/>100);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::Schema&gt;<sp/>schema_;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field1_;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field2_;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;iceberg::SchemaField&gt;<sp/>field3_;</highlight></codeline>
<codeline lineno="960"><highlight class="normal">};</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal">TEST_F(<ref refid="classSchemaThreadSafetyTest" kindref="compound">SchemaThreadSafetyTest</ref>,<sp/>ConcurrentFindFieldById)<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_threads<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations_per_thread<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>std::vector&lt;std::thread&gt;<sp/>threads;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_threads;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>threads.emplace_back([</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>iterations_per_thread]()<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>iterations_per_thread;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(1),<sp/>::testing::Optional(*field1_));</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(999),<sp/>::testing::Optional(std::nullopt));</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>thread<sp/>:<sp/>threads)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>thread.join();</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal">TEST_F(<ref refid="classSchemaThreadSafetyTest" kindref="compound">SchemaThreadSafetyTest</ref>,<sp/>MixedConcurrentOperations)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_threads<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations_per_thread<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>std::vector&lt;std::thread&gt;<sp/>threads;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_threads;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>threads.emplace_back([</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>iterations_per_thread,<sp/>i]()<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>iterations_per_thread;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>%<sp/>4<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(1),<sp/>::testing::Optional(*field1_));</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>%<sp/>4<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field2_));</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>%<sp/>4<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;AGE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field3_));</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldById(2),<sp/>::testing::Optional(*field2_));</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field1_));</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(schema_-&gt;FindFieldByName(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Optional(*field3_));</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>thread<sp/>:<sp/>threads)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>thread.join();</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="iceberg/test/schema_test.cc"/>
  </compounddef>
</doxygen>
