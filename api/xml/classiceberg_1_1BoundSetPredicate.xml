<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classiceberg_1_1BoundSetPredicate" kind="class" language="C++" prot="public">
    <compoundname>iceberg::BoundSetPredicate</compoundname>
    <basecompoundref refid="classiceberg_1_1BoundPredicate" prot="public" virt="non-virtual">iceberg::BoundPredicate</basecompoundref>
    <includes refid="predicate_8h" local="no">predicate.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classiceberg_1_1BoundSetPredicate_1ab81139d72766084ad2bed7fa94fcbcac" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Literal::Value &gt;</type>
        <definition>std::vector&lt;Literal::Value&gt; iceberg::BoundSetPredicate::value_set_</definition>
        <argsstring></argsstring>
        <name>value_set_</name>
        <qualifiedname>iceberg::BoundSetPredicate::value_set_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>FIXME: Literal::Value does not have hash support. We need to add this and replace the vector with a unordered_set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/expression/predicate.h" line="210" column="15" bodyfile="iceberg/expression/predicate.h" bodystart="210" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classiceberg_1_1BoundSetPredicate_1a2ce19fe11f99c04404b3bc425323d188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::BoundSetPredicate::BoundSetPredicate</definition>
        <argsstring>(Expression::Operation op, std::shared_ptr&lt; BoundTerm &gt; term, std::span&lt; const Literal &gt; literals)</argsstring>
        <name>BoundSetPredicate</name>
        <qualifiedname>iceberg::BoundSetPredicate::BoundSetPredicate</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1Expression_1a433076bdc34ce0b6d359313c6c7b8a9c" kindref="member">Expression::Operation</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classiceberg_1_1BoundTerm" kindref="compound">BoundTerm</ref> &gt;</type>
          <declname>term</declname>
        </param>
        <param>
          <type>std::span&lt; const <ref refid="classiceberg_1_1Literal" kindref="compound">Literal</ref> &gt;</type>
          <declname>literals</declname>
        </param>
        <briefdescription>
<para>Create a bound set predicate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The set operation (kIn, kNotIn) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>The bound term to test for membership </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>literals</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of literal values to test against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/expression/predicate.h" line="191" column="3" bodyfile="iceberg/expression/predicate.cc" bodystart="370" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="classiceberg_1_1BoundSetPredicate_1aa1e6d88cbaf5bd8a8a637af43186fc92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::BoundSetPredicate::~BoundSetPredicate</definition>
        <argsstring>() override</argsstring>
        <name>~BoundSetPredicate</name>
        <qualifiedname>iceberg::BoundSetPredicate::~BoundSetPredicate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/expression/predicate.h" line="194" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classiceberg_1_1BoundSetPredicate_1a0e41f6afad090ae7028d2174cee38780" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; Literal::Value &gt; &amp;</type>
        <definition>const std::vector&lt; Literal::Value &gt; &amp; iceberg::BoundSetPredicate::literal_set</definition>
        <argsstring>() const</argsstring>
        <name>literal_set</name>
        <qualifiedname>iceberg::BoundSetPredicate::literal_set</qualifiedname>
        <briefdescription>
<para>Returns the set of literals to test against. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/expression/predicate.h" line="197" column="21" bodyfile="iceberg/expression/predicate.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classiceberg_1_1BoundSetPredicate_1a598bc5aad62c7d73fb0a9f42f5c38112" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Result&lt; bool &gt;</type>
        <definition>Result&lt; bool &gt; iceberg::BoundSetPredicate::Test</definition>
        <argsstring>(const Literal::Value &amp;value) const override</argsstring>
        <name>Test</name>
        <qualifiedname>iceberg::BoundSetPredicate::Test</qualifiedname>
        <reimplements refid="classiceberg_1_1BoundPredicate_1a6a0fb004fa922b81c05a329ca8ea247e">Test</reimplements>
        <param>
          <type>const Literal::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Test a value against this predicate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to test </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the predicate passes, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/expression/predicate.h" line="199" column="10" bodyfile="iceberg/expression/predicate.cc" bodystart="383" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classiceberg_1_1BoundSetPredicate_1a1771793f38e5bbcb6ca43e0051558da9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Kind</type>
        <definition>Kind iceberg::BoundSetPredicate::kind</definition>
        <argsstring>() const override</argsstring>
        <name>kind</name>
        <qualifiedname>iceberg::BoundSetPredicate::kind</qualifiedname>
        <reimplements refid="classiceberg_1_1BoundPredicate_1a0c55acc20da1543acab053040834b2c3">kind</reimplements>
        <briefdescription>
<para>Returns the kind of this bound predicate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/expression/predicate.h" line="201" column="8" bodyfile="iceberg/expression/predicate.h" bodystart="201" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classiceberg_1_1BoundSetPredicate_1a03d6ebaaf709cc7262c09377c484fa14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string iceberg::BoundSetPredicate::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::BoundSetPredicate::ToString</qualifiedname>
        <reimplements refid="classiceberg_1_1util_1_1Formattable_1a79618aca5b3bf63610d9c87ac5ae0386">ToString</reimplements>
        <briefdescription>
<para>Get a user-readable string representation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/expression/predicate.h" line="203" column="15" bodyfile="iceberg/expression/predicate.cc" bodystart="391" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classiceberg_1_1BoundSetPredicate_1a06619576f7388681a6f0c04432b61e4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool iceberg::BoundSetPredicate::Equals</definition>
        <argsstring>(const Expression &amp;other) const override</argsstring>
        <name>Equals</name>
        <qualifiedname>iceberg::BoundSetPredicate::Equals</qualifiedname>
        <reimplements refid="classiceberg_1_1Expression_1a5f62190ba4e74757afb0fba05acb1e6a">Equals</reimplements>
        <param>
          <type>const <ref refid="classiceberg_1_1Expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns whether this expression will accept the same values as another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>another expression </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the expressions are equivalent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/expression/predicate.h" line="205" column="8" bodyfile="iceberg/expression/predicate.cc" bodystart="387" bodyend="389"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="classiceberg_1_1Bound" kindref="compound">Bound</ref> set predicate (membership testing against a set of values). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>iceberg::Predicate&lt; BoundTerm &gt;</label>
        <link refid="classiceberg_1_1Predicate"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>iceberg::Bound</label>
        <link refid="classiceberg_1_1Bound"/>
      </node>
      <node id="2">
        <label>iceberg::BoundPredicate</label>
        <link refid="classiceberg_1_1BoundPredicate"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>iceberg::BoundSetPredicate</label>
        <link refid="classiceberg_1_1BoundSetPredicate"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>iceberg::Expression</label>
        <link refid="classiceberg_1_1Expression"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>iceberg::util::Formattable</label>
        <link refid="classiceberg_1_1util_1_1Formattable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>iceberg::Predicate&lt; BoundTerm &gt;</label>
        <link refid="classiceberg_1_1Predicate"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>iceberg::Bound</label>
        <link refid="classiceberg_1_1Bound"/>
      </node>
      <node id="2">
        <label>iceberg::BoundPredicate</label>
        <link refid="classiceberg_1_1BoundPredicate"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>iceberg::BoundSetPredicate</label>
        <link refid="classiceberg_1_1BoundSetPredicate"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>iceberg::Expression</label>
        <link refid="classiceberg_1_1Expression"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>iceberg::util::Formattable</label>
        <link refid="classiceberg_1_1util_1_1Formattable"/>
      </node>
    </collaborationgraph>
    <location file="iceberg/expression/predicate.h" line="184" column="1" bodyfile="iceberg/expression/predicate.h" bodystart="184" bodyend="211"/>
    <listofallmembers>
      <member refid="classiceberg_1_1BoundPredicate_1a471b083fd86a5f6f654e77d82c7433fa" prot="public" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>BoundPredicate</name></member>
      <member refid="classiceberg_1_1BoundSetPredicate_1a2ce19fe11f99c04404b3bc425323d188" prot="public" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>BoundSetPredicate</name></member>
      <member refid="classiceberg_1_1BoundSetPredicate_1a06619576f7388681a6f0c04432b61e4e" prot="public" virt="virtual"><scope>iceberg::BoundSetPredicate</scope><name>Equals</name></member>
      <member refid="classiceberg_1_1BoundPredicate_1a2783b16047cabec692453dd4f741353f" prot="public" virt="virtual"><scope>iceberg::BoundSetPredicate</scope><name>Evaluate</name></member>
      <member refid="classiceberg_1_1BoundSetPredicate_1a1771793f38e5bbcb6ca43e0051558da9" prot="public" virt="virtual"><scope>iceberg::BoundSetPredicate</scope><name>kind</name></member>
      <member refid="classiceberg_1_1BoundPredicate_1a427b523d26ac49c0ff1b9c85a2a69cc4" prot="public" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>Kind</name></member>
      <member refid="classiceberg_1_1BoundSetPredicate_1a0e41f6afad090ae7028d2174cee38780" prot="public" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>literal_set</name></member>
      <member refid="classiceberg_1_1Expression_1a7ce9433b8cc063b06ac6371d6d56815c" prot="public" virt="virtual"><scope>iceberg::BoundSetPredicate</scope><name>Negate</name></member>
      <member refid="classiceberg_1_1Predicate_1a149508fc8ddf4cd5d4da0ae9f4c1c80f" prot="public" virt="virtual"><scope>iceberg::BoundSetPredicate</scope><name>op</name></member>
      <member refid="classiceberg_1_1Expression_1a433076bdc34ce0b6d359313c6c7b8a9c" prot="public" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>Operation</name></member>
      <member refid="classiceberg_1_1Predicate_1ae7cd54c4e3e6d62b81e5824d84d33381" prot="protected" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>operation_</name></member>
      <member refid="classiceberg_1_1Predicate_1ae1f081b37983ae239d609238ed382f73" prot="public" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>Predicate</name></member>
      <member refid="classiceberg_1_1BoundPredicate_1aa3c404fbe4dc5a3f194c675d03cf50b7" prot="public" virt="virtual"><scope>iceberg::BoundSetPredicate</scope><name>reference</name></member>
      <member refid="classiceberg_1_1Predicate_1acee9f864ef011a76e45d98f0d9bf42af" prot="public" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>term</name></member>
      <member refid="classiceberg_1_1Predicate_1ab1f8f6820bbbbd1d14ea847cd492aa4a" prot="protected" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>term_</name></member>
      <member refid="classiceberg_1_1BoundSetPredicate_1a598bc5aad62c7d73fb0a9f42f5c38112" prot="public" virt="virtual"><scope>iceberg::BoundSetPredicate</scope><name>Test</name></member>
      <member refid="classiceberg_1_1BoundSetPredicate_1a03d6ebaaf709cc7262c09377c484fa14" prot="public" virt="virtual"><scope>iceberg::BoundSetPredicate</scope><name>ToString</name></member>
      <member refid="classiceberg_1_1BoundSetPredicate_1ab81139d72766084ad2bed7fa94fcbcac" prot="private" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>value_set_</name></member>
      <member refid="classiceberg_1_1Bound_1abc22c55a926f2041f458bdc8be7a18b5" prot="public" virt="virtual"><scope>iceberg::BoundSetPredicate</scope><name>~Bound</name></member>
      <member refid="classiceberg_1_1BoundPredicate_1a26782bafef2943d8cfb7a221ebdf2050" prot="public" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>~BoundPredicate</name></member>
      <member refid="classiceberg_1_1BoundSetPredicate_1aa1e6d88cbaf5bd8a8a637af43186fc92" prot="public" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>~BoundSetPredicate</name></member>
      <member refid="classiceberg_1_1Expression_1a7529a7fa43b6a6ff1cd09eac4359f1ca" prot="public" virt="virtual"><scope>iceberg::BoundSetPredicate</scope><name>~Expression</name></member>
      <member refid="classiceberg_1_1util_1_1Formattable_1acfe29264450018bab0ceab0828cf46f9" prot="public" virt="virtual"><scope>iceberg::BoundSetPredicate</scope><name>~Formattable</name></member>
      <member refid="classiceberg_1_1Predicate_1a352e0d8ecbcf3d0a4fec9f5b0de0004d" prot="public" virt="non-virtual"><scope>iceberg::BoundSetPredicate</scope><name>~Predicate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
