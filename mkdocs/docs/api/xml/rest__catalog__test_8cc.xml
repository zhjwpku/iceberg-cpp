<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="rest__catalog__test_8cc" kind="file" language="C++">
    <compoundname>rest_catalog_test.cc</compoundname>
    <includes refid="rest__catalog_8h" local="yes">iceberg/catalog/rest/rest_catalog.h</includes>
    <includes local="no">httplib.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">thread</includes>
    <includes local="no">gmock/gmock.h</includes>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">nlohmann/json.hpp</includes>
    <incdepgraph>
      <node id="5">
        <label>iceberg/catalog/rest/iceberg_rest_export.h</label>
        <link refid="iceberg__rest__export_8h_source"/>
      </node>
      <node id="2">
        <label>iceberg/catalog/rest/rest_catalog.h</label>
        <link refid="rest__catalog_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>iceberg/test/rest_catalog_test.cc</label>
        <link refid="rest__catalog__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cpr/cpr.h</label>
      </node>
      <node id="9">
        <label>gmock/gmock.h</label>
      </node>
      <node id="10">
        <label>gtest/gtest.h</label>
      </node>
      <node id="6">
        <label>httplib.h</label>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
      <node id="11">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="8">
        <label>thread</label>
      </node>
    </incdepgraph>
    <innerclass refid="classiceberg_1_1catalog_1_1rest_1_1RestCatalogIntegrationTest" prot="public">iceberg::catalog::rest::RestCatalogIntegrationTest</innerclass>
    <innernamespace refid="namespaceiceberg">iceberg</innernamespace>
    <innernamespace refid="namespaceiceberg_1_1catalog">iceberg::catalog</innernamespace>
    <innernamespace refid="namespaceiceberg_1_1catalog_1_1rest">iceberg::catalog::rest</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/catalog/rest/rest_catalog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;httplib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gmock/gmock.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nlohmann/json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">iceberg::catalog::rest<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classiceberg_1_1catalog_1_1rest_1_1RestCatalogIntegrationTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classiceberg_1_1catalog_1_1rest_1_1RestCatalogIntegrationTest" kindref="compound">RestCatalogIntegrationTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>server_<sp/>=<sp/>std::make_unique&lt;httplib::Server&gt;();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>port_<sp/>=<sp/>server_-&gt;bind_to_any_port(</highlight><highlight class="stringliteral">&quot;127.0.0.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>server_thread_<sp/>=<sp/>std::thread([</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>server_-&gt;listen_after_bind();<sp/>});</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>server_-&gt;stop();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(server_thread_.joinable())<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>server_thread_.join();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;httplib::Server&gt;<sp/>server_;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>std::thread<sp/>server_thread_;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">TEST_F(<ref refid="classiceberg_1_1catalog_1_1rest_1_1RestCatalogIntegrationTest" kindref="compound">RestCatalogIntegrationTest</ref>,<sp/>GetConfigSuccessfully)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>server_-&gt;Get(</highlight><highlight class="stringliteral">&quot;/v1/config&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>httplib::Request&amp;,<sp/>httplib::Response&amp;<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>res.status<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>res.set_content(R</highlight><highlight class="stringliteral">&quot;({&quot;warehouse&quot;:<sp/>&quot;s3://test-bucket&quot;})&quot;,<sp/></highlight><highlight class="stringliteral">&quot;application/json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>std::string<sp/>base_uri<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://127.0.0.1:&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(port_);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>RestCatalog<sp/>catalog(base_uri);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>cpr::Response<sp/>response<sp/>=<sp/>catalog.GetConfig();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>ASSERT_EQ(response.error.code,<sp/>cpr::ErrorCode::OK);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>ASSERT_EQ(response.status_code,<sp/>200);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>json_body<sp/>=<sp/>nlohmann::json::parse(response.text);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>EXPECT_EQ(json_body[</highlight><highlight class="stringliteral">&quot;warehouse&quot;</highlight><highlight class="normal">],<sp/></highlight><highlight class="stringliteral">&quot;s3://test-bucket&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">TEST_F(RestCatalogIntegrationTest,<sp/>ListNamespacesReturnsMultipleResults)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>server_-&gt;Get(</highlight><highlight class="stringliteral">&quot;/v1/namespaces&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>httplib::Request&amp;,<sp/>httplib::Response&amp;<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>res.status<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>res.set_content(R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;namespaces&quot;:<sp/>[</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;accounting&quot;,<sp/>&quot;db&quot;],</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;production&quot;,<sp/>&quot;db&quot;]</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>})&quot;,</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;application/json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>std::string<sp/>base_uri<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://127.0.0.1:&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(port_);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>RestCatalog<sp/>catalog(base_uri);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>cpr::Response<sp/>response<sp/>=<sp/>catalog.ListNamespaces();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>ASSERT_EQ(response.error.code,<sp/>cpr::ErrorCode::OK);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>ASSERT_EQ(response.status_code,<sp/>200);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>json_body<sp/>=<sp/>nlohmann::json::parse(response.text);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(json_body.contains(</highlight><highlight class="stringliteral">&quot;namespaces&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>EXPECT_EQ(json_body[</highlight><highlight class="stringliteral">&quot;namespaces&quot;</highlight><highlight class="normal">].size(),<sp/>2);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>EXPECT_THAT(json_body[</highlight><highlight class="stringliteral">&quot;namespaces&quot;</highlight><highlight class="normal">][0][0],<sp/></highlight><highlight class="stringliteral">&quot;accounting&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">TEST_F(RestCatalogIntegrationTest,<sp/>HandlesServerError)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>server_-&gt;Get(</highlight><highlight class="stringliteral">&quot;/v1/config&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>httplib::Request&amp;,<sp/>httplib::Response&amp;<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>res.status<sp/>=<sp/>500;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>res.set_content(</highlight><highlight class="stringliteral">&quot;Internal<sp/>Server<sp/>Error&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;text/plain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>std::string<sp/>base_uri<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://127.0.0.1:&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(port_);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>RestCatalog<sp/>catalog(base_uri);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>cpr::Response<sp/>response<sp/>=<sp/>catalog.GetConfig();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>ASSERT_EQ(response.error.code,<sp/>cpr::ErrorCode::OK);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>ASSERT_EQ(response.status_code,<sp/>500);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>ASSERT_EQ(response.text,<sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>Server<sp/>Error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>iceberg::catalog::rest</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="iceberg/test/rest_catalog_test.cc"/>
  </compounddef>
</doxygen>
