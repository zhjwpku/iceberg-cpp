<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="predicate__test_8cc" kind="file" language="C++">
    <compoundname>predicate_test.cc</compoundname>
    <includes refid="expressions_8h" local="yes">iceberg/expression/expressions.h</includes>
    <includes refid="schema_8h" local="yes">iceberg/schema.h</includes>
    <includes refid="matchers_8h" local="yes">iceberg/test/matchers.h</includes>
    <includes refid="type_8h" local="yes">iceberg/type.h</includes>
    <incdepgraph>
      <node id="36">
        <label>iceberg/expression/expression.h</label>
        <link refid="expression_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iceberg/expression/expressions.h</label>
        <link refid="expressions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>iceberg/expression/literal.h</label>
        <link refid="literal_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>iceberg/expression/predicate.h</label>
        <link refid="predicate_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>iceberg/expression/term.h</label>
        <link refid="term_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>iceberg/iceberg_export.h</label>
        <link refid="iceberg__export_8h_source"/>
      </node>
      <node id="11">
        <label>iceberg/result.h</label>
        <link refid="result_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>iceberg/schema.h</label>
        <link refid="schema_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>iceberg/schema_field.h</label>
        <link refid="schema__field_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>iceberg/test/matchers.h</label>
        <link refid="matchers_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>iceberg/test/predicate_test.cc</label>
        <link refid="predicate__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>iceberg/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>iceberg/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
      </node>
      <node id="30">
        <label>iceberg/util/decimal.h</label>
        <link refid="decimal_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>iceberg/util/formattable.h</label>
        <link refid="formattable_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>iceberg/util/int128.h</label>
        <link refid="int128_8h"/>
      </node>
      <node id="24">
        <label>iceberg/util/lazy.h</label>
        <link refid="lazy_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>iceberg/util/macros.h</label>
        <link refid="macros_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>iceberg/util/string_util.h</label>
        <link refid="string__util_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>iceberg/util/uuid.h</label>
        <link refid="uuid_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>algorithm</label>
      </node>
      <node id="15">
        <label>array</label>
      </node>
      <node id="29">
        <label>cassert</label>
      </node>
      <node id="8">
        <label>compare</label>
      </node>
      <node id="25">
        <label>concepts</label>
      </node>
      <node id="16">
        <label>cstdint</label>
      </node>
      <node id="12">
        <label>expected</label>
      </node>
      <node id="13">
        <label>format</label>
      </node>
      <node id="26">
        <label>functional</label>
      </node>
      <node id="44">
        <label>gmock/gmock.h</label>
      </node>
      <node id="45">
        <label>gtest/gtest.h</label>
      </node>
      <node id="3">
        <label>initializer_list</label>
      </node>
      <node id="31">
        <label>iosfwd</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="27">
        <label>mutex</label>
      </node>
      <node id="17">
        <label>optional</label>
      </node>
      <node id="42">
        <label>ranges</label>
      </node>
      <node id="18">
        <label>span</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="21">
        <label>string_view</label>
      </node>
      <node id="32">
        <label>type_traits</label>
      </node>
      <node id="19">
        <label>unordered_map</label>
      </node>
      <node id="39">
        <label>unordered_set</label>
      </node>
      <node id="9">
        <label>variant</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classiceberg_1_1PredicateTest" prot="public">iceberg::PredicateTest</innerclass>
    <innernamespace refid="namespaceiceberg">iceberg</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="expressions_8h" kindref="compound">iceberg/expression/expressions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="schema_8h" kindref="compound">iceberg/schema.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/test/matchers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type_8h" kindref="compound">iceberg/type.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">iceberg<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classiceberg_1_1PredicateTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>simple<sp/>test<sp/>schema<sp/>with<sp/>various<sp/>field<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>schema_<sp/>=<sp/>std::make_shared&lt;Schema&gt;(</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SchemaField&gt;{<ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">int64</ref>()),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">()),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(3,<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">int32</ref>()),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(4,<sp/></highlight><highlight class="stringliteral">&quot;salary&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">float64</ref>()),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(5,<sp/></highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">())},</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*schema_id=*/</highlight><highlight class="normal">0);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Schema&gt;<sp/>schema_;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">TEST_F(<ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref>,<sp/>LogicalOperationsAndOr)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>true_expr<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a9843c9fc8be17d06e7ee48fc56b92acc" kindref="member">Expressions::AlwaysTrue</ref>();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>false_expr<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a4f7ec85c686c0a38ac13964d8528a097" kindref="member">Expressions::AlwaysFalse</ref>();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pred1<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a7c83453823f8fe4baf4cddc7934db664" kindref="member">Expressions::Equal</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>Literal::Int(25));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pred2<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a7c83453823f8fe4baf4cddc7934db664" kindref="member">Expressions::Equal</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>Literal::String(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>AND<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>and_true_true<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ad5129434b9a0e45e3fd3ffd53f5a3a40" kindref="member">Expressions::And</ref>(true_expr,<sp/>true_expr);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>EXPECT_EQ(and_true_true-&gt;op(),<sp/>Expression::Operation::kTrue);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>and_true_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ad5129434b9a0e45e3fd3ffd53f5a3a40" kindref="member">Expressions::And</ref>(true_expr,<sp/>pred1);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>EXPECT_EQ(and_true_pred-&gt;op(),<sp/>Expression::Operation::kEq);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>and_pred_true<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ad5129434b9a0e45e3fd3ffd53f5a3a40" kindref="member">Expressions::And</ref>(pred1,<sp/>true_expr);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>EXPECT_EQ(and_pred_true-&gt;op(),<sp/>Expression::Operation::kEq);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>and_false_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ad5129434b9a0e45e3fd3ffd53f5a3a40" kindref="member">Expressions::And</ref>(false_expr,<sp/>pred1);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>EXPECT_EQ(and_false_pred-&gt;op(),<sp/>Expression::Operation::kFalse);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>and_pred_false<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ad5129434b9a0e45e3fd3ffd53f5a3a40" kindref="member">Expressions::And</ref>(pred1,<sp/>false_expr);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>EXPECT_EQ(and_pred_false-&gt;op(),<sp/>Expression::Operation::kFalse);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>OR<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>or_false_false<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ab6f02015ae774f2ee14bcb7dfba2c287" kindref="member">Expressions::Or</ref>(false_expr,<sp/>false_expr);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>EXPECT_EQ(or_false_false-&gt;op(),<sp/>Expression::Operation::kFalse);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>or_false_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ab6f02015ae774f2ee14bcb7dfba2c287" kindref="member">Expressions::Or</ref>(false_expr,<sp/>pred1);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>EXPECT_EQ(or_false_pred-&gt;op(),<sp/>Expression::Operation::kEq);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>or_pred_false<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ab6f02015ae774f2ee14bcb7dfba2c287" kindref="member">Expressions::Or</ref>(pred1,<sp/>false_expr);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>EXPECT_EQ(or_pred_false-&gt;op(),<sp/>Expression::Operation::kEq);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>or_true_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ab6f02015ae774f2ee14bcb7dfba2c287" kindref="member">Expressions::Or</ref>(true_expr,<sp/>pred1);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>EXPECT_EQ(or_true_pred-&gt;op(),<sp/>Expression::Operation::kTrue);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>or_pred_true<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ab6f02015ae774f2ee14bcb7dfba2c287" kindref="member">Expressions::Or</ref>(pred1,<sp/>true_expr);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>EXPECT_EQ(or_pred_true-&gt;op(),<sp/>Expression::Operation::kTrue);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">TEST_F(PredicateTest,<sp/>ConstantExpressions)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>always_true<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a9843c9fc8be17d06e7ee48fc56b92acc" kindref="member">Expressions::AlwaysTrue</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>always_false<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a4f7ec85c686c0a38ac13964d8528a097" kindref="member">Expressions::AlwaysFalse</ref>();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>EXPECT_EQ(always_true-&gt;op(),<sp/>Expression::Operation::kTrue);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>EXPECT_EQ(always_false-&gt;op(),<sp/>Expression::Operation::kFalse);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">TEST_F(PredicateTest,<sp/>UnaryPredicateFactory)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_null_name<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ae5608165fd55065f52912020f1b1ba38" kindref="member">Expressions::IsNull</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>EXPECT_EQ(is_null_name-&gt;op(),<sp/>Expression::Operation::kIsNull);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>EXPECT_EQ(is_null_name-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>not_null_name<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1aad8a0b67c1f32ab39b203e8cf921c29f" kindref="member">Expressions::NotNull</ref>(</highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>EXPECT_EQ(not_null_name-&gt;op(),<sp/>Expression::Operation::kNotNull);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>EXPECT_EQ(not_null_name-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_nan_name<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1aea1c2990be68d8cccfd5a8407d009629" kindref="member">Expressions::IsNaN</ref>(</highlight><highlight class="stringliteral">&quot;salary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>EXPECT_EQ(is_nan_name-&gt;op(),<sp/>Expression::Operation::kIsNan);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>EXPECT_EQ(is_nan_name-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;salary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>not_nan_name<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a6a2b726a817d2917184a804435673099" kindref="member">Expressions::NotNaN</ref>(</highlight><highlight class="stringliteral">&quot;salary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>EXPECT_EQ(not_nan_name-&gt;op(),<sp/>Expression::Operation::kNotNan);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>EXPECT_EQ(not_nan_name-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;salary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">TEST_F(PredicateTest,<sp/>ComparisonPredicateFactory)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lt_name<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a2d88c3bcaafd61d43557dd6b3a36d7b5" kindref="member">Expressions::LessThan</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>Literal::Int(30));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>EXPECT_EQ(lt_name-&gt;op(),<sp/>Expression::Operation::kLt);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>EXPECT_EQ(lt_name-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lte_name<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a18f0da761582e0b17038d6c5be0236d3" kindref="member">Expressions::LessThanOrEqual</ref>(</highlight><highlight class="stringliteral">&quot;salary&quot;</highlight><highlight class="normal">,<sp/>Literal::Double(50000.0));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>EXPECT_EQ(lte_name-&gt;op(),<sp/>Expression::Operation::kLtEq);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>EXPECT_EQ(lte_name-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;salary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gt_name<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a79459f2f16bddf1e1c1d8ae042464b3e" kindref="member">Expressions::GreaterThan</ref>(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/>Literal::Long(1000));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>EXPECT_EQ(gt_name-&gt;op(),<sp/>Expression::Operation::kGt);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>EXPECT_EQ(gt_name-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gte_name<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a2bb5a287e72918aca89ff39313aea635" kindref="member">Expressions::GreaterThanOrEqual</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>Literal::Int(18));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>EXPECT_EQ(gte_name-&gt;op(),<sp/>Expression::Operation::kGtEq);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>EXPECT_EQ(gte_name-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eq_name<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a7c83453823f8fe4baf4cddc7934db664" kindref="member">Expressions::Equal</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>Literal::String(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>EXPECT_EQ(eq_name-&gt;op(),<sp/>Expression::Operation::kEq);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>EXPECT_EQ(eq_name-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>neq_name<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a9c90ad77e3a8f6cd162655582344e807" kindref="member">Expressions::NotEqual</ref>(</highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">,<sp/><ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>EXPECT_EQ(neq_name-&gt;op(),<sp/>Expression::Operation::kNotEq);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>EXPECT_EQ(neq_name-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">TEST_F(PredicateTest,<sp/>StringPredicateFactory)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>starts_name<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a6f83c9c342b225ae92b85b8280777b64" kindref="member">Expressions::StartsWith</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;John&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>EXPECT_EQ(starts_name-&gt;op(),<sp/>Expression::Operation::kStartsWith);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>EXPECT_EQ(starts_name-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>not_starts_name<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ab1acc8cc798e2be90e193eed5cf6fcee" kindref="member">Expressions::NotStartsWith</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Jane&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>EXPECT_EQ(not_starts_name-&gt;op(),<sp/>Expression::Operation::kNotStartsWith);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>EXPECT_EQ(not_starts_name-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">TEST_F(PredicateTest,<sp/>SetPredicateFactory)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>std::vector&lt;Literal&gt;<sp/>values<sp/>=<sp/>{Literal::Int(10),<sp/>Literal::Int(20),<sp/>Literal::Int(30)};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>std::initializer_list&lt;Literal&gt;<sp/>init_values<sp/>=<sp/>{Literal::String(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Literal::String(</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">)};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>in_name_vec<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a06838be89d515dc95cb56bb2fb9a8883" kindref="member">Expressions::In</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>values);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>EXPECT_EQ(in_name_vec-&gt;op(),<sp/>Expression::Operation::kIn);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>EXPECT_EQ(in_name_vec-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>in_name_init<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a06838be89d515dc95cb56bb2fb9a8883" kindref="member">Expressions::In</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>init_values);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>EXPECT_EQ(in_name_init-&gt;op(),<sp/>Expression::Operation::kIn);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>EXPECT_EQ(in_name_init-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>not_in_name_vec<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a6ca3fcad63318d0a7e7a7d0d893e26dc" kindref="member">Expressions::NotIn</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>values);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>EXPECT_EQ(not_in_name_vec-&gt;op(),<sp/>Expression::Operation::kNotIn);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>EXPECT_EQ(not_in_name_vec-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>not_in_name_init<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a6ca3fcad63318d0a7e7a7d0d893e26dc" kindref="member">Expressions::NotIn</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>init_values);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>EXPECT_EQ(not_in_name_init-&gt;op(),<sp/>Expression::Operation::kNotIn);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>EXPECT_EQ(not_in_name_init-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">TEST_F(PredicateTest,<sp/>GenericPredicateFactory)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pred_single<sp/>=</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1Expressions_1abaf17ca7c533aa8c3a0fde80b2068b1b" kindref="member">Expressions::Predicate</ref>(Expression::Operation::kEq,<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>Literal::Int(25));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>EXPECT_EQ(pred_single-&gt;op(),<sp/>Expression::Operation::kEq);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>EXPECT_EQ(pred_single-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>std::vector&lt;Literal&gt;<sp/>values<sp/>=<sp/>{Literal::Int(10),<sp/>Literal::Int(20)};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pred_multi<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1abaf17ca7c533aa8c3a0fde80b2068b1b" kindref="member">Expressions::Predicate</ref>(Expression::Operation::kIn,<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>values);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>EXPECT_EQ(pred_multi-&gt;op(),<sp/>Expression::Operation::kIn);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>EXPECT_EQ(pred_multi-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pred_unary<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1abaf17ca7c533aa8c3a0fde80b2068b1b" kindref="member">Expressions::Predicate</ref>(Expression::Operation::kIsNull,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>EXPECT_EQ(pred_unary-&gt;op(),<sp/>Expression::Operation::kIsNull);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>EXPECT_EQ(pred_unary-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">TEST_F(PredicateTest,<sp/>TransformFactory)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bucket_transform<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a3794ab614f6d31e8ca375fc2cb461868" kindref="member">Expressions::Bucket</ref>(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/>10);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>EXPECT_NE(bucket_transform,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bucket_transform-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>year_transform<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a6066a65c379f703138e1b0abd8ed146d" kindref="member">Expressions::Year</ref>(</highlight><highlight class="stringliteral">&quot;timestamp_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>EXPECT_NE(year_transform,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>EXPECT_EQ(year_transform-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;timestamp_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>month_transform<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1aca5010427d1084bab3a514e4bfcdbfe1" kindref="member">Expressions::Month</ref>(</highlight><highlight class="stringliteral">&quot;timestamp_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>EXPECT_NE(month_transform,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>EXPECT_EQ(month_transform-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;timestamp_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>day_transform<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ada6b378fd8e69075a55ef3ec11e5e0f7" kindref="member">Expressions::Day</ref>(</highlight><highlight class="stringliteral">&quot;timestamp_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>EXPECT_NE(day_transform,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>EXPECT_EQ(day_transform-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;timestamp_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hour_transform<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a68a082b7916d62b3af9822e3f8db98b6" kindref="member">Expressions::Hour</ref>(</highlight><highlight class="stringliteral">&quot;timestamp_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>EXPECT_NE(hour_transform,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>EXPECT_EQ(hour_transform-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;timestamp_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>truncate_transform<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1aadbb6b60bcaad6043a65b90a78bff09b" kindref="member">Expressions::Truncate</ref>(</highlight><highlight class="stringliteral">&quot;string_field&quot;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>EXPECT_NE(truncate_transform,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>EXPECT_EQ(truncate_transform-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;string_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">TEST_F(PredicateTest,<sp/>ReferenceFactory)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a482a0f9ec93ef525cd9cf47b78b36a40" kindref="member">Expressions::Ref</ref>(</highlight><highlight class="stringliteral">&quot;test_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ref-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;test_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ref-&gt;ToString(),<sp/></highlight><highlight class="stringliteral">&quot;ref(name=\&quot;test_field\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">TEST_F(PredicateTest,<sp/>NamedReferenceBasics)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref<sp/>=<sp/>std::make_shared&lt;NamedReference&gt;(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ref-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ref-&gt;ToString(),<sp/></highlight><highlight class="stringliteral">&quot;ref(name=\&quot;id\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ref-&gt;reference(),<sp/>ref);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">TEST_F(PredicateTest,<sp/>NamedReferenceBind)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref<sp/>=<sp/>std::make_shared&lt;NamedReference&gt;(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_result<sp/>=<sp/>ref-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>ASSERT_THAT(bound_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_ref<sp/>=<sp/>bound_result.value();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_ref-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_ref-&gt;field().field_id(),<sp/>1);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_ref-&gt;type()-&gt;type_id(),<sp/>TypeId::kLong);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(bound_ref-&gt;MayProduceNull());</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">TEST_F(PredicateTest,<sp/>NamedReferenceBindNonExistentField)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref<sp/>=<sp/>std::make_shared&lt;NamedReference&gt;(</highlight><highlight class="stringliteral">&quot;non_existent_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_result<sp/>=<sp/>ref-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>EXPECT_THAT(bound_result,<sp/>IsError(ErrorKind::kInvalidExpression));</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">TEST_F(PredicateTest,<sp/>BoundReferenceEquality)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref1<sp/>=<sp/>std::make_shared&lt;NamedReference&gt;(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref2<sp/>=<sp/>std::make_shared&lt;NamedReference&gt;(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref3<sp/>=<sp/>std::make_shared&lt;NamedReference&gt;(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound1<sp/>=<sp/>ref1-&gt;Bind(*schema_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).value();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound2<sp/>=<sp/>ref2-&gt;Bind(*schema_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).value();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound3<sp/>=<sp/>ref3-&gt;Bind(*schema_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).value();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>field<sp/>should<sp/>be<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(bound1-&gt;Equals(*bound2));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(bound2-&gt;Equals(*bound1));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Different<sp/>fields<sp/>should<sp/>not<sp/>be<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(bound1-&gt;Equals(*bound3));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(bound3-&gt;Equals(*bound1));</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">TEST_F(PredicateTest,<sp/>UnboundPredicateCreation)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_null_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ae5608165fd55065f52912020f1b1ba38" kindref="member">Expressions::IsNull</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>EXPECT_EQ(is_null_pred-&gt;op(),<sp/>Expression::Operation::kIsNull);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>EXPECT_EQ(is_null_pred-&gt;reference()-&gt;name(),<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>not_null_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1aad8a0b67c1f32ab39b203e8cf921c29f" kindref="member">Expressions::NotNull</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>EXPECT_EQ(not_null_pred-&gt;op(),<sp/>Expression::Operation::kNotNull);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>equal_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a7c83453823f8fe4baf4cddc7934db664" kindref="member">Expressions::Equal</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>Literal::Int(25));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>EXPECT_EQ(equal_pred-&gt;op(),<sp/>Expression::Operation::kEq);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>greater_than_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a79459f2f16bddf1e1c1d8ae042464b3e" kindref="member">Expressions::GreaterThan</ref>(</highlight><highlight class="stringliteral">&quot;salary&quot;</highlight><highlight class="normal">,<sp/>Literal::Double(50000.0));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>EXPECT_EQ(greater_than_pred-&gt;op(),<sp/>Expression::Operation::kGt);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">TEST_F(PredicateTest,<sp/>UnboundPredicateToString)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>equal_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a7c83453823f8fe4baf4cddc7934db664" kindref="member">Expressions::Equal</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>Literal::Int(25));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>EXPECT_EQ(equal_pred-&gt;ToString(),<sp/></highlight><highlight class="stringliteral">&quot;ref(name=\&quot;age\&quot;)<sp/>==<sp/>25&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_null_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ae5608165fd55065f52912020f1b1ba38" kindref="member">Expressions::IsNull</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>EXPECT_EQ(is_null_pred-&gt;ToString(),<sp/></highlight><highlight class="stringliteral">&quot;is_null(ref(name=\&quot;name\&quot;))&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>in_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a06838be89d515dc95cb56bb2fb9a8883" kindref="member">Expressions::In</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>{Literal::Int(10),<sp/>Literal::Int(20)});</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>EXPECT_EQ(in_pred-&gt;ToString(),<sp/></highlight><highlight class="stringliteral">&quot;ref(name=\&quot;age\&quot;)<sp/>in<sp/>[10,<sp/>20]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>starts_with_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a6f83c9c342b225ae92b85b8280777b64" kindref="member">Expressions::StartsWith</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;John&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>EXPECT_EQ(starts_with_pred-&gt;ToString(),<sp/></highlight><highlight class="stringliteral">&quot;ref(name=\&quot;name\&quot;)<sp/>startsWith<sp/>\&quot;John\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">TEST_F(PredicateTest,<sp/>UnboundPredicateNegate)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>equal_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a7c83453823f8fe4baf4cddc7934db664" kindref="member">Expressions::Equal</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>Literal::Int(25));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>negated_result<sp/>=<sp/>equal_pred-&gt;Negate();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>ASSERT_THAT(negated_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>negated_pred<sp/>=<sp/>negated_result.value();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>EXPECT_EQ(negated_pred-&gt;op(),<sp/>Expression::Operation::kNotEq);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_null_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ae5608165fd55065f52912020f1b1ba38" kindref="member">Expressions::IsNull</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>negated_null_result<sp/>=<sp/>is_null_pred-&gt;Negate();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>ASSERT_THAT(negated_null_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>negated_null_pred<sp/>=<sp/>negated_null_result.value();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>EXPECT_EQ(negated_null_pred-&gt;op(),<sp/>Expression::Operation::kNotNull);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>in_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a06838be89d515dc95cb56bb2fb9a8883" kindref="member">Expressions::In</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>{Literal::Int(10),<sp/>Literal::Int(20)});</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>negated_in_result<sp/>=<sp/>in_pred-&gt;Negate();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>ASSERT_THAT(negated_in_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>negated_in_pred<sp/>=<sp/>negated_in_result.value();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>EXPECT_EQ(negated_in_pred-&gt;op(),<sp/>Expression::Operation::kNotIn);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">TEST_F(PredicateTest,<sp/>UnboundPredicateBindUnary)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_null_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ae5608165fd55065f52912020f1b1ba38" kindref="member">Expressions::IsNull</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_result<sp/>=<sp/>is_null_pred-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>ASSERT_THAT(bound_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_pred<sp/>=<sp/>bound_result.value();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_pred-&gt;op(),<sp/>Expression::Operation::kIsNull);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>NOT<sp/>NULL<sp/>on<sp/>non-nullable<sp/>field<sp/>-<sp/>should<sp/>return<sp/>AlwaysTrue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>not_null_required<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1aad8a0b67c1f32ab39b203e8cf921c29f" kindref="member">Expressions::NotNull</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>age<sp/>is<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_not_null_result<sp/>=<sp/>not_null_required-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>ASSERT_THAT(bound_not_null_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_not_null<sp/>=<sp/>bound_not_null_result.value();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_not_null-&gt;op(),<sp/>Expression::Operation::kTrue);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>IS<sp/>NULL<sp/>on<sp/>non-nullable<sp/>field<sp/>-<sp/>should<sp/>return<sp/>AlwaysFalse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_null_required<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ae5608165fd55065f52912020f1b1ba38" kindref="member">Expressions::IsNull</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>age<sp/>is<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_is_null_result<sp/>=<sp/>is_null_required-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>ASSERT_THAT(bound_is_null_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_is_null<sp/>=<sp/>bound_is_null_result.value();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_is_null-&gt;op(),<sp/>Expression::Operation::kFalse);</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">TEST_F(PredicateTest,<sp/>UnboundPredicateBindLiteral)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>equal_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a7c83453823f8fe4baf4cddc7934db664" kindref="member">Expressions::Equal</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>Literal::Int(25));</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_result<sp/>=<sp/>equal_pred-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>ASSERT_THAT(bound_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_pred<sp/>=<sp/>bound_result.value();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_pred-&gt;op(),<sp/>Expression::Operation::kEq);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>binding<sp/>with<sp/>type<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>equal_long_pred<sp/>=</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1Expressions_1a7c83453823f8fe4baf4cddc7934db664" kindref="member">Expressions::Equal</ref>(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/>Literal::Int(123));<sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>to<sp/>long<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_long_result<sp/>=<sp/>equal_long_pred-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>ASSERT_THAT(bound_long_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_long_pred<sp/>=<sp/>bound_long_result.value();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_long_pred-&gt;op(),<sp/>Expression::Operation::kEq);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">TEST_F(PredicateTest,<sp/>UnboundPredicateBindIn)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>IN<sp/>operation<sp/>with<sp/>single<sp/>value<sp/>(should<sp/>become<sp/>equality)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>in_single<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a06838be89d515dc95cb56bb2fb9a8883" kindref="member">Expressions::In</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>{Literal::Int(25)});</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_single_result<sp/>=<sp/>in_single-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>ASSERT_THAT(bound_single_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_single<sp/>=<sp/>bound_single_result.value();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_single-&gt;op(),<sp/>Expression::Operation::kEq);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>NOT<sp/>IN<sp/>operation<sp/>with<sp/>single<sp/>value<sp/>(should<sp/>become<sp/>inequality)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>not_in_single<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a6ca3fcad63318d0a7e7a7d0d893e26dc" kindref="member">Expressions::NotIn</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>{Literal::Int(25)});</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_not_single_result<sp/>=<sp/>not_in_single-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>ASSERT_THAT(bound_not_single_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_not_single<sp/>=<sp/>bound_not_single_result.value();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_not_single-&gt;op(),<sp/>Expression::Operation::kNotEq);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>IN<sp/>operation<sp/>with<sp/>multiple<sp/>values<sp/>(should<sp/>stay<sp/>as<sp/>IN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>in_multi<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a06838be89d515dc95cb56bb2fb9a8883" kindref="member">Expressions::In</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>{Literal::Int(25),<sp/>Literal::Int(30)});</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_multi_result<sp/>=<sp/>in_multi-&gt;Bind(*schema_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>ASSERT_THAT(bound_multi_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_multi<sp/>=<sp/>bound_multi_result.value();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_multi-&gt;op(),<sp/>Expression::Operation::kIn);</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">TEST_F(PredicateTest,<sp/>FloatingPointNaNPredicates)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_nan_float<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1aea1c2990be68d8cccfd5a8407d009629" kindref="member">Expressions::IsNaN</ref>(</highlight><highlight class="stringliteral">&quot;salary&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>salary<sp/>is<sp/>float64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_nan_result<sp/>=<sp/>is_nan_float-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>ASSERT_THAT(bound_nan_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_nan<sp/>=<sp/>bound_nan_result.value();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_nan-&gt;op(),<sp/>Expression::Operation::kIsNan);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_nan_int<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1aea1c2990be68d8cccfd5a8407d009629" kindref="member">Expressions::IsNaN</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>age<sp/>is<sp/>int32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_nan_int_result<sp/>=<sp/>is_nan_int-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>EXPECT_THAT(bound_nan_int_result,<sp/>IsError(ErrorKind::kInvalidExpression));</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">TEST_F(PredicateTest,<sp/>StringStartsWithPredicates)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>starts_with<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a6f83c9c342b225ae92b85b8280777b64" kindref="member">Expressions::StartsWith</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;John&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>is<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_starts_result<sp/>=<sp/>starts_with-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>ASSERT_THAT(bound_starts_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_starts<sp/>=<sp/>bound_starts_result.value();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_starts-&gt;op(),<sp/>Expression::Operation::kStartsWith);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>starts_with_int<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a6f83c9c342b225ae92b85b8280777b64" kindref="member">Expressions::StartsWith</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>age<sp/>is<sp/>int32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_starts_int_result<sp/>=<sp/>starts_with_int-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>EXPECT_THAT(bound_starts_int_result,<sp/>IsError(ErrorKind::kInvalidExpression));</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal">TEST_F(PredicateTest,<sp/>LiteralConversionEdgeCases)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>large_value_lt<sp/>=</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1Expressions_1a2d88c3bcaafd61d43557dd6b3a36d7b5" kindref="member">Expressions::LessThan</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>Literal::Long(std::numeric_limits&lt;int64_t&gt;::max()));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_large_result<sp/>=<sp/>large_value_lt-&gt;Bind(*schema_,<sp/></highlight><highlight class="comment">/*case_sensitive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>ASSERT_THAT(bound_large_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bound_large<sp/>=<sp/>bound_large_result.value();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>EXPECT_EQ(bound_large-&gt;op(),<sp/>Expression::Operation::kTrue);</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">TEST_F(PredicateTest,<sp/>ComplexExpressionCombinations)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eq_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1a7c83453823f8fe4baf4cddc7934db664" kindref="member">Expressions::Equal</ref>(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>Literal::Int(25));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>null_pred<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ae5608165fd55065f52912020f1b1ba38" kindref="member">Expressions::IsNull</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>in_pred<sp/>=</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1Expressions_1a06838be89d515dc95cb56bb2fb9a8883" kindref="member">Expressions::In</ref>(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/>{Literal::Long(1),<sp/>Literal::Long(2),<sp/>Literal::Long(3)});</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>AND<sp/>combinations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>and_eq_null<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ad5129434b9a0e45e3fd3ffd53f5a3a40" kindref="member">Expressions::And</ref>(eq_pred,<sp/>null_pred);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>EXPECT_EQ(and_eq_null-&gt;op(),<sp/>Expression::Operation::kAnd);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>and_eq_in<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ad5129434b9a0e45e3fd3ffd53f5a3a40" kindref="member">Expressions::And</ref>(eq_pred,<sp/>in_pred);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>EXPECT_EQ(and_eq_in-&gt;op(),<sp/>Expression::Operation::kAnd);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>OR<sp/>combinations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>or_null_in<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ab6f02015ae774f2ee14bcb7dfba2c287" kindref="member">Expressions::Or</ref>(null_pred,<sp/>in_pred);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>EXPECT_EQ(or_null_in-&gt;op(),<sp/>Expression::Operation::kOr);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>nested<sp/>combinations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nested<sp/>=<sp/><ref refid="classiceberg_1_1Expressions_1ad5129434b9a0e45e3fd3ffd53f5a3a40" kindref="member">Expressions::And</ref>(and_eq_null,<sp/>or_null_in);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>EXPECT_EQ(nested-&gt;op(),<sp/>Expression::Operation::kAnd);</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>iceberg</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="iceberg/test/predicate_test.cc"/>
  </compounddef>
</doxygen>
