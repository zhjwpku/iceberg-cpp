<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="name__mapping__test_8cc" kind="file" language="C++">
    <compoundname>name_mapping_test.cc</compoundname>
    <includes refid="name__mapping_8h" local="yes">iceberg/name_mapping.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">vector</includes>
    <includes local="no">gmock/gmock.h</includes>
    <includes local="no">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="11">
        <label>iceberg/iceberg_export.h</label>
        <link refid="iceberg__export_8h_source"/>
      </node>
      <node id="2">
        <label>iceberg/name_mapping.h</label>
        <link refid="name__mapping_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>iceberg/result.h</label>
        <link refid="result_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>iceberg/schema.h</label>
        <link refid="schema_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>iceberg/schema_field.h</label>
        <link refid="schema__field_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>iceberg/test/name_mapping_test.cc</label>
        <link refid="name__mapping__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>iceberg/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>iceberg/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
      </node>
      <node id="20">
        <label>iceberg/util/formattable.h</label>
        <link refid="formattable_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>iceberg/util/lazy.h</label>
        <link refid="lazy_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>iceberg/util/macros.h</label>
        <link refid="macros_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>iceberg/util/string_util.h</label>
        <link refid="string__util_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>algorithm</label>
      </node>
      <node id="22">
        <label>array</label>
      </node>
      <node id="27">
        <label>cassert</label>
      </node>
      <node id="24">
        <label>concepts</label>
      </node>
      <node id="16">
        <label>cstdint</label>
      </node>
      <node id="13">
        <label>expected</label>
      </node>
      <node id="14">
        <label>format</label>
      </node>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="31">
        <label>gmock/gmock.h</label>
      </node>
      <node id="32">
        <label>gtest/gtest.h</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="25">
        <label>mutex</label>
      </node>
      <node id="5">
        <label>optional</label>
      </node>
      <node id="30">
        <label>ranges</label>
      </node>
      <node id="6">
        <label>span</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="18">
        <label>string_view</label>
      </node>
      <node id="8">
        <label>unordered_map</label>
      </node>
      <node id="9">
        <label>unordered_set</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classiceberg_1_1NameMappingTest" prot="public">iceberg::NameMappingTest</innerclass>
    <innernamespace refid="namespaceiceberg">iceberg</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/name_mapping.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gmock/gmock.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">iceberg<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classiceberg_1_1NameMappingTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classiceberg_1_1NameMappingTest" kindref="compound">NameMappingTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;NameMapping&gt;<sp/>MakeNameMapping()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>fields;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1});</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>2});</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>nested_fields;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>nested_fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>4});</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>nested_fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>5});</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nested_mapping<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>(std::move(nested_fields));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>3,<sp/>.nested_mapping<sp/>=<sp/>std::move(nested_mapping)});</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classiceberg_1_1NameMapping_1a98c55a42873ca93287da04c9717b4070" kindref="member">NameMapping::Make</ref>(std::move(fields));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal">};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">TEST_F(<ref refid="classiceberg_1_1NameMappingTest" kindref="compound">NameMappingTest</ref>,<sp/>FindById)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapping<sp/>=<sp/>MakeNameMapping();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Param<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>field_id;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_have_value;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_set&lt;std::string&gt;<sp/>names;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Param&gt;<sp/>params<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.field_id<sp/>=<sp/>1,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.field_id<sp/>=<sp/>2,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.field_id<sp/>=<sp/>3,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.field_id<sp/>=<sp/>4,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.field_id<sp/>=<sp/>5,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.field_id<sp/>=<sp/>999,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>.names<sp/>=<sp/>{}},</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>param<sp/>:<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>mapping-&gt;Find(param.field_id);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.should_have_value)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(field.has_value());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(field-&gt;get().field_id,<sp/>param.field_id);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THAT(field-&gt;get().names,<sp/>testing::UnorderedElementsAreArray(param.names));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(field.has_value());</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">TEST_F(NameMappingTest,<sp/>FindByName)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapping<sp/>=<sp/>MakeNameMapping();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Param<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_have_value;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>field_id;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Param&gt;<sp/>params<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>1},</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>1},</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>2},</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>3},</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;qux.hello&quot;</highlight><highlight class="normal">,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>4},</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;qux.world&quot;</highlight><highlight class="normal">,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>5},</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;non_existent&quot;</highlight><highlight class="normal">,<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>-1},</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>param<sp/>:<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>mapping-&gt;Find(param.name);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.should_have_value)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(field.has_value());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(field-&gt;get().field_id,<sp/>param.field_id);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(field.has_value());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">TEST_F(NameMappingTest,<sp/>FindByNameParts)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapping<sp/>=<sp/>MakeNameMapping();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Param<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>names;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_have_value;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>field_id;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>std::vector&lt;Param&gt;<sp/>params<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">},<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>1},</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">},<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>1},</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">},<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>2},</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">},<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>3},</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">},<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>4},</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">},<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>5},</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;non_existent&quot;</highlight><highlight class="normal">},<sp/>.should_have_value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>.field_id<sp/>=<sp/>-1},</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>param<sp/>:<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>mapping-&gt;Find(param.names);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.should_have_value)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(field.has_value());</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(field-&gt;get().field_id,<sp/>param.field_id);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(field.has_value());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">TEST_F(NameMappingTest,<sp/>FindMethodsOnConstObject)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapping<sp/>=<sp/>MakeNameMapping();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NameMapping&amp;<sp/>const_mapping<sp/>=<sp/>*mapping;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>Find<sp/>by<sp/>ID<sp/>on<sp/>const<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field_by_id<sp/>=<sp/>const_mapping.Find(1);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(field_by_id.has_value());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>EXPECT_EQ(field_by_id-&gt;get().field_id,<sp/>1);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>EXPECT_THAT(field_by_id-&gt;get().names,<sp/>testing::UnorderedElementsAre(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>Find<sp/>by<sp/>name<sp/>on<sp/>const<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field_by_name<sp/>=<sp/>const_mapping.Find(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(field_by_name.has_value());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>EXPECT_EQ(field_by_name-&gt;get().field_id,<sp/>2);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>EXPECT_THAT(field_by_name-&gt;get().names,<sp/>testing::UnorderedElementsAre(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>Find<sp/>by<sp/>name<sp/>parts<sp/>on<sp/>const<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field_by_parts<sp/>=<sp/>const_mapping.Find(std::vector&lt;std::string&gt;{</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(field_by_parts.has_value());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>EXPECT_EQ(field_by_parts-&gt;get().field_id,<sp/>4);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>EXPECT_THAT(field_by_parts-&gt;get().names,<sp/>testing::UnorderedElementsAre(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>Find<sp/>non-existent<sp/>field<sp/>on<sp/>const<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>non_existent<sp/>=<sp/>const_mapping.Find(999);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(non_existent.has_value());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>non_existent_name<sp/>=<sp/>const_mapping.Find(</highlight><highlight class="stringliteral">&quot;non_existent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(non_existent_name.has_value());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>non_existent_parts<sp/>=</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const_mapping.Find(std::vector&lt;std::string&gt;{</highlight><highlight class="stringliteral">&quot;non&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;existent&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(non_existent_parts.has_value());</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">TEST_F(NameMappingTest,<sp/>FindMethodsOnConstEmptyMapping)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty_mapping<sp/>=<sp/><ref refid="classiceberg_1_1NameMapping_1a466e6ed544806f724485ca62dda7fc9e" kindref="member">NameMapping::MakeEmpty</ref>();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NameMapping&amp;<sp/>const_empty_mapping<sp/>=<sp/>*empty_mapping;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>Find<sp/>by<sp/>ID<sp/>on<sp/>const<sp/>empty<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field_by_id<sp/>=<sp/>const_empty_mapping.Find(1);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(field_by_id.has_value());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>Find<sp/>by<sp/>name<sp/>on<sp/>const<sp/>empty<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field_by_name<sp/>=<sp/>const_empty_mapping.Find(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(field_by_name.has_value());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>Find<sp/>by<sp/>name<sp/>parts<sp/>on<sp/>const<sp/>empty<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field_by_parts<sp/>=</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const_empty_mapping.Find(std::vector&lt;std::string&gt;{</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(field_by_parts.has_value());</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">TEST_F(NameMappingTest,<sp/>Equality)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapping1<sp/>=<sp/>MakeNameMapping();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapping2<sp/>=<sp/>MakeNameMapping();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty_mapping<sp/>=<sp/><ref refid="classiceberg_1_1NameMapping_1a466e6ed544806f724485ca62dda7fc9e" kindref="member">NameMapping::MakeEmpty</ref>();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>EXPECT_EQ(*mapping1,<sp/>*mapping2);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>EXPECT_NE(*mapping1,<sp/>*empty_mapping);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>fields;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>fields.emplace_back(</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;different&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>99,<sp/>.nested_mapping<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>different_mapping<sp/>=<sp/><ref refid="classiceberg_1_1NameMapping_1a98c55a42873ca93287da04c9717b4070" kindref="member">NameMapping::Make</ref>(<ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>(std::move(fields)));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>EXPECT_NE(*mapping1,<sp/>*different_mapping);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">TEST_F(NameMappingTest,<sp/>MappedFieldsAccess)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapping<sp/>=<sp/>MakeNameMapping();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fields<sp/>=<sp/>mapping-&gt;AsMappedFields();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>EXPECT_EQ(fields.Size(),<sp/>3);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Param<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>field_id;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_set&lt;std::string&gt;<sp/>names;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Param&gt;<sp/>params<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.field_id<sp/>=<sp/>1,<sp/>.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.field_id<sp/>=<sp/>2,<sp/>.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{.field_id<sp/>=<sp/>3,<sp/>.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>param<sp/>:<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>fields.Field(param.field_id);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(field.has_value());</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THAT(field-&gt;get().names,<sp/>testing::UnorderedElementsAreArray(param.names));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">TEST_F(NameMappingTest,<sp/>ToString)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>fields;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1});</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>nested_fields;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>nested_fields.emplace_back(MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>3});</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>nested_fields.emplace_back(MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>4});</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nested_mapping<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>(std::move(nested_fields));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(MappedField{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>2,<sp/>.nested_mapping<sp/>=<sp/>std::move(nested_mapping)});</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapping<sp/>=<sp/><ref refid="classiceberg_1_1NameMapping_1a98c55a42873ca93287da04c9717b4070" kindref="member">NameMapping::Make</ref>(std::move(fields));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expected<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;([</highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"><sp/><sp/>([foo]<sp/>-&gt;<sp/>1)</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/>([bar]<sp/>-&gt;<sp/>2,<sp/>[([hello]<sp/>-&gt;<sp/>3),<sp/>([world]<sp/>-&gt;<sp/>4)])</highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral">])&quot;;</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>EXPECT_EQ(ToString(*mapping),<sp/>expected);</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty_mapping<sp/>=<sp/><ref refid="classiceberg_1_1NameMapping_1a466e6ed544806f724485ca62dda7fc9e" kindref="member">NameMapping::MakeEmpty</ref>();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(ToString(*empty_mapping),<sp/></highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">TEST(CreateMappingTest,<sp/>FlatSchemaToMapping)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>Schema<sp/>schema(std::vector&lt;SchemaField&gt;{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expected<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>({</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1},</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>2},</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>CreateMapping(schema);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(result.has_value());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>EXPECT_EQ(result.value()-&gt;AsMappedFields(),<sp/>*expected);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">TEST(CreateMappingTest,<sp/>NestedStructSchemaToMapping)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>Schema<sp/>schema(std::vector&lt;SchemaField&gt;{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;location&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;StructType&gt;(std::vector&lt;SchemaField&gt;{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(4,<sp/></highlight><highlight class="stringliteral">&quot;latitude&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">iceberg::float32</ref>()),</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(5,<sp/></highlight><highlight class="stringliteral">&quot;longitude&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">iceberg::float32</ref>()),</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})),</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expected<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>({</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1},</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>2},</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;location&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_id<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nested_mapping<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>({</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;latitude&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>4},</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;longitude&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>5},</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})},</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>CreateMapping(schema);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(result.has_value());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>EXPECT_EQ(result.value()-&gt;AsMappedFields(),<sp/>*expected);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">TEST(CreateMappingTest,<sp/>MapSchemaToMapping)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>Schema<sp/>schema(std::vector&lt;SchemaField&gt;{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;MapType&gt;(</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(4,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(5,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">iceberg::float64</ref>()))),</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expected<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>({</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1},</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>2},</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_id<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nested_mapping<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>({</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>4},</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>5},</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})},</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>CreateMapping(schema);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(result.has_value());</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>EXPECT_EQ(result.value()-&gt;AsMappedFields(),<sp/>*expected);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">TEST(CreateMappingTest,<sp/>ListSchemaToMapping)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>Schema<sp/>schema(std::vector&lt;SchemaField&gt;{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(2,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(3,<sp/></highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;ListType&gt;(<ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()))),</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expected<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>({</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1},</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>2},</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_id<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nested_mapping<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>({</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>4},</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})},</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>CreateMapping(schema);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(result.has_value());</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>EXPECT_EQ(result.value()-&gt;AsMappedFields(),<sp/>*expected);</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>iceberg</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="iceberg/test/name_mapping_test.cc"/>
  </compounddef>
</doxygen>
