<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="decimal__test_8cc" kind="file" language="C++">
    <compoundname>decimal_test.cc</compoundname>
    <includes refid="decimal_8h" local="yes">iceberg/util/decimal.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">array</includes>
    <includes local="no">bit</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">gmock/gmock.h</includes>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="matchers_8h" local="yes">iceberg/test/matchers.h</includes>
    <includes refid="int128_8h" local="yes">iceberg/util/int128.h</includes>
    <incdepgraph>
      <node id="11">
        <label>iceberg/iceberg_export.h</label>
        <link refid="iceberg__export_8h_source"/>
      </node>
      <node id="12">
        <label>iceberg/result.h</label>
        <link refid="result_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>iceberg/test/decimal_test.cc</label>
        <link refid="decimal__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>iceberg/test/matchers.h</label>
        <link refid="matchers_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iceberg/util/decimal.h</label>
        <link refid="decimal_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>iceberg/util/formattable.h</label>
        <link refid="formattable_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>iceberg/util/int128.h</label>
        <link refid="int128_8h"/>
      </node>
      <node id="22">
        <label>iceberg/util/macros.h</label>
        <link refid="macros_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>array</label>
      </node>
      <node id="18">
        <label>bit</label>
      </node>
      <node id="23">
        <label>cassert</label>
      </node>
      <node id="4">
        <label>compare</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="13">
        <label>expected</label>
      </node>
      <node id="14">
        <label>format</label>
      </node>
      <node id="19">
        <label>gmock/gmock.h</label>
      </node>
      <node id="20">
        <label>gtest/gtest.h</label>
      </node>
      <node id="6">
        <label>iosfwd</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="8">
        <label>string_view</label>
      </node>
      <node id="9">
        <label>type_traits</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceiceberg">iceberg</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="decimal_8h" kindref="compound">iceberg/util/decimal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bit&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gmock/gmock.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/test/matchers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="int128_8h" kindref="compound">iceberg/util/int128.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">iceberg<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertDecimalFromString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Decimal&amp;<sp/>expected,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>expected_precision,<sp/>int32_t<sp/>expected_scale)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>int32_t<sp/>precision<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>int32_t<sp/>scale<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="classiceberg_1_1Decimal_1a4f84f5bdfacbd10dce52d76f73311466" kindref="member">Decimal::FromString</ref>(s,<sp/>&amp;precision,<sp/>&amp;scale);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>EXPECT_THAT(result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Decimal&amp;<sp/>actual<sp/>=<sp/>result.value();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>EXPECT_EQ(expected,<sp/>actual);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>EXPECT_EQ(expected_precision,<sp/>precision);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>EXPECT_EQ(expected_scale,<sp/>scale);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">TEST(DecimalTest,<sp/>Basics)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;234.23445&quot;</highlight><highlight class="normal">,<sp/>Decimal(23423445),<sp/>8,<sp/>5);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>std::string<sp/>string_value(</highlight><highlight class="stringliteral">&quot;-23049223942343532412&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>Decimal<sp/>result(string_value);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>Decimal<sp/>expected(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-230492239423435324));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>ASSERT_EQ(result,<sp/>expected<sp/>*<sp/>100<sp/>-<sp/>12);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>ASSERT_NE(result.high(),<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-23049223942343.532412&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>ASSERT_EQ(result,<sp/>expected<sp/>*<sp/>100<sp/>-<sp/>12);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>ASSERT_NE(result.high(),<sp/>0);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">TEST(DecimalTest,<sp/>StringStartingWithSign)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;+234.567&quot;</highlight><highlight class="normal">,<sp/>Decimal(234567),<sp/>6,<sp/>3);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;+2342394230592.232349023094&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decimal(</highlight><highlight class="stringliteral">&quot;2342394230592232349023094&quot;</highlight><highlight class="normal">),<sp/>25,<sp/>12);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;-234.567&quot;</highlight><highlight class="normal">,<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-234567&quot;</highlight><highlight class="normal">),<sp/>6,<sp/>3);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;-2342394230592.232349023094&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-2342394230592232349023094&quot;</highlight><highlight class="normal">),<sp/>25,<sp/>12);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">TEST(DecimalTest,<sp/>StringWithLeadingZeros)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;0000000000000000000000000000000.234&quot;</highlight><highlight class="normal">,<sp/>Decimal(234),<sp/>3,<sp/>3);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;0000000000000000000000000000000.23400&quot;</highlight><highlight class="normal">,<sp/>Decimal(23400),<sp/>5,<sp/>5);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;234.00&quot;</highlight><highlight class="normal">,<sp/>Decimal(23400),<sp/>5,<sp/>2);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;234.0&quot;</highlight><highlight class="normal">,<sp/>Decimal(2340),<sp/>4,<sp/>1);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;0000000&quot;</highlight><highlight class="normal">,<sp/>Decimal(0),<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;000.0000&quot;</highlight><highlight class="normal">,<sp/>Decimal(0),<sp/>4,<sp/>4);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;.00000&quot;</highlight><highlight class="normal">,<sp/>Decimal(0),<sp/>5,<sp/>5);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">TEST(DecimalTest,<sp/>DecimalWithExponent)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;1E1&quot;</highlight><highlight class="normal">,<sp/>Decimal(10),<sp/>2,<sp/>0);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;234.23445e2&quot;</highlight><highlight class="normal">,<sp/>Decimal(23423445),<sp/>8,<sp/>3);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;234.23445e-2&quot;</highlight><highlight class="normal">,<sp/>Decimal(23423445),<sp/>8,<sp/>7);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;234.23445E2&quot;</highlight><highlight class="normal">,<sp/>Decimal(23423445),<sp/>8,<sp/>3);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;234.23445E-2&quot;</highlight><highlight class="normal">,<sp/>Decimal(23423445),<sp/>8,<sp/>7);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;1.23E-8&quot;</highlight><highlight class="normal">,<sp/>Decimal(123),<sp/>3,<sp/>10);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">TEST(DecimalTest,<sp/>SmallValues)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestValue<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>expected;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>expected_precision;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>expected_scale;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tv<sp/>:<sp/>std::vector&lt;TestValue&gt;{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;12.3&quot;</highlight><highlight class="normal">,<sp/>.expected<sp/>=<sp/>123LL,<sp/>.expected_precision<sp/>=<sp/>3,<sp/>.expected_scale<sp/>=<sp/>1},</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0.00123&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>123LL,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>5},</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.23E-8&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>123LL,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>10},</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.23E-8&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>-123LL,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>10},</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.23E+3&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>1230LL,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>0},</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.23E+3&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>-1230LL,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>0},</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.23E+5&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>123000LL,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>0},</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.2345E+7&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>12345000LL,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>0},</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.23e-8&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>123LL,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>10},</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.23e-8&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>-123LL,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>10},</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.23e+3&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>1230LL,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>0},</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.23e+3&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>-1230LL,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>0},</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.23e+5&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>123000LL,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>0},</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.2345e+7&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected<sp/>=<sp/>12345000LL,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_precision<sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_scale<sp/>=<sp/>0}})<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>AssertDecimalFromString(tv.s,<sp/>Decimal(tv.expected),<sp/>tv.expected_precision,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tv.expected_scale);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">TEST(DecimalTest,<sp/>LargeValues)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;std::string,<sp/>4&gt;<sp/>string_values<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;99999999999999999999999999999999999999&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-99999999999999999999999999999999999999&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;170141183460469231731687303715884105727&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>maximum<sp/>positive<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-170141183460469231731687303715884105728&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>minimum<sp/>negative<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>s<sp/>:<sp/>string_values)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Decimal<sp/>value(s);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>printed_value<sp/>=<sp/>value.ToIntegerString();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(printed_value,<sp/>s)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>printed_value;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">TEST(DecimalTest,<sp/>TestStringRoundTrip)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::array&lt;uint64_t,<sp/>11&gt;<sp/>kTestBits<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>999,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1000,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;int32_t&gt;::max(),</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(1ull<sp/>&lt;&lt;<sp/>31),</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;uint32_t&gt;::max(),</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(1ull<sp/>&lt;&lt;<sp/>32),</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;int64_t&gt;::max(),</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(1ull<sp/>&lt;&lt;<sp/>63),</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;uint64_t&gt;::max(),</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::array&lt;int32_t,<sp/>3&gt;<sp/>kScales<sp/>=<sp/>{0,<sp/>1,<sp/>10};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>high<sp/>:<sp/>kTestBits)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>low<sp/>:<sp/>kTestBits)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Decimal<sp/>value(high,<sp/>low);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>scale<sp/>:<sp/>kScales)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>value.ToString(scale);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk())</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>convert<sp/>Decimal<sp/>to<sp/>string:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value.ToIntegerString()</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>scale:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>scale;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>round_trip<sp/>=<sp/><ref refid="classiceberg_1_1Decimal_1a4f84f5bdfacbd10dce52d76f73311466" kindref="member">Decimal::FromString</ref>(result.value());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(round_trip,<sp/>IsOk())</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>convert<sp/>string<sp/>back<sp/>to<sp/>Decimal:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result.value();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(value,<sp/>round_trip.value())</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Round<sp/>trip<sp/>failed<sp/>for<sp/>value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value.ToIntegerString()</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>scale:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>scale;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">TEST(DecimalTest,<sp/>FromStringLimits)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;1e37&quot;</highlight><highlight class="normal">,<sp/>Decimal(542101086242752217ULL,<sp/>68739955140067328ULL),</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>38,<sp/>0);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-1e37&quot;</highlight><highlight class="normal">,<sp/>Decimal(17904642987466799398ULL,<sp/>18378004118569484288ULL),<sp/>38,<sp/>0);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;9.87e37&quot;</highlight><highlight class="normal">,<sp/>Decimal(5350537721215964381ULL,<sp/>15251391175463010304ULL),<sp/>38,<sp/>0);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-9.87e37&quot;</highlight><highlight class="normal">,<sp/>Decimal(13096206352493587234ULL,<sp/>3195352898246541312ULL),<sp/>38,<sp/>0);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;12345678901234567890123456789012345678&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decimal(669260594276348691ULL,<sp/>14143994781733811022ULL),<sp/>38,<sp/>0);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;-12345678901234567890123456789012345678&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decimal(17777483479433202924ULL,<sp/>4302749291975740594ULL),<sp/>38,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;9..9&quot;<sp/>(38<sp/>times)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dec38times9pos<sp/>=<sp/>Decimal(5421010862427522170ULL,<sp/>687399551400673279ULL);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;-9..9&quot;<sp/>(38<sp/>times)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dec38times9neg<sp/>=<sp/>Decimal(13025733211282029445ULL,<sp/>17759344522308878337ULL);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;99999999999999999999999999999999999999&quot;</highlight><highlight class="normal">,<sp/>dec38times9pos,<sp/>38,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;-99999999999999999999999999999999999999&quot;</highlight><highlight class="normal">,<sp/>dec38times9neg,<sp/>38,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;9.9999999999999999999999999999999999999e37&quot;</highlight><highlight class="normal">,<sp/>dec38times9pos,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>38,<sp/>0);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;-9.9999999999999999999999999999999999999e37&quot;</highlight><highlight class="normal">,<sp/>dec38times9neg,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>38,<sp/>0);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>exponent,<sp/>many<sp/>fractional<sp/>digits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;9.9999999999999999999999999999999999999&quot;</highlight><highlight class="normal">,<sp/>dec38times9pos,<sp/>38,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>37);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;-9.9999999999999999999999999999999999999&quot;</highlight><highlight class="normal">,<sp/>dec38times9neg,<sp/>38,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>37);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;0.99999999999999999999999999999999999999&quot;</highlight><highlight class="normal">,<sp/>dec38times9pos,<sp/>38,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>38);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;-0.99999999999999999999999999999999999999&quot;</highlight><highlight class="normal">,<sp/>dec38times9neg,<sp/>38,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>38);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Negative<sp/>exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;1e-38&quot;</highlight><highlight class="normal">,<sp/>Decimal(0,<sp/>1),<sp/>1,<sp/>38);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-1e-38&quot;</highlight><highlight class="normal">,<sp/>Decimal(18446744073709551615ULL,<sp/>18446744073709551615ULL),<sp/>1,<sp/>38);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;9.99e-36&quot;</highlight><highlight class="normal">,<sp/>Decimal(0,<sp/>999),<sp/>3,<sp/>38);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-9.99e-36&quot;</highlight><highlight class="normal">,<sp/>Decimal(18446744073709551615ULL,<sp/>18446744073709550617ULL),<sp/>3,<sp/>38);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;987e-38&quot;</highlight><highlight class="normal">,<sp/>Decimal(0,<sp/>987),<sp/>3,<sp/>38);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-987e-38&quot;</highlight><highlight class="normal">,<sp/>Decimal(18446744073709551615ULL,<sp/>18446744073709550629ULL),<sp/>3,<sp/>38);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;99999999999999999999999999999999999999e-37&quot;</highlight><highlight class="normal">,<sp/>dec38times9pos,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>38,<sp/>37);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;-99999999999999999999999999999999999999e-37&quot;</highlight><highlight class="normal">,<sp/>dec38times9neg,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>38,<sp/>37);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;99999999999999999999999999999999999999e-38&quot;</highlight><highlight class="normal">,<sp/>dec38times9pos,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>38,<sp/>38);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>AssertDecimalFromString(</highlight><highlight class="stringliteral">&quot;-99999999999999999999999999999999999999e-38&quot;</highlight><highlight class="normal">,<sp/>dec38times9neg,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>38,<sp/>38);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">TEST(DecimalTest,<sp/>FromStringInvalid)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="classiceberg_1_1Decimal_1a4f84f5bdfacbd10dce52d76f73311466" kindref="member">Decimal::FromString</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>ASSERT_THAT(result,<sp/>IsError(ErrorKind::kInvalidArgument));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>ASSERT_THAT(result,<sp/>HasErrorMessage(</highlight><highlight class="stringliteral">&quot;Empty<sp/>string<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>Decimal&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>invalid_string<sp/>:</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">string</ref>&gt;{</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0.0.0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0-13-32&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-23092.235-&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-+23092.235&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;+-23092.235&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;00a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1e1a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0.00123D/3&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1.23eA8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1.23E+3A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-1.23E--5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1.2345E+++07&quot;</highlight><highlight class="normal">})<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="classiceberg_1_1Decimal_1a4f84f5bdfacbd10dce52d76f73311466" kindref="member">Decimal::FromString</ref>(invalid_string);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsError(ErrorKind::kInvalidArgument));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>HasErrorMessage(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>decimal<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>invalid_string<sp/>:</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">string</ref>&gt;{</highlight><highlight class="stringliteral">&quot;1e39&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-1e39&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;9e39&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-9e39&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;9.9e40&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-9.9e40&quot;</highlight><highlight class="normal">})<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="classiceberg_1_1Decimal_1a4f84f5bdfacbd10dce52d76f73311466" kindref="member">Decimal::FromString</ref>(invalid_string);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsError(ErrorKind::kInvalidArgument));</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>HasErrorMessage(</highlight><highlight class="stringliteral">&quot;scale<sp/>must<sp/>be<sp/>in<sp/>the<sp/>range&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">TEST(DecimalTest,<sp/>Division)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>expected_string_value(</highlight><highlight class="stringliteral">&quot;-23923094039234029&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Decimal<sp/>value(expected_string_value);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Decimal<sp/>result(value<sp/>/<sp/>3);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Decimal<sp/>expected_value(</highlight><highlight class="stringliteral">&quot;-7974364679744676&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>ASSERT_EQ(expected_value,<sp/>result);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">TEST(DecimalTest,<sp/>ToString)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ToStringCase<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>test_value;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>scale;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_string;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>t<sp/>:<sp/>std::vector&lt;ToStringCase&gt;{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>0,<sp/>.scale<sp/>=<sp/>-1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0E+1&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>0,<sp/>.scale<sp/>=<sp/>0,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>0,<sp/>.scale<sp/>=<sp/>1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0.0&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>0,<sp/>.scale<sp/>=<sp/>6,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0.000000&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>2,<sp/>.scale<sp/>=<sp/>7,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;2E-7&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>2,<sp/>.scale<sp/>=<sp/>-1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;2E+1&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>2,<sp/>.scale<sp/>=<sp/>0,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>2,<sp/>.scale<sp/>=<sp/>1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0.2&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>2,<sp/>.scale<sp/>=<sp/>6,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0.000002&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-2,<sp/>.scale<sp/>=<sp/>7,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-2E-7&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-2,<sp/>.scale<sp/>=<sp/>7,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-2E-7&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-2,<sp/>.scale<sp/>=<sp/>-1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-2E+1&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-2,<sp/>.scale<sp/>=<sp/>0,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-2&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-2,<sp/>.scale<sp/>=<sp/>1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-0.2&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-2,<sp/>.scale<sp/>=<sp/>6,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-0.000002&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-2,<sp/>.scale<sp/>=<sp/>7,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-2E-7&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>123,<sp/>.scale<sp/>=<sp/>-3,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.23E+5&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>123,<sp/>.scale<sp/>=<sp/>-1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.23E+3&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>123,<sp/>.scale<sp/>=<sp/>1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;12.3&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>123,<sp/>.scale<sp/>=<sp/>0,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>123,<sp/>.scale<sp/>=<sp/>5,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0.00123&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>123,<sp/>.scale<sp/>=<sp/>8,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0.00000123&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>123,<sp/>.scale<sp/>=<sp/>9,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.23E-7&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>123,<sp/>.scale<sp/>=<sp/>10,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.23E-8&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-123,<sp/>.scale<sp/>=<sp/>-3,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.23E+5&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-123,<sp/>.scale<sp/>=<sp/>-1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.23E+3&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-123,<sp/>.scale<sp/>=<sp/>1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-12.3&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-123,<sp/>.scale<sp/>=<sp/>0,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-123&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-123,<sp/>.scale<sp/>=<sp/>5,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-0.00123&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-123,<sp/>.scale<sp/>=<sp/>8,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-0.00000123&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-123,<sp/>.scale<sp/>=<sp/>9,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.23E-7&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-123,<sp/>.scale<sp/>=<sp/>10,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.23E-8&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1000000000,<sp/>.scale<sp/>=<sp/>-3,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.000000000E+12&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1000000000,<sp/>.scale<sp/>=<sp/>-1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.000000000E+10&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1000000000,<sp/>.scale<sp/>=<sp/>0,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1000000000&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1000000000,<sp/>.scale<sp/>=<sp/>1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;100000000.0&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1000000000,<sp/>.scale<sp/>=<sp/>5,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;10000.00000&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1000000000,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>15,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0.000001000000000&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1000000000,<sp/>.scale<sp/>=<sp/>16,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.000000000E-7&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1000000000,<sp/>.scale<sp/>=<sp/>17,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.000000000E-8&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1000000000,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>-3,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.000000000E+12&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1000000000,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.000000000E+10&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1000000000,<sp/>.scale<sp/>=<sp/>0,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1000000000&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1000000000,<sp/>.scale<sp/>=<sp/>1,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-100000000.0&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1000000000,<sp/>.scale<sp/>=<sp/>5,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-10000.00000&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1000000000,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>15,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-0.000001000000000&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1000000000,<sp/>.scale<sp/>=<sp/>16,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.000000000E-7&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1000000000,<sp/>.scale<sp/>=<sp/>17,<sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.000000000E-8&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1234567890123456789LL,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>-3,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.234567890123456789E+21&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1234567890123456789LL,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.234567890123456789E+19&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1234567890123456789LL,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1234567890123456789&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1234567890123456789LL,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;123456789012345678.9&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1234567890123456789LL,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;12345678901234.56789&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1234567890123456789LL,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>24,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0.000001234567890123456789&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>1234567890123456789LL,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>25,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1.234567890123456789E-7&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1234567890123456789LL,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>-3,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.234567890123456789E+21&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1234567890123456789LL,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.234567890123456789E+19&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1234567890123456789LL,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1234567890123456789&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1234567890123456789LL,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-123456789012345678.9&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1234567890123456789LL,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-12345678901234.56789&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1234567890123456789LL,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>24,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-0.000001234567890123456789&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{.test_value<sp/>=<sp/>-1234567890123456789LL,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scale<sp/>=<sp/>25,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expected_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-1.234567890123456789E-7&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Decimal<sp/>value(t.test_value);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>value.ToString(t.scale);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk())</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>convert<sp/>Decimal<sp/>to<sp/>string:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value.ToIntegerString()</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>scale:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t.scale;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(result.value(),<sp/>t.expected_string)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t.expected_string<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result.value();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">TEST(DecimalTest,<sp/>FromBigEndian)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>test<sp/>out<sp/>a<sp/>variety<sp/>of<sp/>scenarios:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Positive<sp/>values<sp/>that<sp/>are<sp/>left<sp/>shifted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>and<sp/>filled<sp/>in<sp/>with<sp/>the<sp/>same<sp/>bit<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Negated<sp/>of<sp/>the<sp/>positive<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Complement<sp/>of<sp/>the<sp/>positive<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>positive<sp/>values,<sp/>we<sp/>can<sp/>call<sp/>FromBigEndian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>a<sp/>length<sp/>that<sp/>is<sp/>less<sp/>than<sp/>16,<sp/>whereas<sp/>we<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pass<sp/>all<sp/>16<sp/>bytes<sp/>for<sp/>the<sp/>negative<sp/>and<sp/>complement.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>a<sp/>number<sp/>of<sp/>bit<sp/>patterns<sp/>to<sp/>increase<sp/>the<sp/>coverage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>scenarios</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WidthMinusOne<sp/>=<sp/>Decimal::kByteWidth<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>start<sp/>:<sp/>{1,<sp/>15,<sp/></highlight><highlight class="comment">/*<sp/>00001111<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>85,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>01010101<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>127<sp/></highlight><highlight class="comment">/*<sp/>01111111<sp/>*/</highlight><highlight class="normal">})<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>Decimal<sp/>value(start);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>Decimal::kByteWidth;<sp/>++ii)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>native_endian<sp/>=<sp/>value.ToBytes();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::endian::native<sp/>==<sp/>std::endian::little)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>big<sp/>endian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ranges::reverse(native_endian);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Limit<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>we<sp/>are<sp/>passing<sp/>to<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sure<sp/>that<sp/>it<sp/>works<sp/>correctly.<sp/>That&apos;s<sp/>why<sp/>all<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;start&apos;<sp/>values<sp/>don&apos;t<sp/>have<sp/>a<sp/>1<sp/>in<sp/>the<sp/>most<sp/>significant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1Decimal_1a80eb853e26b317cf250a676686566911" kindref="member">Decimal::FromBigEndian</ref>(native_endian.data()<sp/>+<sp/>WidthMinusOne<sp/>-<sp/>ii,<sp/>ii<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Decimal&amp;<sp/><ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">decimal</ref><sp/>=<sp/>result.value();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">decimal</ref>,<sp/>value);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Negate<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>negated<sp/>=<sp/>-value;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>native_endian<sp/>=<sp/>negated.ToBytes();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::endian::native<sp/>==<sp/>std::endian::little)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>big<sp/>endian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ranges::reverse(native_endian);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="classiceberg_1_1Decimal_1a80eb853e26b317cf250a676686566911" kindref="member">Decimal::FromBigEndian</ref>(native_endian.data()<sp/>+<sp/>WidthMinusOne<sp/>-<sp/>ii,<sp/>ii<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Decimal&amp;<sp/>negated_decimal<sp/>=<sp/>result.value();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(negated_decimal,<sp/>negated);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>the<sp/>complement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>complement<sp/>=<sp/>~value;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>native_endian<sp/>=<sp/>complement.ToBytes();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::endian::native<sp/>==<sp/>std::endian::little)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>big<sp/>endian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ranges::reverse(native_endian);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="classiceberg_1_1Decimal_1a80eb853e26b317cf250a676686566911" kindref="member">Decimal::FromBigEndian</ref>(native_endian.data(),<sp/>Decimal::kByteWidth);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Decimal&amp;<sp/>complement_decimal<sp/>=<sp/>result.value();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(complement_decimal,<sp/>complement);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&lt;&lt;=<sp/>2;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>Decimal(start);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">TEST(DecimalTest,<sp/>FromBigEndianInvalid)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>ASSERT_THAT(<ref refid="classiceberg_1_1Decimal_1a80eb853e26b317cf250a676686566911" kindref="member">Decimal::FromBigEndian</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>-1),<sp/>IsError(ErrorKind::kInvalidArgument));</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>ASSERT_THAT(<ref refid="classiceberg_1_1Decimal_1a80eb853e26b317cf250a676686566911" kindref="member">Decimal::FromBigEndian</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>Decimal::kByteWidth<sp/>+<sp/>1),</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsError(ErrorKind::kInvalidArgument));</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal">TEST(DecimalTest,<sp/>ToBigEndian)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>high_values<sp/>=<sp/>{0,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INT32_MAX,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INT32_MIN,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(INT32_MAX)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(INT32_MIN)<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INT64_MAX,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INT64_MIN};</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>low_values<sp/>=<sp/>{0,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>255,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT32_MAX,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(UINT32_MAX)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(UINT32_MAX)<sp/>+<sp/>2,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(UINT32_MAX)<sp/>+<sp/>3,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(UINT32_MAX)<sp/>+<sp/>4,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(UINT32_MAX)<sp/>+<sp/>5,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(UINT32_MAX)<sp/>+<sp/>6,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(UINT32_MAX)<sp/>+<sp/>7,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(UINT32_MAX)<sp/>+<sp/>8,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT64_MAX};</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>high<sp/>:<sp/>high_values)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>low<sp/>:<sp/>low_values)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Decimal<sp/><ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">decimal</ref>(high,<sp/>low);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bytes<sp/>=<sp/><ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">decimal</ref>.ToBigEndian();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="classiceberg_1_1Decimal_1a80eb853e26b317cf250a676686566911" kindref="member">Decimal::FromBigEndian</ref>(bytes.data(),<sp/>bytes.size());</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(result.value(),<sp/><ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">decimal</ref>);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int128_t<sp/>value<sp/>:<sp/>std::vector&lt;int128_t&gt;{-INT64_MAX,<sp/>-INT32_MAX,<sp/>-255,<sp/>-1,<sp/>0,<sp/>1,<sp/>255,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>256,<sp/>INT32_MAX,<sp/>INT64_MAX})<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>Decimal<sp/><ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">decimal</ref>(value);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bytes<sp/>=<sp/><ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">decimal</ref>.ToBigEndian();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="classiceberg_1_1Decimal_1a80eb853e26b317cf250a676686566911" kindref="member">Decimal::FromBigEndian</ref>(bytes.data(),<sp/>bytes.size());</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(result.value(),<sp/><ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">decimal</ref>);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">TEST(DecimalTestFunctionality,<sp/>Multiply)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(60501),<sp/>Decimal(301)<sp/>*<sp/>Decimal(201));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(-60501),<sp/>Decimal(-301)<sp/>*<sp/>Decimal(201));</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(-60501),<sp/>Decimal(301)<sp/>*<sp/>Decimal(-201));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(60501),<sp/>Decimal(-301)<sp/>*<sp/>Decimal(-201));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Edge<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>std::vector&lt;int128_t&gt;{-INT64_MAX,<sp/>-INT32_MAX,<sp/>0,<sp/>INT32_MAX,<sp/>INT64_MAX})<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>:</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int128_t&gt;{-INT32_MAX,<sp/>-32,<sp/>-2,<sp/>-1,<sp/>0,<sp/>1,<sp/>2,<sp/>32,<sp/>INT32_MAX})<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Decimal<sp/>decimal_x(x);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Decimal<sp/>decimal_y(y);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Decimal<sp/>result<sp/>=<sp/>decimal_x<sp/>*<sp/>decimal_y;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(Decimal(x<sp/>*<sp/>y),<sp/>result)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>x:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>decimal_x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>y:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>decimal_y;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal">TEST(DecimalTestFunctionality,<sp/>Divide)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(66),<sp/>Decimal(20100)<sp/>/<sp/>Decimal(301));</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(-66),<sp/>Decimal(-20100)<sp/>/<sp/>Decimal(301));</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(-66),<sp/>Decimal(20100)<sp/>/<sp/>Decimal(-301));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(66),<sp/>Decimal(-20100)<sp/>/<sp/>Decimal(-301));</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>std::vector&lt;int128_t&gt;{-INT64_MAX,<sp/>-INT32_MAX,<sp/>0,<sp/>INT32_MAX,<sp/>INT64_MAX})<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>:<sp/>std::vector&lt;int128_t&gt;{-INT32_MAX,<sp/>-32,<sp/>-2,<sp/>-1,<sp/>1,<sp/>2,<sp/>32,<sp/>INT32_MAX})<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Decimal<sp/>decimal_x(x);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Decimal<sp/>decimal_y(y);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Decimal<sp/>result<sp/>=<sp/>decimal_x<sp/>/<sp/>decimal_y;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(Decimal(x<sp/>/<sp/>y),<sp/>result)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>x:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>decimal_x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>y:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>decimal_y;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal">TEST(DecimalTestFunctionality,<sp/>Modulo)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(234),<sp/>Decimal(20100)<sp/>%<sp/>Decimal(301));</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(-234),<sp/>Decimal(-20100)<sp/>%<sp/>Decimal(301));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(234),<sp/>Decimal(20100)<sp/>%<sp/>Decimal(-301));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(-234),<sp/>Decimal(-20100)<sp/>%<sp/>Decimal(-301));</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>some<sp/>edge<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>std::vector&lt;int128_t&gt;{-INT64_MAX,<sp/>-INT32_MAX,<sp/>0,<sp/>INT32_MAX,<sp/>INT64_MAX})<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>:<sp/>std::vector&lt;int128_t&gt;{-INT32_MAX,<sp/>-32,<sp/>-2,<sp/>-1,<sp/>1,<sp/>2,<sp/>32,<sp/>INT32_MAX})<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Decimal<sp/>decimal_x(x);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Decimal<sp/>decimal_y(y);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Decimal<sp/>result<sp/>=<sp/>decimal_x<sp/>%<sp/>decimal_y;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(Decimal(x<sp/>%<sp/>y),<sp/>result)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>x:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>decimal_x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>y:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>decimal_y;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">TEST(DecimalTestFunctionality,<sp/>Sign)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>Decimal(999999).Sign());</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>ASSERT_EQ(-1,<sp/>Decimal(-999999).Sign());</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>Decimal(0).Sign());</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal">TEST(DecimalTestFunctionality,<sp/>FitsInPrecision)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">).FitsInPrecision(1));</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Decimal(</highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">).FitsInPrecision(1));</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Decimal(</highlight><highlight class="stringliteral">&quot;-9&quot;</highlight><highlight class="normal">).FitsInPrecision(1));</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(Decimal(</highlight><highlight class="stringliteral">&quot;10&quot;</highlight><highlight class="normal">).FitsInPrecision(1));</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(Decimal(</highlight><highlight class="stringliteral">&quot;-10&quot;</highlight><highlight class="normal">).FitsInPrecision(1));</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">).FitsInPrecision(2));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Decimal(</highlight><highlight class="stringliteral">&quot;10&quot;</highlight><highlight class="normal">).FitsInPrecision(2));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Decimal(</highlight><highlight class="stringliteral">&quot;-10&quot;</highlight><highlight class="normal">).FitsInPrecision(2));</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Decimal(</highlight><highlight class="stringliteral">&quot;99&quot;</highlight><highlight class="normal">).FitsInPrecision(2));</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Decimal(</highlight><highlight class="stringliteral">&quot;-99&quot;</highlight><highlight class="normal">).FitsInPrecision(2));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(Decimal(</highlight><highlight class="stringliteral">&quot;100&quot;</highlight><highlight class="normal">).FitsInPrecision(2));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(Decimal(</highlight><highlight class="stringliteral">&quot;-100&quot;</highlight><highlight class="normal">).FitsInPrecision(2));</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>std::string<sp/>max_nines(Decimal::kMaxPrecision,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Decimal(max_nines).FitsInPrecision(Decimal::kMaxPrecision));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(Decimal(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>max_nines).FitsInPrecision(Decimal::kMaxPrecision));</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>std::string<sp/>max_zeros(Decimal::kMaxPrecision,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(Decimal(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>+<sp/>max_zeros).FitsInPrecision(Decimal::kMaxPrecision));</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>ASSERT_FALSE(Decimal(</highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal"><sp/>+<sp/>max_zeros).FitsInPrecision(Decimal::kMaxPrecision));</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">TEST(DecimalTest,<sp/>LeftShift)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check<sp/>=<sp/>[](int128_t<sp/>x,<sp/>uint32_t<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expected<sp/>=<sp/>Decimal(x<sp/>&lt;&lt;<sp/>bits);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>actual<sp/>=<sp/>Decimal(x)<sp/>&lt;&lt;<sp/>bits;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(actual.low(),<sp/>expected.low());</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(actual.high(),<sp/>expected.high());</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>0);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>63);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>127);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>check(123,<sp/>0);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>check(123,<sp/>1);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>check(123,<sp/>63);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>check(123,<sp/>64);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>check(123,<sp/>120);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;199999999999998&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;99999999999999&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;3435973836799965640261632&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;99999999999999&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>35);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;120892581961461708544797985370825293824&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;99999999999999&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>80);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;1234567890123456789012&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>0);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;2469135780246913578024&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;88959991838777271103427858320412639232&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>56);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>check(-123,<sp/>0);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>check(-123,<sp/>1);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>check(-123,<sp/>63);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>check(-123,<sp/>64);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>check(-123,<sp/>120);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-199999999999998&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-99999999999999&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-3435973836799965640261632&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-99999999999999&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>35);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-120892581961461708544797985370825293824&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-99999999999999&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>80);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-1234567890123456789012&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>0);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-2469135780246913578024&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-88959991838777271103427858320412639232&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>56);</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal">TEST(DecimalTest,<sp/>RightShift)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>0);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>63);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>127);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>0);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>63);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>127);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>0);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>63);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>127);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;1096516&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>50);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;66&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>64);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>69);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>71);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>127);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-1096517&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>50);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-67&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>64);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-3&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>69);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>71);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(</highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-1234567890123456789012&quot;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>127);</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal">TEST(DecimalTest,<sp/>Negate)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check<sp/>=<sp/>[](Decimal<sp/>pos,<sp/>Decimal<sp/>neg)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-pos,<sp/>neg);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-neg,<sp/>pos);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>check(Decimal(0,<sp/>0),<sp/>Decimal(0,<sp/>0));</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>check(Decimal(0,<sp/>1),<sp/>Decimal(-1,<sp/>0xFFFFFFFFFFFFFFFFULL));</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>check(Decimal(0,<sp/>2),<sp/>Decimal(-1,<sp/>0xFFFFFFFFFFFFFFFEULL));</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>check(Decimal(0,<sp/>0x8000000000000000ULL),<sp/>Decimal(-1,<sp/>0x8000000000000000ULL));</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>check(Decimal(0,<sp/>0xFFFFFFFFFFFFFFFFULL),<sp/>Decimal(-1,<sp/>1));</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>check(Decimal(12,<sp/>0),<sp/>Decimal(-12,<sp/>0));</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>check(Decimal(12,<sp/>1),<sp/>Decimal(-13,<sp/>0xFFFFFFFFFFFFFFFFULL));</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>check(Decimal(12,<sp/>0xFFFFFFFFFFFFFFFFULL),<sp/>Decimal(-13,<sp/>1));</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal">TEST(DecimalTest,<sp/>Rescale)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(11100),<sp/>Decimal(111).Rescale(0,<sp/>2).value());</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(111),<sp/>Decimal(11100).Rescale(2,<sp/>0).value());</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(5),<sp/>Decimal(500000).Rescale(6,<sp/>1).value());</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Decimal(500000),<sp/>Decimal(5).Rescale(1,<sp/>6).value());</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>ASSERT_THAT(Decimal(5555555).Rescale(6,<sp/>1),<sp/>IsError(ErrorKind::kInvalid));</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal">TEST(DecimalTest,<sp/>Compare)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>max<sp/>positive<sp/>unscaled<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>10^38<sp/>-<sp/>1<sp/>scale<sp/>cause<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;99999999999999999999999999999999999999&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decimal(</highlight><highlight class="stringliteral">&quot;99999999999999999999999999999999999999&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::greater);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>10^37<sp/>-<sp/>1<sp/>scale<sp/>no<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;9999999999999999999999999999999999999&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decimal(</highlight><highlight class="stringliteral">&quot;99999999999999999999999999999999999999&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::less);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>min<sp/>negative<sp/>unscaled<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-10^38<sp/>+<sp/>1<sp/>scale<sp/>cause<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;-99999999999999999999999999999999999999&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-99999999999999999999999999999999999999&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::less);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-10^37<sp/>+<sp/>1<sp/>scale<sp/>no<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;-9999999999999999999999999999999999999&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-99999999999999999999999999999999999999&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::greater);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>equal<sp/>values<sp/>with<sp/>different<sp/>scales</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;123456789&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1234567890&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::equivalent);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;-1234567890&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-123456789&quot;</highlight><highlight class="normal">),<sp/>3,<sp/>2),</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::equivalent);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>values<sp/>with<sp/>different<sp/>scales</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;123456788&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;1234567890&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::less);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;-1234567890&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-123456788&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::less);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>values<sp/>with<sp/>same<sp/>scales</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;123456790&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;123456789&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>2),</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::greater);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;-123456790&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-123456789&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>2),</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::less);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>signs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;123456789&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;-123456789&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::greater);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;-123456789&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;123456789&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::less);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>zero<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::equivalent);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;123456789&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::less);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>ASSERT_EQ(<ref refid="classiceberg_1_1Decimal_1abe0ed62190e2ebcacc4b6690e7d2094b" kindref="member">Decimal::Compare</ref>(Decimal(</highlight><highlight class="stringliteral">&quot;-123456789&quot;</highlight><highlight class="normal">),<sp/>Decimal(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::partial_ordering::less);</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>iceberg</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="iceberg/test/decimal_test.cc"/>
  </compounddef>
</doxygen>
