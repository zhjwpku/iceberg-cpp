<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceiceberg" kind="namespace" language="C++">
    <compoundname>iceberg</compoundname>
    <innerclass refid="classiceberg_1_1And" prot="public">iceberg::And</innerclass>
    <innerclass refid="classiceberg_1_1ArrayLike" prot="public">iceberg::ArrayLike</innerclass>
    <innerclass refid="classiceberg_1_1ArrowArrayArrayLike" prot="public">iceberg::ArrowArrayArrayLike</innerclass>
    <innerclass refid="classiceberg_1_1ArrowArrayMapLike" prot="public">iceberg::ArrowArrayMapLike</innerclass>
    <innerclass refid="classiceberg_1_1ArrowArrayStructLike" prot="public">iceberg::ArrowArrayStructLike</innerclass>
    <innerclass refid="classiceberg_1_1BaseInheritableMetadata" prot="public">iceberg::BaseInheritableMetadata</innerclass>
    <innerclass refid="classiceberg_1_1BasicLiteralTest" prot="public">iceberg::BasicLiteralTest</innerclass>
    <innerclass refid="structiceberg_1_1BasicLiteralTestParam" prot="public">iceberg::BasicLiteralTestParam</innerclass>
    <innerclass refid="classiceberg_1_1BinaryType" prot="public">iceberg::BinaryType</innerclass>
    <innerclass refid="structiceberg_1_1BlobMetadata" prot="public">iceberg::BlobMetadata</innerclass>
    <innerclass refid="classiceberg_1_1BooleanType" prot="public">iceberg::BooleanType</innerclass>
    <innerclass refid="classiceberg_1_1Bound" prot="public">iceberg::Bound</innerclass>
    <innerclass refid="classiceberg_1_1BoundLiteralPredicate" prot="public">iceberg::BoundLiteralPredicate</innerclass>
    <innerclass refid="classiceberg_1_1BoundPredicate" prot="public">iceberg::BoundPredicate</innerclass>
    <innerclass refid="classiceberg_1_1BoundReference" prot="public">iceberg::BoundReference</innerclass>
    <innerclass refid="classiceberg_1_1BoundSetPredicate" prot="public">iceberg::BoundSetPredicate</innerclass>
    <innerclass refid="classiceberg_1_1BoundTerm" prot="public">iceberg::BoundTerm</innerclass>
    <innerclass refid="classiceberg_1_1BoundTransform" prot="public">iceberg::BoundTransform</innerclass>
    <innerclass refid="classiceberg_1_1BoundUnaryPredicate" prot="public">iceberg::BoundUnaryPredicate</innerclass>
    <innerclass refid="classiceberg_1_1BucketTransform" prot="public">iceberg::BucketTransform</innerclass>
    <innerclass refid="classiceberg_1_1BucketTransformTest" prot="public">iceberg::BucketTransformTest</innerclass>
    <innerclass refid="classiceberg_1_1BucketUtils" prot="public">iceberg::BucketUtils</innerclass>
    <innerclass refid="classiceberg_1_1CastLiteralTest" prot="public">iceberg::CastLiteralTest</innerclass>
    <innerclass refid="structiceberg_1_1CastLiteralTestParam" prot="public">iceberg::CastLiteralTestParam</innerclass>
    <innerclass refid="classiceberg_1_1Catalog" prot="public">iceberg::Catalog</innerclass>
    <innerclass refid="classiceberg_1_1ComparisonLiteralTest" prot="public">iceberg::ComparisonLiteralTest</innerclass>
    <innerclass refid="structiceberg_1_1ComparisonLiteralTestParam" prot="public">iceberg::ComparisonLiteralTestParam</innerclass>
    <innerclass refid="classiceberg_1_1ConfigBase" prot="public">iceberg::ConfigBase</innerclass>
    <innerclass refid="classiceberg_1_1Conversions" prot="public">iceberg::Conversions</innerclass>
    <innerclass refid="classiceberg_1_1CopyInheritableMetadata" prot="public">iceberg::CopyInheritableMetadata</innerclass>
    <innerclass refid="structiceberg_1_1DataFile" prot="public">iceberg::DataFile</innerclass>
    <innerclass refid="structiceberg_1_1DataOperation" prot="public">iceberg::DataOperation</innerclass>
    <innerclass refid="classiceberg_1_1DataTableScan" prot="public">iceberg::DataTableScan</innerclass>
    <innerclass refid="structiceberg_1_1DateParts" prot="public">iceberg::DateParts</innerclass>
    <innerclass refid="classiceberg_1_1DateType" prot="public">iceberg::DateType</innerclass>
    <innerclass refid="classiceberg_1_1DayTransform" prot="public">iceberg::DayTransform</innerclass>
    <innerclass refid="classiceberg_1_1DayTransformTest" prot="public">iceberg::DayTransformTest</innerclass>
    <innerclass refid="classiceberg_1_1Decimal" prot="public">iceberg::Decimal</innerclass>
    <innerclass refid="classiceberg_1_1DecimalType" prot="public">iceberg::DecimalType</innerclass>
    <innerclass refid="structiceberg_1_1DefaultError" prot="public">iceberg::DefaultError</innerclass>
    <innerclass refid="classiceberg_1_1DoubleType" prot="public">iceberg::DoubleType</innerclass>
    <innerclass refid="classiceberg_1_1EmptyInheritableMetadata" prot="public">iceberg::EmptyInheritableMetadata</innerclass>
    <innerclass refid="structiceberg_1_1Error" prot="public">iceberg::Error</innerclass>
    <innerclass refid="classiceberg_1_1Expression" prot="public">iceberg::Expression</innerclass>
    <innerclass refid="classiceberg_1_1Expressions" prot="public">iceberg::Expressions</innerclass>
    <innerclass refid="classiceberg_1_1False" prot="public">iceberg::False</innerclass>
    <innerclass refid="structiceberg_1_1FieldProjection" prot="public">iceberg::FieldProjection</innerclass>
    <innerclass refid="classiceberg_1_1FileIO" prot="public">iceberg::FileIO</innerclass>
    <innerclass refid="classiceberg_1_1FileScanTask" prot="public">iceberg::FileScanTask</innerclass>
    <innerclass refid="classiceberg_1_1FileScanTaskTest" prot="public">iceberg::FileScanTaskTest</innerclass>
    <innerclass refid="classiceberg_1_1FixedType" prot="public">iceberg::FixedType</innerclass>
    <innerclass refid="classiceberg_1_1FloatType" prot="public">iceberg::FloatType</innerclass>
    <innerclass refid="structiceberg_1_1FromArrowSchemaParam" prot="public">iceberg::FromArrowSchemaParam</innerclass>
    <innerclass refid="classiceberg_1_1FromArrowSchemaTest" prot="public">iceberg::FromArrowSchemaTest</innerclass>
    <innerclass refid="classiceberg_1_1GZipDecompressor" prot="public">iceberg::GZipDecompressor</innerclass>
    <innerclass refid="classiceberg_1_1GZipTest" prot="public">iceberg::GZipTest</innerclass>
    <innerclass refid="classiceberg_1_1HasValueMatcher" prot="public">iceberg::HasValueMatcher</innerclass>
    <innerclass refid="classiceberg_1_1HourTransform" prot="public">iceberg::HourTransform</innerclass>
    <innerclass refid="classiceberg_1_1HourTransformTest" prot="public">iceberg::HourTransformTest</innerclass>
    <innerclass refid="classiceberg_1_1IcebergError" prot="public">iceberg::IcebergError</innerclass>
    <innerclass refid="classiceberg_1_1IdentityTransform" prot="public">iceberg::IdentityTransform</innerclass>
    <innerclass refid="classiceberg_1_1IdToFieldVisitor" prot="public">iceberg::IdToFieldVisitor</innerclass>
    <innerclass refid="classiceberg_1_1InheritableMetadata" prot="public">iceberg::InheritableMetadata</innerclass>
    <innerclass refid="classiceberg_1_1InheritableMetadataFactory" prot="public">iceberg::InheritableMetadataFactory</innerclass>
    <innerclass refid="classiceberg_1_1InMemoryCatalog" prot="public">iceberg::InMemoryCatalog</innerclass>
    <innerclass refid="classiceberg_1_1InMemoryCatalogTest" prot="public">iceberg::InMemoryCatalogTest</innerclass>
    <innerclass refid="classiceberg_1_1InMemoryNamespace" prot="public">iceberg::InMemoryNamespace</innerclass>
    <innerclass refid="classiceberg_1_1IntType" prot="public">iceberg::IntType</innerclass>
    <innerclass refid="classiceberg_1_1Lazy" prot="public">iceberg::Lazy</innerclass>
    <innerclass refid="classiceberg_1_1ListType" prot="public">iceberg::ListType</innerclass>
    <innerclass refid="classiceberg_1_1Literal" prot="public">iceberg::Literal</innerclass>
    <innerclass refid="classiceberg_1_1LiteralCaster" prot="public">iceberg::LiteralCaster</innerclass>
    <innerclass refid="structiceberg_1_1LiteralParam" prot="public">iceberg::LiteralParam</innerclass>
    <innerclass refid="classiceberg_1_1LiteralSerDeParam" prot="public">iceberg::LiteralSerDeParam</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits" prot="public">iceberg::LiteralTraits</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kBinary_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kBinary &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kBoolean_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kBoolean &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kDate_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kDate &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kDecimal_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kDecimal &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kDouble_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kDouble &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kFixed_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kFixed &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kFloat_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kFloat &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kInt_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kInt &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kLong_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kLong &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kString_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kString &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kTime_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kTime &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kTimestamp_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kTimestamp &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kTimestampTz_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kTimestampTz &gt;</innerclass>
    <innerclass refid="structiceberg_1_1LiteralTraits_3_01TypeId_1_1kUuid_01_4" prot="public">iceberg::LiteralTraits&lt; TypeId::kUuid &gt;</innerclass>
    <innerclass refid="classiceberg_1_1LocalFileIOTest" prot="public">iceberg::LocalFileIOTest</innerclass>
    <innerclass refid="classiceberg_1_1LocationProvider" prot="public">iceberg::LocationProvider</innerclass>
    <innerclass refid="classiceberg_1_1LongType" prot="public">iceberg::LongType</innerclass>
    <innerclass refid="classiceberg_1_1ManifestAdapter" prot="public">iceberg::ManifestAdapter</innerclass>
    <innerclass refid="structiceberg_1_1ManifestEntry" prot="public">iceberg::ManifestEntry</innerclass>
    <innerclass refid="classiceberg_1_1ManifestEntryAdapter" prot="public">iceberg::ManifestEntryAdapter</innerclass>
    <innerclass refid="classiceberg_1_1ManifestEntryAdapterV1" prot="public">iceberg::ManifestEntryAdapterV1</innerclass>
    <innerclass refid="classiceberg_1_1ManifestEntryAdapterV2" prot="public">iceberg::ManifestEntryAdapterV2</innerclass>
    <innerclass refid="classiceberg_1_1ManifestEntryAdapterV3" prot="public">iceberg::ManifestEntryAdapterV3</innerclass>
    <innerclass refid="structiceberg_1_1ManifestFile" prot="public">iceberg::ManifestFile</innerclass>
    <innerclass refid="classiceberg_1_1ManifestFileAdapter" prot="public">iceberg::ManifestFileAdapter</innerclass>
    <innerclass refid="classiceberg_1_1ManifestFileAdapterV1" prot="public">iceberg::ManifestFileAdapterV1</innerclass>
    <innerclass refid="classiceberg_1_1ManifestFileAdapterV2" prot="public">iceberg::ManifestFileAdapterV2</innerclass>
    <innerclass refid="classiceberg_1_1ManifestFileAdapterV3" prot="public">iceberg::ManifestFileAdapterV3</innerclass>
    <innerclass refid="classiceberg_1_1ManifestFileStructLike" prot="public">iceberg::ManifestFileStructLike</innerclass>
    <innerclass refid="structiceberg_1_1ManifestList" prot="public">iceberg::ManifestList</innerclass>
    <innerclass refid="classiceberg_1_1ManifestListReader" prot="public">iceberg::ManifestListReader</innerclass>
    <innerclass refid="classiceberg_1_1ManifestListReaderImpl" prot="public">iceberg::ManifestListReaderImpl</innerclass>
    <innerclass refid="classiceberg_1_1ManifestListReaderWriterTestBase" prot="public">iceberg::ManifestListReaderWriterTestBase</innerclass>
    <innerclass refid="classiceberg_1_1ManifestListReaderWriterV1Test" prot="public">iceberg::ManifestListReaderWriterV1Test</innerclass>
    <innerclass refid="classiceberg_1_1ManifestListReaderWriterV2Test" prot="public">iceberg::ManifestListReaderWriterV2Test</innerclass>
    <innerclass refid="classiceberg_1_1ManifestListWriter" prot="public">iceberg::ManifestListWriter</innerclass>
    <innerclass refid="classiceberg_1_1ManifestReader" prot="public">iceberg::ManifestReader</innerclass>
    <innerclass refid="classiceberg_1_1ManifestReaderImpl" prot="public">iceberg::ManifestReaderImpl</innerclass>
    <innerclass refid="classiceberg_1_1ManifestReaderTestBase" prot="public">iceberg::ManifestReaderTestBase</innerclass>
    <innerclass refid="classiceberg_1_1ManifestReaderV1Test" prot="public">iceberg::ManifestReaderV1Test</innerclass>
    <innerclass refid="classiceberg_1_1ManifestReaderV2Test" prot="public">iceberg::ManifestReaderV2Test</innerclass>
    <innerclass refid="classiceberg_1_1ManifestWriter" prot="public">iceberg::ManifestWriter</innerclass>
    <innerclass refid="classiceberg_1_1MapLike" prot="public">iceberg::MapLike</innerclass>
    <innerclass refid="structiceberg_1_1MappedField" prot="public">iceberg::MappedField</innerclass>
    <innerclass refid="classiceberg_1_1MappedFields" prot="public">iceberg::MappedFields</innerclass>
    <innerclass refid="classiceberg_1_1MapType" prot="public">iceberg::MapType</innerclass>
    <innerclass refid="structiceberg_1_1MetadataColumns" prot="public">iceberg::MetadataColumns</innerclass>
    <innerclass refid="classiceberg_1_1MetadataIOTest" prot="public">iceberg::MetadataIOTest</innerclass>
    <innerclass refid="structiceberg_1_1MetadataLogEntry" prot="public">iceberg::MetadataLogEntry</innerclass>
    <innerclass refid="structiceberg_1_1Metrics" prot="public">iceberg::Metrics</innerclass>
    <innerclass refid="classiceberg_1_1MockCatalog" prot="public">iceberg::MockCatalog</innerclass>
    <innerclass refid="classiceberg_1_1MonthTransform" prot="public">iceberg::MonthTransform</innerclass>
    <innerclass refid="classiceberg_1_1MonthTransformTest" prot="public">iceberg::MonthTransformTest</innerclass>
    <innerclass refid="classiceberg_1_1NamedReference" prot="public">iceberg::NamedReference</innerclass>
    <innerclass refid="classiceberg_1_1NameMapping" prot="public">iceberg::NameMapping</innerclass>
    <innerclass refid="classiceberg_1_1NameMappingTest" prot="public">iceberg::NameMappingTest</innerclass>
    <innerclass refid="structiceberg_1_1Namespace" prot="public">iceberg::Namespace</innerclass>
    <innerclass refid="classiceberg_1_1NameToIdVisitor" prot="public">iceberg::NameToIdVisitor</innerclass>
    <innerclass refid="classiceberg_1_1NestedType" prot="public">iceberg::NestedType</innerclass>
    <innerclass refid="classiceberg_1_1Not" prot="public">iceberg::Not</innerclass>
    <innerclass refid="classiceberg_1_1NullLiteralTransformTest" prot="public">iceberg::NullLiteralTransformTest</innerclass>
    <innerclass refid="classiceberg_1_1Or" prot="public">iceberg::Or</innerclass>
    <innerclass refid="classiceberg_1_1PartitionField" prot="public">iceberg::PartitionField</innerclass>
    <innerclass refid="structiceberg_1_1PartitionFieldSummary" prot="public">iceberg::PartitionFieldSummary</innerclass>
    <innerclass refid="classiceberg_1_1PartitionFieldSummaryArrayLike" prot="public">iceberg::PartitionFieldSummaryArrayLike</innerclass>
    <innerclass refid="classiceberg_1_1PartitionFieldSummaryStructLike" prot="public">iceberg::PartitionFieldSummaryStructLike</innerclass>
    <innerclass refid="classiceberg_1_1PartitionSpec" prot="public">iceberg::PartitionSpec</innerclass>
    <innerclass refid="structiceberg_1_1PartitionStatisticsFile" prot="public">iceberg::PartitionStatisticsFile</innerclass>
    <innerclass refid="classiceberg_1_1Predicate" prot="public">iceberg::Predicate</innerclass>
    <innerclass refid="classiceberg_1_1PredicateTest" prot="public">iceberg::PredicateTest</innerclass>
    <innerclass refid="classiceberg_1_1PrimitiveType" prot="public">iceberg::PrimitiveType</innerclass>
    <innerclass refid="classiceberg_1_1PruneColumnVisitor" prot="public">iceberg::PruneColumnVisitor</innerclass>
    <innerclass refid="classiceberg_1_1Reader" prot="public">iceberg::Reader</innerclass>
    <innerclass refid="structiceberg_1_1ReaderFactoryRegistry" prot="public">iceberg::ReaderFactoryRegistry</innerclass>
    <innerclass refid="structiceberg_1_1ReaderOptions" prot="public">iceberg::ReaderOptions</innerclass>
    <innerclass refid="classiceberg_1_1Reference" prot="public">iceberg::Reference</innerclass>
    <innerclass refid="classiceberg_1_1ResultMatcher" prot="public">iceberg::ResultMatcher</innerclass>
    <innerclass refid="classiceberg_1_1ScanTask" prot="public">iceberg::ScanTask</innerclass>
    <innerclass refid="classiceberg_1_1Schema" prot="public">iceberg::Schema</innerclass>
    <innerclass refid="classiceberg_1_1SchemaField" prot="public">iceberg::SchemaField</innerclass>
    <innerclass refid="structiceberg_1_1SchemaJsonParam" prot="public">iceberg::SchemaJsonParam</innerclass>
    <innerclass refid="structiceberg_1_1SchemaProjection" prot="public">iceberg::SchemaProjection</innerclass>
    <innerclass refid="structiceberg_1_1Snapshot" prot="public">iceberg::Snapshot</innerclass>
    <innerclass refid="structiceberg_1_1SnapshotLogEntry" prot="public">iceberg::SnapshotLogEntry</innerclass>
    <innerclass refid="structiceberg_1_1SnapshotRef" prot="public">iceberg::SnapshotRef</innerclass>
    <innerclass refid="structiceberg_1_1SnapshotSummaryFields" prot="public">iceberg::SnapshotSummaryFields</innerclass>
    <innerclass refid="classiceberg_1_1SnapshotTest" prot="public">iceberg::SnapshotTest</innerclass>
    <innerclass refid="classiceberg_1_1SortField" prot="public">iceberg::SortField</innerclass>
    <innerclass refid="classiceberg_1_1SortOrder" prot="public">iceberg::SortOrder</innerclass>
    <innerclass refid="structiceberg_1_1Split" prot="public">iceberg::Split</innerclass>
    <innerclass refid="structiceberg_1_1StatisticsFile" prot="public">iceberg::StatisticsFile</innerclass>
    <innerclass refid="structiceberg_1_1StringHash" prot="public">iceberg::StringHash</innerclass>
    <innerclass refid="classiceberg_1_1StringType" prot="public">iceberg::StringType</innerclass>
    <innerclass refid="classiceberg_1_1StringUtils" prot="public">iceberg::StringUtils</innerclass>
    <innerclass refid="classiceberg_1_1StructLike" prot="public">iceberg::StructLike</innerclass>
    <innerclass refid="classiceberg_1_1StructType" prot="public">iceberg::StructType</innerclass>
    <innerclass refid="classiceberg_1_1Table" prot="public">iceberg::Table</innerclass>
    <innerclass refid="structiceberg_1_1TableIdentifier" prot="public">iceberg::TableIdentifier</innerclass>
    <innerclass refid="structiceberg_1_1TableMetadata" prot="public">iceberg::TableMetadata</innerclass>
    <innerclass refid="classiceberg_1_1TableMetadataBuilder" prot="public">iceberg::TableMetadataBuilder</innerclass>
    <innerclass refid="classiceberg_1_1TableMetadataBuilderTest" prot="public">iceberg::TableMetadataBuilderTest</innerclass>
    <innerclass refid="structiceberg_1_1TableMetadataUtil" prot="public">iceberg::TableMetadataUtil</innerclass>
    <innerclass refid="classiceberg_1_1TableProperties" prot="public">iceberg::TableProperties</innerclass>
    <innerclass refid="classiceberg_1_1TableRequirement" prot="public">iceberg::TableRequirement</innerclass>
    <innerclass refid="classiceberg_1_1TableRequirements" prot="public">iceberg::TableRequirements</innerclass>
    <innerclass refid="classiceberg_1_1TableScan" prot="public">iceberg::TableScan</innerclass>
    <innerclass refid="classiceberg_1_1TableScanBuilder" prot="public">iceberg::TableScanBuilder</innerclass>
    <innerclass refid="structiceberg_1_1TableScanContext" prot="public">iceberg::TableScanContext</innerclass>
    <innerclass refid="classiceberg_1_1TableUpdate" prot="public">iceberg::TableUpdate</innerclass>
    <innerclass refid="classiceberg_1_1TableUpdateContext" prot="public">iceberg::TableUpdateContext</innerclass>
    <innerclass refid="classiceberg_1_1TempFileTestBase" prot="public">iceberg::TempFileTestBase</innerclass>
    <innerclass refid="classiceberg_1_1TemporalTestHelper" prot="public">iceberg::TemporalTestHelper</innerclass>
    <innerclass refid="classiceberg_1_1TemporalUtils" prot="public">iceberg::TemporalUtils</innerclass>
    <innerclass refid="classiceberg_1_1Term" prot="public">iceberg::Term</innerclass>
    <innerclass refid="classiceberg_1_1TestConfig" prot="public">iceberg::TestConfig</innerclass>
    <innerclass refid="structiceberg_1_1TimeParts" prot="public">iceberg::TimeParts</innerclass>
    <innerclass refid="classiceberg_1_1TimestampBase" prot="public">iceberg::TimestampBase</innerclass>
    <innerclass refid="structiceberg_1_1TimestampNanosParts" prot="public">iceberg::TimestampNanosParts</innerclass>
    <innerclass refid="structiceberg_1_1TimestampParts" prot="public">iceberg::TimestampParts</innerclass>
    <innerclass refid="classiceberg_1_1TimestampType" prot="public">iceberg::TimestampType</innerclass>
    <innerclass refid="classiceberg_1_1TimestampTzType" prot="public">iceberg::TimestampTzType</innerclass>
    <innerclass refid="classiceberg_1_1TimeType" prot="public">iceberg::TimeType</innerclass>
    <innerclass refid="structiceberg_1_1ToArrowSchemaParam" prot="public">iceberg::ToArrowSchemaParam</innerclass>
    <innerclass refid="classiceberg_1_1ToArrowSchemaTest" prot="public">iceberg::ToArrowSchemaTest</innerclass>
    <innerclass refid="classiceberg_1_1Transaction" prot="public">iceberg::Transaction</innerclass>
    <innerclass refid="classiceberg_1_1Transform" prot="public">iceberg::Transform</innerclass>
    <innerclass refid="classiceberg_1_1TransformFunction" prot="public">iceberg::TransformFunction</innerclass>
    <innerclass refid="classiceberg_1_1TransformLiteralTest" prot="public">iceberg::TransformLiteralTest</innerclass>
    <innerclass refid="structiceberg_1_1TransformParam" prot="public">iceberg::TransformParam</innerclass>
    <innerclass refid="classiceberg_1_1True" prot="public">iceberg::True</innerclass>
    <innerclass refid="classiceberg_1_1TruncateTransform" prot="public">iceberg::TruncateTransform</innerclass>
    <innerclass refid="classiceberg_1_1TruncateTransformTest" prot="public">iceberg::TruncateTransformTest</innerclass>
    <innerclass refid="classiceberg_1_1TruncateUtils" prot="public">iceberg::TruncateUtils</innerclass>
    <innerclass refid="classiceberg_1_1Type" prot="public">iceberg::Type</innerclass>
    <innerclass refid="classiceberg_1_1TypeJsonTest" prot="public">iceberg::TypeJsonTest</innerclass>
    <innerclass refid="classiceberg_1_1TypeTest" prot="public">iceberg::TypeTest</innerclass>
    <innerclass refid="classiceberg_1_1Unbound" prot="public">iceberg::Unbound</innerclass>
    <innerclass refid="classiceberg_1_1UnboundPredicate" prot="public">iceberg::UnboundPredicate</innerclass>
    <innerclass refid="classiceberg_1_1UnboundTerm" prot="public">iceberg::UnboundTerm</innerclass>
    <innerclass refid="classiceberg_1_1UnboundTransform" prot="public">iceberg::UnboundTransform</innerclass>
    <innerclass refid="classiceberg_1_1Uuid" prot="public">iceberg::Uuid</innerclass>
    <innerclass refid="classiceberg_1_1UuidType" prot="public">iceberg::UuidType</innerclass>
    <innerclass refid="classiceberg_1_1VoidTransform" prot="public">iceberg::VoidTransform</innerclass>
    <innerclass refid="classiceberg_1_1VoidTransformTest" prot="public">iceberg::VoidTransformTest</innerclass>
    <innerclass refid="classiceberg_1_1Writer" prot="public">iceberg::Writer</innerclass>
    <innerclass refid="structiceberg_1_1WriterFactoryRegistry" prot="public">iceberg::WriterFactoryRegistry</innerclass>
    <innerclass refid="structiceberg_1_1WriterOptions" prot="public">iceberg::WriterOptions</innerclass>
    <innerclass refid="classiceberg_1_1YearTransform" prot="public">iceberg::YearTransform</innerclass>
    <innerclass refid="classiceberg_1_1YearTransformTest" prot="public">iceberg::YearTransformTest</innerclass>
    <innerclass refid="classiceberg_1_1ZlibImpl" prot="public">iceberg::ZlibImpl</innerclass>
    <innernamespace refid="namespaceiceberg_1_1arrow">iceberg::arrow</innernamespace>
    <innernamespace refid="namespaceiceberg_1_1avro">iceberg::avro</innernamespace>
    <innernamespace refid="namespaceiceberg_1_1catalog">iceberg::catalog</innernamespace>
    <innernamespace refid="namespaceiceberg_1_1internal">iceberg::internal</innernamespace>
    <innernamespace refid="namespaceiceberg_1_1parquet">iceberg::parquet</innernamespace>
    <innernamespace refid="namespaceiceberg_1_1rest">iceberg::rest</innernamespace>
    <innernamespace refid="namespaceiceberg_1_1table">iceberg::table</innernamespace>
    <innernamespace refid="namespaceiceberg_1_1util">iceberg::util</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="manifest__entry_8h_1ac38b8f72b3bf292daf9af3a97c4b3f2b" prot="public" static="no" strong="yes">
        <type></type>
        <name>ManifestStatus</name>
        <qualifiedname>iceberg::ManifestStatus</qualifiedname>
        <enumvalue id="manifest__entry_8h_1ac38b8f72b3bf292daf9af3a97c4b3f2ba6a028b725643bf98b7997f9f893e3313" prot="public">
          <name>kExisting</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__entry_8h_1ac38b8f72b3bf292daf9af3a97c4b3f2ba300b0905bab3778110ad4f255e268e64" prot="public">
          <name>kAdded</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__entry_8h_1ac38b8f72b3bf292daf9af3a97c4b3f2badb26d45f89e9a988a970b7e04954b263" prot="public">
          <name>kDeleted</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_entry.h" line="39" column="1" bodyfile="iceberg/manifest_entry.h" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453" prot="public" static="no" strong="yes">
        <type>int32_t</type>
        <name>ManifestFileField</name>
        <qualifiedname>iceberg::ManifestFileField</qualifiedname>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a387eba9279f9bc8a2c7c703802a8c8c4" prot="public">
          <name>kManifestPath</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a078b9b84a46fd3c51e3db6891ddd7cee" prot="public">
          <name>kManifestLength</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a400e004b6440a944fc4374b63d4d2e7c" prot="public">
          <name>kPartitionSpecId</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a164f80bc4952e8bfb68f1619f80ab66f" prot="public">
          <name>kContent</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453ad49a5d5f8f24e6e075eb8ae04d474647" prot="public">
          <name>kSequenceNumber</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a5698dae46c1f536cf919701478c68d92" prot="public">
          <name>kMinSequenceNumber</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a7956097e2a2aee838f9136613fa825fd" prot="public">
          <name>kAddedSnapshotId</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a2b66edeba64965ea882b3f513ffec9a0" prot="public">
          <name>kAddedFilesCount</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a10e895efe9ace6c775c7edab893c99ba" prot="public">
          <name>kExistingFilesCount</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a7ce8d7f0cb7481fba0deda027f60f599" prot="public">
          <name>kDeletedFilesCount</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a76175639dc4c6de24bbc5792b08d1c8e" prot="public">
          <name>kAddedRowsCount</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a37631dfe43eeeafaf933597f1da750e3" prot="public">
          <name>kExistingRowsCount</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a27a4deebe6fe58f1cf6ec8f95f8fbc4e" prot="public">
          <name>kDeletedRowsCount</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a3a804f00dcca4bdf4adbafbdd37a0a8e" prot="public">
          <name>kPartitionFieldSummary</name>
          <initializer>= 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453a2796a13deedfa39d757183f0b6908760" prot="public">
          <name>kKeyMetadata</name>
          <initializer>= 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453aad70014fce461ff974500b70e98f662f" prot="public">
          <name>kFirstRowId</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="manifest__reader__internal_8h_1a6d80e5d001d966c87d7a75db68a75453ae60e411715b421894e0c2fe9184deb04" prot="public">
          <name>kNextUnusedId</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_reader_internal.h" line="63" column="1" bodyfile="iceberg/manifest_reader_internal.h" bodystart="63" bodyend="83"/>
      </memberdef>
      <memberdef kind="enum" id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147" prot="public" static="no" strong="yes">
        <type></type>
        <name>ErrorKind</name>
        <qualifiedname>iceberg::ErrorKind</qualifiedname>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147aa824609a8c511d10b4496d1d24761b3a" prot="public">
          <name>kAlreadyExists</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147a6fbfa23b9854d5c9c5713236a7eac3bf" prot="public">
          <name>kCommitFailed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147a34d843807f6dfa246c40da3c936b4a22" prot="public">
          <name>kCommitStateUnknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147a3bd82bbd5da3f973bc7d2822e29df2a1" prot="public">
          <name>kDecompressError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147ab10913c938482a8aa4ba85b7a1116cb4" prot="public">
          <name>kInvalid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147a80fdc050363ea6925fa2e7eb7f0a94a0" prot="public">
          <name>kInvalidArgument</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147a82704484de92790d2af1cb196c02ebc4" prot="public">
          <name>kInvalidArrowData</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147ae11ba4bfc25e77e59595d292b19228ae" prot="public">
          <name>kInvalidExpression</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147ad73d1c4ec0e2623d4f27e87646a0333f" prot="public">
          <name>kInvalidSchema</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147ae28496db724a23429c0f2a4e4211998b" prot="public">
          <name>kInvalidManifest</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147add8bc8168f1eae3fdfc5e6aeb4453c1c" prot="public">
          <name>kInvalidManifestList</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147a3a14421453bd2403b05c5df006ed3e64" prot="public">
          <name>kIOError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147a9d940241da144a407f9a861835d0bbde" prot="public">
          <name>kJsonParseError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147aae1c6021e2659889b0022a14c6f453ae" prot="public">
          <name>kNoSuchNamespace</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147a89300d99925a0cfe5c38ea2fcef91205" prot="public">
          <name>kNoSuchTable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147a3be84e5d44134ea10dc84f1193c78c87" prot="public">
          <name>kNotAllowed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147ab096e4f92f6c4184d188166e8f156fbb" prot="public">
          <name>kNotFound</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147ae8024a6eeff9d90cc3babff8acaec9c9" prot="public">
          <name>kNotImplemented</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147acf1352147c4a48f0403e882668260188" prot="public">
          <name>kNotSupported</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="result_8h_1a5cf8d9de1acce830ff4fc3d87fe95147a4366541ea8a34268abc8b24f19fcefdd" prot="public">
          <name>kUnknownError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><ref refid="structiceberg_1_1Error" kindref="compound">Error</ref> types for iceberg. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/result.h" line="31" column="1" bodyfile="iceberg/result.h" bodystart="31" bodyend="52"/>
      </memberdef>
      <memberdef kind="enum" id="snapshot_8h_1a8671d0926630b93487784772a49991c9" prot="public" static="no" strong="yes">
        <type></type>
        <name>SnapshotRefType</name>
        <qualifiedname>iceberg::SnapshotRefType</qualifiedname>
        <enumvalue id="snapshot_8h_1a8671d0926630b93487784772a49991c9a10a4bd395ede64152b6ef02ce999cab9" prot="public">
          <name>kBranch</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Branches are mutable named references that can be updated by committing a new snapshot as the branch’s referenced snapshot using the Commit Conflict Resolution and Retry procedures. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="snapshot_8h_1a8671d0926630b93487784772a49991c9a7b4a510071e5153ab98f54144688b0aa" prot="public">
          <name>kTag</name>
          <briefdescription>
<para>Tags are labels for individual snapshots. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The type of snapshot reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/snapshot.h" line="36" column="1" bodyfile="iceberg/snapshot.h" bodystart="36" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="sort__field_8h_1a4f6d1460e9650c271d2f5f70766361e1" prot="public" static="no" strong="yes">
        <type></type>
        <name>SortDirection</name>
        <qualifiedname>iceberg::SortDirection</qualifiedname>
        <enumvalue id="sort__field_8h_1a4f6d1460e9650c271d2f5f70766361e1a0d68e3b64f62d7fb0b0d23a05f09b624" prot="public">
          <name>kAscending</name>
          <briefdescription>
<para>Ascending. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sort__field_8h_1a4f6d1460e9650c271d2f5f70766361e1a163fcd817692b23b6b3a308c8ace797c" prot="public">
          <name>kDescending</name>
          <briefdescription>
<para>Descending. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Sort direction in a partition, either ascending or descending. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/sort_field.h" line="38" column="1" bodyfile="iceberg/sort_field.h" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="sort__field_8h_1a7d2f6c79654ba49df0d36c1724041283" prot="public" static="no" strong="yes">
        <type></type>
        <name>NullOrder</name>
        <qualifiedname>iceberg::NullOrder</qualifiedname>
        <enumvalue id="sort__field_8h_1a7d2f6c79654ba49df0d36c1724041283a9fda60ba14f0809e152bc08409aa2737" prot="public">
          <name>kFirst</name>
          <briefdescription>
<para>Nulls are sorted first. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sort__field_8h_1a7d2f6c79654ba49df0d36c1724041283aa9243c3d6084397b601cf95f073384a6" prot="public">
          <name>kLast</name>
          <briefdescription>
<para>Nulls are sorted last. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/sort_field.h" line="63" column="1" bodyfile="iceberg/sort_field.h" bodystart="63" bodyend="68"/>
      </memberdef>
      <memberdef kind="enum" id="config__test_8cc_1a630043c9946cf335352cb7b90d5aafb0" prot="public" static="no" strong="yes">
        <type></type>
        <name>TestEnum</name>
        <qualifiedname>iceberg::TestEnum</qualifiedname>
        <enumvalue id="config__test_8cc_1a630043c9946cf335352cb7b90d5aafb0a5c693795d181f5c727279e5f1d9be69f" prot="public">
          <name>VALUE1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="config__test_8cc_1a630043c9946cf335352cb7b90d5aafb0a464b36c025d9e17ff638dde2617a73fb" prot="public">
          <name>VALUE2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="config__test_8cc_1a630043c9946cf335352cb7b90d5aafb0aa812b9867ec1ee609c0591fc3799125e" prot="public">
          <name>VALUE3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/config_test.cc" line="28" column="1" bodyfile="iceberg/test/config_test.cc" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="enum" id="transform_8h_1a78b299cfdfb0b9631ca6fc520bd1b131" prot="public" static="no" strong="yes">
        <type></type>
        <name>TransformType</name>
        <qualifiedname>iceberg::TransformType</qualifiedname>
        <enumvalue id="transform_8h_1a78b299cfdfb0b9631ca6fc520bd1b131a25c2dc47991b3df171ed5192bcf70390" prot="public">
          <name>kUnknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Used to represent some customized transform that can&apos;t be recognized or supported now. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="transform_8h_1a78b299cfdfb0b9631ca6fc520bd1b131ac7c5a181d7cc5f5733d84dd9bd778967" prot="public">
          <name>kIdentity</name>
          <briefdescription>
<para>Equal to source value, unmodified. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="transform_8h_1a78b299cfdfb0b9631ca6fc520bd1b131a0226618c5258d9e1e71a400e0735314d" prot="public">
          <name>kBucket</name>
          <briefdescription>
<para>Hash of value, mod <computeroutput>N</computeroutput> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="transform_8h_1a78b299cfdfb0b9631ca6fc520bd1b131a6393f5467404a20b7754c5032eb69bfd" prot="public">
          <name>kTruncate</name>
          <briefdescription>
<para>Value truncated to width <computeroutput>W</computeroutput> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="transform_8h_1a78b299cfdfb0b9631ca6fc520bd1b131ae5f29bf7f42ebe083f06960f4fbe6edc" prot="public">
          <name>kYear</name>
          <briefdescription>
<para>Extract a date or timestamp year, as years from 1970. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="transform_8h_1a78b299cfdfb0b9631ca6fc520bd1b131abc4d3195c11185792391cc43d779d01d" prot="public">
          <name>kMonth</name>
          <briefdescription>
<para>Extract a date or timestamp month, as months from 1970-01. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="transform_8h_1a78b299cfdfb0b9631ca6fc520bd1b131a8f642cb82e8f76aabc6e3ff8d1dd5119" prot="public">
          <name>kDay</name>
          <briefdescription>
<para>Extract a date or timestamp day, as days from 1970-01-01. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="transform_8h_1a78b299cfdfb0b9631ca6fc520bd1b131a818152297c27d28aa4c1341db214c84b" prot="public">
          <name>kHour</name>
          <briefdescription>
<para>Extract a timestamp hour, as hours from 1970-01-01 00:00:00. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="transform_8h_1a78b299cfdfb0b9631ca6fc520bd1b131abd383557eb16fc23863cf3fc70b77ab3" prot="public">
          <name>kVoid</name>
          <briefdescription>
<para>Always produces <computeroutput>null</computeroutput> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><ref refid="classiceberg_1_1Transform" kindref="compound">Transform</ref> types used for partitioning. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/transform.h" line="38" column="1" bodyfile="iceberg/transform.h" bodystart="38" bodyend="58"/>
      </memberdef>
      <memberdef kind="enum" id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8" prot="public" static="no" strong="yes">
        <type></type>
        <name>TypeId</name>
        <qualifiedname>iceberg::TypeId</qualifiedname>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a37d24e1221658f0e0333a512fdbcd2f0" prot="public">
          <name>kStruct</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8af2017436709c101800e7fe65bff7fe27" prot="public">
          <name>kList</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8afb5397a5037cdaeda0a604dcbfe8c01f" prot="public">
          <name>kMap</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a57f58630ea0106aa965e5bf61a49d02c" prot="public">
          <name>kBoolean</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a355088fbd6ac81f051e0bd6ede5ab8e0" prot="public">
          <name>kInt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a6a285ab26ec7ec4c22536626eeaaf52e" prot="public">
          <name>kLong</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a8425cd882e78bc9251db970b8a1da20e" prot="public">
          <name>kFloat</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a7fb3efa35444cd88d5a31dc125ca9c28" prot="public">
          <name>kDouble</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8acb104e2becf8e5607940ca033b26c2ae" prot="public">
          <name>kDecimal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a3d1c7d2768a21424ab8f766e95e07d3e" prot="public">
          <name>kDate</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a4fbae144eab5d83a51adcf4d6542805a" prot="public">
          <name>kTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a853e16075fae62bee1f2cf0c2172b2b4" prot="public">
          <name>kTimestamp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a03bac3c0ab66f73554ed8fe95e3cef2f" prot="public">
          <name>kTimestampTz</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a302e56d566a2561033b27c13680ea4b2" prot="public">
          <name>kString</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a57c950263f5c34861946e9bc898a3d26" prot="public">
          <name>kUuid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a826888a09763de7e2a9f60eb85d88b24" prot="public">
          <name>kFixed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8a212f9f34e4e151a9ba569c71e1aace47" prot="public">
          <name>kBinary</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A data type. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not a complete data type by itself because some types are nested and/or parameterized.</para>
<para>Iceberg V3 types are not currently supported. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/type_fwd.h" line="35" column="1" bodyfile="iceberg/type_fwd.h" bodystart="35" bodyend="53"/>
      </memberdef>
      <memberdef kind="enum" id="type__fwd_8h_1a4082287dfe7a2b960a8c638d5f0cf39a" prot="public" static="no" strong="yes">
        <type></type>
        <name>TimeUnit</name>
        <qualifiedname>iceberg::TimeUnit</qualifiedname>
        <enumvalue id="type__fwd_8h_1a4082287dfe7a2b960a8c638d5f0cf39aaf0ed871ad77b328ebd6cf50c57c1ee20" prot="public">
          <name>kMicrosecond</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The time unit. In Iceberg V3 nanoseconds are also supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/type_fwd.h" line="56" column="1" bodyfile="iceberg/type_fwd.h" bodystart="56" bodyend="58"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="file__reader_8h_1aadcea35e8b45a436a61aaf23684b939f" prot="public" static="no">
        <type>std::function&lt; Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1Reader" kindref="compound">Reader</ref> &gt; &gt;()&gt;</type>
        <definition>using iceberg::ReaderFactory = typedef std::function&lt;Result&lt;std::unique_ptr&lt;Reader&gt; &gt;()&gt;</definition>
        <argsstring></argsstring>
        <name>ReaderFactory</name>
        <qualifiedname>iceberg::ReaderFactory</qualifiedname>
        <briefdescription>
<para>Factory function to create a reader of a specific file format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/file_reader.h" line="100" column="1" bodyfile="iceberg/file_reader.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="file__writer_8h_1accf6d69cf4d7c52851e9dc92d95d3215" prot="public" static="no">
        <type>std::function&lt; Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1Writer" kindref="compound">Writer</ref> &gt; &gt;()&gt;</type>
        <definition>using iceberg::WriterFactory = typedef std::function&lt;Result&lt;std::unique_ptr&lt;Writer&gt; &gt;()&gt;</definition>
        <argsstring></argsstring>
        <name>WriterFactory</name>
        <qualifiedname>iceberg::WriterFactory</qualifiedname>
        <briefdescription>
<para>Factory function to create a writer of a specific file format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/file_writer.h" line="87" column="1" bodyfile="iceberg/file_writer.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="name__mapping_8h_1ad5bb43cad4c733b1692c2038be9f40fd" prot="public" static="no">
        <type>std::reference_wrapper&lt; const <ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref> &gt;</type>
        <definition>using iceberg::MappedFieldConstRef = typedef std::reference_wrapper&lt;const MappedField&gt;</definition>
        <argsstring></argsstring>
        <name>MappedFieldConstRef</name>
        <qualifiedname>iceberg::MappedFieldConstRef</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/name_mapping.h" line="52" column="1" bodyfile="iceberg/name_mapping.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="result_8h_1a9d5594e371beb516b0120e07e69d3af6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename E</type>
            <defval>typename DefaultError&lt;T&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>std::expected&lt; T, E &gt;</type>
        <definition>using iceberg::Result = typedef std::expected&lt;T, E&gt;</definition>
        <argsstring></argsstring>
        <name>Result</name>
        <qualifiedname>iceberg::Result</qualifiedname>
        <briefdescription>
<para>Result alias. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/result.h" line="68" column="1" bodyfile="iceberg/result.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="result_8h_1ab3f9de7ab4768207166ea7cdbe3e5f59" prot="public" static="no">
        <type>Result&lt; void &gt;</type>
        <definition>using iceberg::Status = typedef Result&lt;void&gt;</definition>
        <argsstring></argsstring>
        <name>Status</name>
        <qualifiedname>iceberg::Status</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/result.h" line="70" column="1" bodyfile="iceberg/result.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct__like_8h_1a3b5162f202989971e28bc310237964db" prot="public" static="no">
        <type>std::variant&lt; std::monostate, bool, int32_t, int64_t, float, double, std::string_view, <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref>, std::shared_ptr&lt; <ref refid="classiceberg_1_1StructLike" kindref="compound">StructLike</ref> &gt;, std::shared_ptr&lt; <ref refid="classiceberg_1_1ArrayLike" kindref="compound">ArrayLike</ref> &gt;, std::shared_ptr&lt; <ref refid="classiceberg_1_1MapLike" kindref="compound">MapLike</ref> &gt; &gt;</type>
        <definition>using iceberg::Scalar = typedef std::variant&lt;std::monostate, bool, int32_t, int64_t, float, double, std::string_view, Decimal, std::shared_ptr&lt;StructLike&gt;, std::shared_ptr&lt;ArrayLike&gt;, std::shared_ptr&lt;MapLike&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <qualifiedname>iceberg::Scalar</qualifiedname>
        <briefdescription>
<para>A scalar value depending on its data type. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that all string and binary values are stored as non-owned string_view and their lifetime is managed by the wrapped object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/row/struct_like.h" line="44" column="1" bodyfile="iceberg/row/struct_like.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="timepoint_8h_1a26b5236cc1bac2db397a235e5159efbc" prot="public" static="no">
        <type>std::chrono::time_point&lt; std::chrono::system_clock, std::chrono::milliseconds &gt;</type>
        <definition>using iceberg::TimePointMs = typedef std::chrono::time_point&lt;std::chrono::system_clock, std::chrono::milliseconds&gt;</definition>
        <argsstring></argsstring>
        <name>TimePointMs</name>
        <qualifiedname>iceberg::TimePointMs</qualifiedname>
        <briefdescription>
<para>A time point in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/timepoint.h" line="30" column="1" bodyfile="iceberg/util/timepoint.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="timepoint_8h_1ab78083f4e9fdbfcd58a22828cd36cd95" prot="public" static="no">
        <type>std::chrono::time_point&lt; std::chrono::system_clock, std::chrono::nanoseconds &gt;</type>
        <definition>using iceberg::TimePointNs = typedef std::chrono::time_point&lt;std::chrono::system_clock, std::chrono::nanoseconds&gt;</definition>
        <argsstring></argsstring>
        <name>TimePointNs</name>
        <qualifiedname>iceberg::TimePointNs</qualifiedname>
        <briefdescription>
<para>A time point in nanoseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/timepoint.h" line="34" column="1" bodyfile="iceberg/util/timepoint.h" bodystart="35" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="constants_8h_1a240ad03217cedb605f11057c3d4749db" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr std::string_view</type>
        <definition>constexpr std::string_view iceberg::kParquetFieldIdKey</definition>
        <argsstring></argsstring>
        <name>kParquetFieldIdKey</name>
        <qualifiedname>iceberg::kParquetFieldIdKey</qualifiedname>
        <initializer>= &quot;PARQUET:field_id&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/constants.h" line="26" column="28" bodyfile="iceberg/constants.h" bodystart="26" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="in__memory__catalog_8cc_1aa69147c47a2a9445febffa8cbf3802b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; <ref refid="classiceberg_1_1InMemoryNamespace" kindref="compound">InMemoryNamespace</ref> * &gt;</type>
        <definition>Result&lt; InMemoryNamespace * &gt; iceberg::GetNamespace</definition>
        <argsstring>(InMemoryNamespace *root, const Namespace &amp;namespace_ident)</argsstring>
        <name>GetNamespace</name>
        <qualifiedname>iceberg::GetNamespace</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1InMemoryNamespace" kindref="compound">InMemoryNamespace</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="structiceberg_1_1Namespace" kindref="compound">Namespace</ref> &amp;</type>
          <declname>namespace_ident</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/catalog/memory/in_memory_catalog.cc" line="155" column="8" bodyfile="iceberg/catalog/memory/in_memory_catalog.cc" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="in__memory__catalog_8cc_1a64bad63b3fe76c886bd4008e94fffb19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; const <ref refid="classiceberg_1_1InMemoryNamespace" kindref="compound">InMemoryNamespace</ref> * &gt;</type>
        <definition>Result&lt; const InMemoryNamespace * &gt; iceberg::GetNamespace</definition>
        <argsstring>(const InMemoryNamespace *root, const Namespace &amp;namespace_ident)</argsstring>
        <name>GetNamespace</name>
        <qualifiedname>iceberg::GetNamespace</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1InMemoryNamespace" kindref="compound">InMemoryNamespace</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="structiceberg_1_1Namespace" kindref="compound">Namespace</ref> &amp;</type>
          <declname>namespace_ident</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/catalog/memory/in_memory_catalog.cc" line="160" column="8" bodyfile="iceberg/catalog/memory/in_memory_catalog.cc" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="expression_8cc_1a67197636ef5578a5ddd401c59a449164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string_view</type>
        <definition>ICEBERG_EXPORT std::string_view iceberg::ToString</definition>
        <argsstring>(Expression::Operation op)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1Expression_1a433076bdc34ce0b6d359313c6c7b8a9c" kindref="member">Expression::Operation</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Returns a string representation of an expression operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/expression/expression.cc" line="107" column="18" bodyfile="iceberg/expression/expression.cc" bodystart="107" bodyend="157" declfile="iceberg/expression/expression.h" declline="225" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="expression_8cc_1a30b5451441431ab3bb2f02457ad7600b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; <ref refid="classiceberg_1_1Expression_1a433076bdc34ce0b6d359313c6c7b8a9c" kindref="member">Expression::Operation</ref> &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; Expression::Operation &gt; iceberg::Negate</definition>
        <argsstring>(Expression::Operation op)</argsstring>
        <name>Negate</name>
        <qualifiedname>iceberg::Negate</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1Expression_1a433076bdc34ce0b6d359313c6c7b8a9c" kindref="member">Expression::Operation</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Returns the negated operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/expression/expression.cc" line="159" column="8" bodyfile="iceberg/expression/expression.cc" bodystart="159" bodyend="205" declfile="iceberg/expression/expression.h" declline="228" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="literal_8cc_1a253dba0e34c3f9426bb245a82c94a3df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::floating_point</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>std::strong_ordering</type>
        <definition>std::strong_ordering iceberg::CompareFloat</definition>
        <argsstring>(T lhs, T rhs)</argsstring>
        <name>CompareFloat</name>
        <qualifiedname>iceberg::CompareFloat</qualifiedname>
        <param>
          <type>T</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/expression/literal.cc" line="332" column="22" bodyfile="iceberg/expression/literal.cc" bodystart="332" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="file__format_8h_1a6c6a9823b4f3275c85997c3ab98211fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ICEBERG_EXPORT std::string_view</type>
        <definition>ICEBERG_EXPORT std::string_view iceberg::ToString</definition>
        <argsstring>(FileFormatType format_type)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type>FileFormatType</type>
          <declname>format_type</declname>
        </param>
        <briefdescription>
<para>Convert a FileFormatType to a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/file_format.h" line="43" column="40" bodyfile="iceberg/file_format.h" bodystart="43" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="file__format_8h_1ac636c6e570a5e0902e16087c7322c6a7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>ICEBERG_EXPORT Result&lt; FileFormatType &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; FileFormatType &gt; iceberg::FileFormatTypeFromString</definition>
        <argsstring>(std::string_view str) noexcept</argsstring>
        <name>FileFormatTypeFromString</name>
        <qualifiedname>iceberg::FileFormatTypeFromString</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Convert a string to a FileFormatType. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/file_format.h" line="58" column="30" bodyfile="iceberg/file_format.h" bodystart="58" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a91151fb14dd6f76e691950c237615a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const SortField &amp;sort_field)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref> &amp;</type>
          <declname>sort_field</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts a <computeroutput><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></computeroutput> object into a JSON representation. The resulting JSON object includes the transform type, source ID, sort direction, and null ordering.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort_field</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></computeroutput> in the form of key-value pairs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="171" column="16" bodyfile="iceberg/json_internal.cc" bodystart="171" bodyend="178" declfile="iceberg/json_internal.h" declline="41" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1aeae758578b40e37952ca3e5ab812c322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const SortOrder &amp;sort_order)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1SortOrder" kindref="compound">SortOrder</ref> &amp;</type>
          <declname>sort_order</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="classiceberg_1_1SortOrder" kindref="compound">SortOrder</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts a <computeroutput><ref refid="classiceberg_1_1SortOrder" kindref="compound">SortOrder</ref></computeroutput> object into a JSON representation. The resulting JSON includes the order ID and a list of <computeroutput><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></computeroutput> objects. Each <computeroutput><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></computeroutput> is serialized as described in the <computeroutput>ToJson(SortField)</computeroutput> function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort_order</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="classiceberg_1_1SortOrder" kindref="compound">SortOrder</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="classiceberg_1_1SortOrder" kindref="compound">SortOrder</ref></computeroutput> with its order ID and fields array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="180" column="16" bodyfile="iceberg/json_internal.cc" bodystart="180" bodyend="190" declfile="iceberg/json_internal.h" declline="63" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1aca222396a93e6224fcd1e4d951421f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; SortField &gt; &gt; iceberg::SortFieldFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>SortFieldFromJson</name>
        <qualifiedname>iceberg::SortFieldFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function parses the provided JSON and creates a <computeroutput><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></computeroutput> object. It expects the JSON object to contain keys for the transform, source ID, direction, and null order.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>expected</computeroutput> value containing either a <computeroutput><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></computeroutput> object or an error. If the JSON is malformed or missing expected fields, an error will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="192" column="8" bodyfile="iceberg/json_internal.cc" bodystart="192" bodyend="205" declfile="iceberg/json_internal.h" declline="52" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a7b7aa7964bd372a98747c348c47e1f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1SortOrder" kindref="compound">SortOrder</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; SortOrder &gt; &gt; iceberg::SortOrderFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>SortOrderFromJson</name>
        <qualifiedname>iceberg::SortOrderFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="classiceberg_1_1SortOrder" kindref="compound">SortOrder</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function parses the provided JSON and creates a <computeroutput><ref refid="classiceberg_1_1SortOrder" kindref="compound">SortOrder</ref></computeroutput> object. It expects the JSON object to contain the order ID and a list of <computeroutput><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></computeroutput> objects. Each <computeroutput><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></computeroutput> will be parsed using the <computeroutput>SortFieldFromJson</computeroutput> function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="classiceberg_1_1SortOrder" kindref="compound">SortOrder</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>expected</computeroutput> value containing either a <computeroutput><ref refid="classiceberg_1_1SortOrder" kindref="compound">SortOrder</ref></computeroutput> object or an error. If the JSON is malformed or missing expected fields, an error will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="207" column="8" bodyfile="iceberg/json_internal.cc" bodystart="207" bodyend="217" declfile="iceberg/json_internal.h" declline="74" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a60bd85c4933395493b75f052b1df7039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const SchemaField &amp;field)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1SchemaField" kindref="compound">SchemaField</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Convert an Iceberg <ref refid="classiceberg_1_1SchemaField" kindref="compound">SchemaField</ref> to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">field</parametername>
</parameternamelist>
<parameterdescription>
<para>The Iceberg field to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON representation of the field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="219" column="16" bodyfile="iceberg/json_internal.cc" bodystart="219" bodyend="226" declfile="iceberg/json_internal.h" declline="111" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1af2542977b6346de1f910f813f25d167f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const Type &amp;type)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Type" kindref="compound">Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Convert an Iceberg <ref refid="classiceberg_1_1Type" kindref="compound">Type</ref> to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>The Iceberg type to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON representation of the type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="228" column="16" bodyfile="iceberg/json_internal.cc" bodystart="228" bodyend="303" declfile="iceberg/json_internal.h" declline="99" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1ac93bbfeea3d038dc393882a2dd1f04a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const Schema &amp;schema)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Convert an Iceberg <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>The Iceberg schema to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON representation of the schema. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="305" column="16" bodyfile="iceberg/json_internal.cc" bodystart="305" bodyend="310" declfile="iceberg/json_internal.h" declline="81" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a15c9a5de292133f553714a872f7456d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::string &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::string &gt; iceberg::ToJsonString</definition>
        <argsstring>(const Schema &amp;schema)</argsstring>
        <name>ToJsonString</name>
        <qualifiedname>iceberg::ToJsonString</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Convert an Iceberg <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>The Iceberg schema to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON string of the schema. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="312" column="8" bodyfile="iceberg/json_internal.cc" bodystart="312" bodyend="314" declfile="iceberg/json_internal.h" declline="87" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1ab3478b0d657e7dfa71dac623fe0834b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const SnapshotRef &amp;snapshot_ref)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1SnapshotRef" kindref="compound">SnapshotRef</ref> &amp;</type>
          <declname>snapshot_ref</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="structiceberg_1_1SnapshotRef" kindref="compound">SnapshotRef</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">snapshot_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="structiceberg_1_1SnapshotRef" kindref="compound">SnapshotRef</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="structiceberg_1_1SnapshotRef" kindref="compound">SnapshotRef</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="316" column="16" bodyfile="iceberg/json_internal.cc" bodystart="316" bodyend="330" declfile="iceberg/json_internal.h" declline="186" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1ac863dbf87fce02db07e947c6b28f2129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const Snapshot &amp;snapshot)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1Snapshot" kindref="compound">Snapshot</ref> &amp;</type>
          <declname>snapshot</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="structiceberg_1_1Snapshot" kindref="compound">Snapshot</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">snapshot</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="structiceberg_1_1Snapshot" kindref="compound">Snapshot</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput>snapshot</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="332" column="16" bodyfile="iceberg/json_internal.cc" bodystart="332" bodyend="347" declfile="iceberg/json_internal.h" declline="199" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a5d196fd3c04c7dc1ca3e43a6ff086577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1Type" kindref="compound">Type</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; Type &gt; &gt; iceberg::TypeFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>TypeFromJson</name>
        <qualifiedname>iceberg::TypeFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Convert JSON to an Iceberg <ref refid="classiceberg_1_1Type" kindref="compound">Type</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON representation of the type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Iceberg type or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="393" column="8" bodyfile="iceberg/json_internal.cc" bodystart="393" bodyend="451" declfile="iceberg/json_internal.h" declline="105" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a688680ad68226f9686707ec38ae0d7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1SchemaField" kindref="compound">SchemaField</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; SchemaField &gt; &gt; iceberg::FieldFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>FieldFromJson</name>
        <qualifiedname>iceberg::FieldFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Convert JSON to an Iceberg <ref refid="classiceberg_1_1SchemaField" kindref="compound">SchemaField</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON representation of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Iceberg field or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="453" column="8" bodyfile="iceberg/json_internal.cc" bodystart="453" bodyend="462" declfile="iceberg/json_internal.h" declline="117" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a8f4b7cdc87f9da30866f45ea35319eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; Schema &gt; &gt; iceberg::SchemaFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>SchemaFromJson</name>
        <qualifiedname>iceberg::SchemaFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Convert JSON to an Iceberg <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON representation of the schema. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Iceberg schema or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="464" column="8" bodyfile="iceberg/json_internal.cc" bodystart="464" bodyend="474" declfile="iceberg/json_internal.h" declline="93" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a2b1a1aebd774163d56381bfcab919daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const PartitionField &amp;partition_field)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref> &amp;</type>
          <declname>partition_field</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts a <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> object into a JSON representation. The resulting JSON object includes the transform type, source ID, field ID, and name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>partition_field</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> in the form of key-value pairs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="476" column="16" bodyfile="iceberg/json_internal.cc" bodystart="476" bodyend="483" declfile="iceberg/json_internal.h" declline="129" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1ab182d8556ef40b9e20ba1043cceed43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const PartitionSpec &amp;partition_spec)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref> &amp;</type>
          <declname>partition_spec</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts a <computeroutput><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></computeroutput> object into a JSON representation. The resulting JSON includes the spec ID and a list of <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> objects. Each <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> is serialized as described in the <computeroutput>ToJson(PartitionField)</computeroutput> function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>partition_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></computeroutput> with its order ID and fields array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="485" column="16" bodyfile="iceberg/json_internal.cc" bodystart="485" bodyend="495" declfile="iceberg/json_internal.h" declline="155" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a17b46c84f6c40b923ed9d6e9a0df17c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::string &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::string &gt; iceberg::ToJsonString</definition>
        <argsstring>(const PartitionSpec &amp;partition_spec)</argsstring>
        <name>ToJsonString</name>
        <qualifiedname>iceberg::ToJsonString</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref> &amp;</type>
          <declname>partition_spec</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts a <computeroutput><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></computeroutput> object into a JSON representation. The resulting JSON includes the spec ID and a list of <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> objects. Each <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> is serialized as described in the <computeroutput>ToJson(PartitionField)</computeroutput> function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>partition_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON string of the <computeroutput><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></computeroutput> with its order ID and fields array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="497" column="8" bodyfile="iceberg/json_internal.cc" bodystart="497" bodyend="499" declfile="iceberg/json_internal.h" declline="167" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1ae818717563011f3091a82467df44e384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; PartitionField &gt; &gt; iceberg::PartitionFieldFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json, bool allow_field_id_missing=false)</argsstring>
        <name>PartitionFieldFromJson</name>
        <qualifiedname>iceberg::PartitionFieldFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_field_id_missing</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function parses the provided JSON and creates a <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> object. It expects the JSON object to contain keys for the transform, source ID, field ID, and name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_field_id_missing</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the field ID is allowed to be missing. This can happen when deserializing partition fields from V1 metadata files. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>expected</computeroutput> value containing either a <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> object or an error. If the JSON is malformed or missing expected fields, an error will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="501" column="8" bodyfile="iceberg/json_internal.cc" bodystart="501" bodyend="518" declfile="iceberg/json_internal.h" declline="142" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1ab8c44dfd6fedcda566b40ee93070247e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; PartitionSpec &gt; &gt; iceberg::PartitionSpecFromJson</definition>
        <argsstring>(const std::shared_ptr&lt; Schema &gt; &amp;schema, const nlohmann::json &amp;json)</argsstring>
        <name>PartitionSpecFromJson</name>
        <qualifiedname>iceberg::PartitionSpecFromJson</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &gt; &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function parses the provided JSON and creates a <computeroutput><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></computeroutput> object. It expects the JSON object to contain the spec ID and a list of <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> objects. Each <computeroutput><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></computeroutput> will be parsed using the <computeroutput>PartitionFieldFromJson</computeroutput> function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>expected</computeroutput> value containing either a <computeroutput><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></computeroutput> object or an error. If the JSON is malformed or missing expected fields, an error will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="520" column="8" bodyfile="iceberg/json_internal.cc" bodystart="520" bodyend="531" declfile="iceberg/json_internal.h" declline="179" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1ac307d07d279f0c3c317901da4b0d47fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="structiceberg_1_1SnapshotRef" kindref="compound">SnapshotRef</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; SnapshotRef &gt; &gt; iceberg::SnapshotRefFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>SnapshotRefFromJson</name>
        <qualifiedname>iceberg::SnapshotRefFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="structiceberg_1_1SnapshotRef" kindref="compound">SnapshotRef</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="structiceberg_1_1SnapshotRef" kindref="compound">SnapshotRef</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="structiceberg_1_1SnapshotRef" kindref="compound">SnapshotRef</ref></computeroutput> object or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="533" column="8" bodyfile="iceberg/json_internal.cc" bodystart="533" bodyend="557" declfile="iceberg/json_internal.h" declline="192" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1ac44b7c4f06cb8aef227a1774fbdf7345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="structiceberg_1_1Snapshot" kindref="compound">Snapshot</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; Snapshot &gt; &gt; iceberg::SnapshotFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>SnapshotFromJson</name>
        <qualifiedname>iceberg::SnapshotFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="structiceberg_1_1Snapshot" kindref="compound">Snapshot</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON representation of the snapshot. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="structiceberg_1_1Snapshot" kindref="compound">Snapshot</ref></computeroutput> object or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="559" column="8" bodyfile="iceberg/json_internal.cc" bodystart="559" bodyend="602" declfile="iceberg/json_internal.h" declline="205" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a89d829337c407862b868ebc49b3c59bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const BlobMetadata &amp;blob_metadata)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1BlobMetadata" kindref="compound">BlobMetadata</ref> &amp;</type>
          <declname>blob_metadata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="604" column="16" bodyfile="iceberg/json_internal.cc" bodystart="604" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a67746267836ed638662366e875e8094f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; <ref refid="structiceberg_1_1BlobMetadata" kindref="compound">BlobMetadata</ref> &gt;</type>
        <definition>Result&lt; BlobMetadata &gt; iceberg::BlobMetadataFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>BlobMetadataFromJson</name>
        <qualifiedname>iceberg::BlobMetadataFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="616" column="8" bodyfile="iceberg/json_internal.cc" bodystart="616" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1ae69154755b3c8300dae3114f15f75225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const StatisticsFile &amp;statistics_file)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1StatisticsFile" kindref="compound">StatisticsFile</ref> &amp;</type>
          <declname>statistics_file</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="structiceberg_1_1StatisticsFile" kindref="compound">StatisticsFile</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statistics_file</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="structiceberg_1_1StatisticsFile" kindref="compound">StatisticsFile</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="structiceberg_1_1StatisticsFile" kindref="compound">StatisticsFile</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="632" column="16" bodyfile="iceberg/json_internal.cc" bodystart="632" bodyend="646" declfile="iceberg/json_internal.h" declline="212" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a1b4d3d5db289de7bb195210a38d442c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="structiceberg_1_1StatisticsFile" kindref="compound">StatisticsFile</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; StatisticsFile &gt; &gt; iceberg::StatisticsFileFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>StatisticsFileFromJson</name>
        <qualifiedname>iceberg::StatisticsFileFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="structiceberg_1_1StatisticsFile" kindref="compound">StatisticsFile</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="structiceberg_1_1StatisticsFile" kindref="compound">StatisticsFile</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="structiceberg_1_1StatisticsFile" kindref="compound">StatisticsFile</ref></computeroutput> object or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="648" column="8" bodyfile="iceberg/json_internal.cc" bodystart="648" bodyend="668" declfile="iceberg/json_internal.h" declline="218" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a7b516fde816189160a6e9985da5c1735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const PartitionStatisticsFile &amp;partition_statistics_file)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1PartitionStatisticsFile" kindref="compound">PartitionStatisticsFile</ref> &amp;</type>
          <declname>partition_statistics_file</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="structiceberg_1_1PartitionStatisticsFile" kindref="compound">PartitionStatisticsFile</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>partition_statistics_file</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="structiceberg_1_1PartitionStatisticsFile" kindref="compound">PartitionStatisticsFile</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="structiceberg_1_1PartitionStatisticsFile" kindref="compound">PartitionStatisticsFile</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="670" column="16" bodyfile="iceberg/json_internal.cc" bodystart="670" bodyend="676" declfile="iceberg/json_internal.h" declline="225" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1acfe00a9e8e87a3e0b1dc2ded9eb43eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="structiceberg_1_1PartitionStatisticsFile" kindref="compound">PartitionStatisticsFile</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; PartitionStatisticsFile &gt; &gt; iceberg::PartitionStatisticsFileFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>PartitionStatisticsFileFromJson</name>
        <qualifiedname>iceberg::PartitionStatisticsFileFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="structiceberg_1_1PartitionStatisticsFile" kindref="compound">PartitionStatisticsFile</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="structiceberg_1_1PartitionStatisticsFile" kindref="compound">PartitionStatisticsFile</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="structiceberg_1_1PartitionStatisticsFile" kindref="compound">PartitionStatisticsFile</ref></computeroutput> object or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="678" column="8" bodyfile="iceberg/json_internal.cc" bodystart="678" bodyend="688" declfile="iceberg/json_internal.h" declline="233" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a98fe0ab8a0bdb1bc935b63eb4820c7b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const SnapshotLogEntry &amp;snapshot_log_entry)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1SnapshotLogEntry" kindref="compound">SnapshotLogEntry</ref> &amp;</type>
          <declname>snapshot_log_entry</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="structiceberg_1_1SnapshotLogEntry" kindref="compound">SnapshotLogEntry</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snapshot_log_entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="structiceberg_1_1SnapshotLogEntry" kindref="compound">SnapshotLogEntry</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="structiceberg_1_1SnapshotLogEntry" kindref="compound">SnapshotLogEntry</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="690" column="16" bodyfile="iceberg/json_internal.cc" bodystart="690" bodyend="695" declfile="iceberg/json_internal.h" declline="239" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a04f1ccc310bd0c59cdfa89fb0f6223ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; <ref refid="structiceberg_1_1SnapshotLogEntry" kindref="compound">SnapshotLogEntry</ref> &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; SnapshotLogEntry &gt; iceberg::SnapshotLogEntryFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>SnapshotLogEntryFromJson</name>
        <qualifiedname>iceberg::SnapshotLogEntryFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="structiceberg_1_1SnapshotLogEntry" kindref="compound">SnapshotLogEntry</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="structiceberg_1_1SnapshotLogEntry" kindref="compound">SnapshotLogEntry</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="structiceberg_1_1SnapshotLogEntry" kindref="compound">SnapshotLogEntry</ref></computeroutput> object or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="697" column="8" bodyfile="iceberg/json_internal.cc" bodystart="697" bodyend="705" declfile="iceberg/json_internal.h" declline="245" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a5771c9bbd58e1210bd48152fa6d62cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const MetadataLogEntry &amp;metadata_log_entry)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1MetadataLogEntry" kindref="compound">MetadataLogEntry</ref> &amp;</type>
          <declname>metadata_log_entry</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="structiceberg_1_1MetadataLogEntry" kindref="compound">MetadataLogEntry</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metadata_log_entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="structiceberg_1_1MetadataLogEntry" kindref="compound">MetadataLogEntry</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="structiceberg_1_1MetadataLogEntry" kindref="compound">MetadataLogEntry</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="707" column="16" bodyfile="iceberg/json_internal.cc" bodystart="707" bodyend="712" declfile="iceberg/json_internal.h" declline="252" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a57c16d1b27c1448bf37df8ba48a9723e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; <ref refid="structiceberg_1_1MetadataLogEntry" kindref="compound">MetadataLogEntry</ref> &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; MetadataLogEntry &gt; iceberg::MetadataLogEntryFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>MetadataLogEntryFromJson</name>
        <qualifiedname>iceberg::MetadataLogEntryFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="structiceberg_1_1MetadataLogEntry" kindref="compound">MetadataLogEntry</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="structiceberg_1_1MetadataLogEntry" kindref="compound">MetadataLogEntry</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="structiceberg_1_1MetadataLogEntry" kindref="compound">MetadataLogEntry</ref></computeroutput> object or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="714" column="8" bodyfile="iceberg/json_internal.cc" bodystart="714" bodyend="722" declfile="iceberg/json_internal.h" declline="258" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a03938bc38c2eaf5d18ae547070bbe357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const TableMetadata &amp;table_metadata)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref> &amp;</type>
          <declname>table_metadata</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table_metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="724" column="16" bodyfile="iceberg/json_internal.cc" bodystart="724" bodyend="794" declfile="iceberg/json_internal.h" declline="265" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a47bf2a7a6c5630df64caa257e955f3ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::string &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::string &gt; iceberg::ToJsonString</definition>
        <argsstring>(const TableMetadata &amp;table_metadata)</argsstring>
        <name>ToJsonString</name>
        <qualifiedname>iceberg::ToJsonString</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref> &amp;</type>
          <declname>table_metadata</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table_metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON string of the <computeroutput><ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="796" column="8" bodyfile="iceberg/json_internal.cc" bodystart="796" bodyend="798" declfile="iceberg/json_internal.h" declline="271" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1abfddab4da30ad7a5795ace315e9acf02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; TableMetadata &gt; &gt; iceberg::TableMetadataFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>TableMetadataFromJson</name>
        <qualifiedname>iceberg::TableMetadataFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref></computeroutput> object or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="943" column="8" bodyfile="iceberg/json_internal.cc" bodystart="943" bodyend="1055" declfile="iceberg/json_internal.h" declline="277" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1adb2941dd9b12ea680662888d090d8738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; nlohmann::json &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; nlohmann::json &gt; iceberg::FromJsonString</definition>
        <argsstring>(const std::string &amp;json_string)</argsstring>
        <name>FromJsonString</name>
        <qualifiedname>iceberg::FromJsonString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>json_string</declname>
        </param>
        <briefdescription>
<para>Deserialize a JSON string into a <computeroutput>nlohmann::json</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json_string</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON string to deserialize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>nlohmann::json</computeroutput> object or an error if the deserialization fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="1057" column="8" bodyfile="iceberg/json_internal.cc" bodystart="1057" bodyend="1064" declfile="iceberg/json_internal.h" declline="284" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a4979c72d16e0356c07be90463218aeb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::string &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::string &gt; iceberg::ToJsonString</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>ToJsonString</name>
        <qualifiedname>iceberg::ToJsonString</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Serialize a <computeroutput>nlohmann::json</computeroutput> object into a JSON string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>nlohmann::json</computeroutput> object to serialize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON string or an error if the serialization fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="1066" column="8" bodyfile="iceberg/json_internal.cc" bodystart="1066" bodyend="1072" declfile="iceberg/json_internal.h" declline="290" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a471a30cbfb8f0c15f87590f68290a110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const MappedField &amp;field)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">field</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="1074" column="16" bodyfile="iceberg/json_internal.cc" bodystart="1074" bodyend="1090" declfile="iceberg/json_internal.h" declline="296" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a30dfd58c79d65c3d1b995fe6ff95a3f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; <ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref> &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; MappedField &gt; iceberg::MappedFieldFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>MappedFieldFromJson</name>
        <qualifiedname>iceberg::MappedFieldFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref></computeroutput> object or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="1092" column="8" bodyfile="iceberg/json_internal.cc" bodystart="1092" bodyend="1116" declfile="iceberg/json_internal.h" declline="302" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1af27efd5cbddb85eecfd7021359a65326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const MappedFields &amp;mapped_fields)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1MappedFields" kindref="compound">MappedFields</ref> &amp;</type>
          <declname>mapped_fields</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="classiceberg_1_1MappedFields" kindref="compound">MappedFields</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mapped_fields</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="classiceberg_1_1MappedFields" kindref="compound">MappedFields</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="classiceberg_1_1MappedFields" kindref="compound">MappedFields</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="1118" column="16" bodyfile="iceberg/json_internal.cc" bodystart="1118" bodyend="1124" declfile="iceberg/json_internal.h" declline="308" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a7b4255d1b27265c60d7be243c68065b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1MappedFields" kindref="compound">MappedFields</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; MappedFields &gt; &gt; iceberg::MappedFieldsFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>MappedFieldsFromJson</name>
        <qualifiedname>iceberg::MappedFieldsFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="classiceberg_1_1MappedFields" kindref="compound">MappedFields</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="classiceberg_1_1MappedFields" kindref="compound">MappedFields</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="classiceberg_1_1MappedFields" kindref="compound">MappedFields</ref></computeroutput> object or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="1126" column="8" bodyfile="iceberg/json_internal.cc" bodystart="1126" bodyend="1139" declfile="iceberg/json_internal.h" declline="314" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1a281859645ae02471ba3c35d692f07742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nlohmann::json</type>
        <definition>ICEBERG_EXPORT nlohmann::json iceberg::ToJson</definition>
        <argsstring>(const NameMapping &amp;name_mapping)</argsstring>
        <name>ToJson</name>
        <qualifiedname>iceberg::ToJson</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref> &amp;</type>
          <declname>name_mapping</declname>
        </param>
        <briefdescription>
<para>Serializes a <computeroutput><ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref></computeroutput> object to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name_mapping</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref></computeroutput> object to be serialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A JSON object representing the <computeroutput><ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="1141" column="16" bodyfile="iceberg/json_internal.cc" bodystart="1141" bodyend="1143" declfile="iceberg/json_internal.h" declline="321" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="json__internal_8cc_1af403af84d51cd03a205c397c331f0046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; NameMapping &gt; &gt; iceberg::NameMappingFromJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>NameMappingFromJson</name>
        <qualifiedname>iceberg::NameMappingFromJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Deserializes a JSON object into a <computeroutput><ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref></computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object representing a <computeroutput><ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref></computeroutput> object or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/json_internal.cc" line="1145" column="8" bodyfile="iceberg/json_internal.cc" bodystart="1145" bodyend="1148" declfile="iceberg/json_internal.h" declline="327" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="manifest__entry_8h_1a9e1e75f9fcb8ce5e4a8f2a264c399d08" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>ICEBERG_EXPORT constexpr Result&lt; ManifestStatus &gt;</type>
        <definition>ICEBERG_EXPORT constexpr Result&lt; ManifestStatus &gt; iceberg::ManifestStatusFromInt</definition>
        <argsstring>(int status) noexcept</argsstring>
        <name>ManifestStatusFromInt</name>
        <qualifiedname>iceberg::ManifestStatusFromInt</qualifiedname>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Get the relative manifest status type from int. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_entry.h" line="46" column="33" bodyfile="iceberg/manifest_entry.h" bodystart="46" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="manifest__entry_8h_1ac91cfb6acfaf4211754d59b3a17cf94c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>ICEBERG_EXPORT constexpr Result&lt; <ref refid="structiceberg_1_1DataFile_1a526cb5d9e7fc986cf3fc0190b0927857" kindref="member">DataFile::Content</ref> &gt;</type>
        <definition>ICEBERG_EXPORT constexpr Result&lt; DataFile::Content &gt; iceberg::DataFileContentFromInt</definition>
        <argsstring>(int content) noexcept</argsstring>
        <name>DataFileContentFromInt</name>
        <qualifiedname>iceberg::DataFileContentFromInt</qualifiedname>
        <param>
          <type>int</type>
          <declname>content</declname>
        </param>
        <briefdescription>
<para>Get the relative data file content type from int. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_entry.h" line="316" column="33" bodyfile="iceberg/manifest_entry.h" bodystart="316" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="manifest__list_8h_1aacb986a53d5510b5fa3c971deff4f3dc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>ICEBERG_EXPORT constexpr std::string_view</type>
        <definition>ICEBERG_EXPORT constexpr std::string_view iceberg::ToString</definition>
        <argsstring>(ManifestFile::Content type) noexcept</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type><ref refid="structiceberg_1_1ManifestFile_1a94a84385ede1722fcb750664bdd99dec" kindref="member">ManifestFile::Content</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Get the relative manifest content type name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_list.h" line="221" column="43" bodyfile="iceberg/manifest_list.h" bodystart="221" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="manifest__list_8h_1a647d4338dc47e48336bc54ef6f981f1a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>ICEBERG_EXPORT constexpr Result&lt; <ref refid="structiceberg_1_1ManifestFile_1a94a84385ede1722fcb750664bdd99dec" kindref="member">ManifestFile::Content</ref> &gt;</type>
        <definition>ICEBERG_EXPORT constexpr Result&lt; ManifestFile::Content &gt; iceberg::ManifestFileContentFromString</definition>
        <argsstring>(std::string_view str) noexcept</argsstring>
        <name>ManifestFileContentFromString</name>
        <qualifiedname>iceberg::ManifestFileContentFromString</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Get the relative manifest content type from name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_list.h" line="232" column="33" bodyfile="iceberg/manifest_list.h" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__internal_8cc_1a86869c15a01ce904fefd22c3166f6034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt; uint8_t &gt; iceberg::ArrowArrayViewGetInt8Vector</definition>
        <argsstring>(const ArrowArrayView *view, int32_t offset_idx)</argsstring>
        <name>ArrowArrayViewGetInt8Vector</name>
        <qualifiedname>iceberg::ArrowArrayViewGetInt8Vector</qualifiedname>
        <param>
          <type>const ArrowArrayView *</type>
          <declname>view</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>offset_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_reader_internal.cc" line="123" column="13" bodyfile="iceberg/manifest_reader_internal.cc" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__internal_8cc_1a8b0e984614570d147bff028ada955a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status iceberg::ParsePartitionFieldSummaryList</definition>
        <argsstring>(ArrowArrayView *view_of_column, std::vector&lt; ManifestFile &gt; &amp;manifest_files)</argsstring>
        <name>ParsePartitionFieldSummaryList</name>
        <qualifiedname>iceberg::ParsePartitionFieldSummaryList</qualifiedname>
        <param>
          <type>ArrowArrayView *</type>
          <declname>view_of_column</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structiceberg_1_1ManifestFile" kindref="compound">ManifestFile</ref> &gt; &amp;</type>
          <declname>manifest_files</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_reader_internal.cc" line="129" column="8" bodyfile="iceberg/manifest_reader_internal.cc" bodystart="129" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__internal_8cc_1a1c29f41459bc512f5fadbb3f2092bdbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::vector&lt; <ref refid="structiceberg_1_1ManifestFile" kindref="compound">ManifestFile</ref> &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; ManifestFile &gt; &gt; iceberg::ParseManifestList</definition>
        <argsstring>(ArrowSchema *schema, ArrowArray *array_in, const Schema &amp;iceberg_schema)</argsstring>
        <name>ParseManifestList</name>
        <qualifiedname>iceberg::ParseManifestList</qualifiedname>
        <param>
          <type><ref refid="structArrowSchema" kindref="compound">ArrowSchema</ref> *</type>
          <declname>schema</declname>
        </param>
        <param>
          <type><ref refid="structArrowArray" kindref="compound">ArrowArray</ref> *</type>
          <declname>array_in</declname>
        </param>
        <param>
          <type>const <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>iceberg_schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_reader_internal.cc" line="192" column="8" bodyfile="iceberg/manifest_reader_internal.cc" bodystart="192" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__internal_8cc_1a9df3eed334da6a9e2eb2c7843c607dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status iceberg::ParseLiteral</definition>
        <argsstring>(ArrowArrayView *view_of_partition, int64_t row_idx, std::vector&lt; ManifestEntry &gt; &amp;manifest_entries)</argsstring>
        <name>ParseLiteral</name>
        <qualifiedname>iceberg::ParseLiteral</qualifiedname>
        <param>
          <type>ArrowArrayView *</type>
          <declname>view_of_partition</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>row_idx</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structiceberg_1_1ManifestEntry" kindref="compound">ManifestEntry</ref> &gt; &amp;</type>
          <declname>manifest_entries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_reader_internal.cc" line="296" column="8" bodyfile="iceberg/manifest_reader_internal.cc" bodystart="296" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__internal_8cc_1a03aa112680c787336cb8adb0dd64a43c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status iceberg::ParseDataFile</definition>
        <argsstring>(const std::shared_ptr&lt; StructType &gt; &amp;data_file_schema, ArrowArrayView *view_of_column, std::vector&lt; ManifestEntry &gt; &amp;manifest_entries)</argsstring>
        <name>ParseDataFile</name>
        <qualifiedname>iceberg::ParseDataFile</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classiceberg_1_1StructType" kindref="compound">StructType</ref> &gt; &amp;</type>
          <declname>data_file_schema</declname>
        </param>
        <param>
          <type>ArrowArrayView *</type>
          <declname>view_of_column</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structiceberg_1_1ManifestEntry" kindref="compound">ManifestEntry</ref> &gt; &amp;</type>
          <declname>manifest_entries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_reader_internal.cc" line="330" column="8" bodyfile="iceberg/manifest_reader_internal.cc" bodystart="330" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__internal_8cc_1a7092cde63813b9496fdefc27b13692ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::vector&lt; <ref refid="structiceberg_1_1ManifestEntry" kindref="compound">ManifestEntry</ref> &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; ManifestEntry &gt; &gt; iceberg::ParseManifestEntry</definition>
        <argsstring>(ArrowSchema *schema, ArrowArray *array_in, const Schema &amp;iceberg_schema)</argsstring>
        <name>ParseManifestEntry</name>
        <qualifiedname>iceberg::ParseManifestEntry</qualifiedname>
        <param>
          <type><ref refid="structArrowSchema" kindref="compound">ArrowSchema</ref> *</type>
          <declname>schema</declname>
        </param>
        <param>
          <type><ref refid="structArrowArray" kindref="compound">ArrowArray</ref> *</type>
          <declname>array_in</declname>
        </param>
        <param>
          <type>const <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>iceberg_schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_reader_internal.cc" line="455" column="8" bodyfile="iceberg/manifest_reader_internal.cc" bodystart="455" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__internal_8cc_1a0b4621d08d68b4c1d03bbd4982b2cfb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; ManifestFileField &gt;</type>
        <definition>Result&lt; ManifestFileField &gt; iceberg::ManifestFileFieldFromIndex</definition>
        <argsstring>(int32_t index)</argsstring>
        <name>ManifestFileFieldFromIndex</name>
        <qualifiedname>iceberg::ManifestFileFieldFromIndex</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_reader_internal.cc" line="572" column="8" bodyfile="iceberg/manifest_reader_internal.cc" bodystart="572" bodyend="577" declfile="iceberg/manifest_reader_internal.h" declline="85" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="manifest__writer_8cc_1a2697b2e9cd5c7eb8c4fa63ad9a61a0fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1Writer" kindref="compound">Writer</ref> &gt; &gt;</type>
        <definition>Result&lt; std::unique_ptr&lt; Writer &gt; &gt; iceberg::OpenFileWriter</definition>
        <argsstring>(std::string_view location, std::shared_ptr&lt; Schema &gt; schema, std::shared_ptr&lt; FileIO &gt; file_io, std::unordered_map&lt; std::string, std::string &gt; properties)</argsstring>
        <name>OpenFileWriter</name>
        <qualifiedname>iceberg::OpenFileWriter</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>location</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &gt;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classiceberg_1_1FileIO" kindref="compound">FileIO</ref> &gt;</type>
          <declname>file_io</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; std::string, std::string &gt;</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/manifest_writer.cc" line="56" column="8" bodyfile="iceberg/manifest_writer.cc" bodystart="56" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping_8cc_1a497c7ddf34f3bab8f59d9ad4e7bb909a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iceberg::operator==</definition>
        <argsstring>(const MappedField &amp;lhs, const MappedField &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>iceberg::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/name_mapping.cc" line="219" column="6" bodyfile="iceberg/name_mapping.cc" bodystart="219" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping_8cc_1ab2498fc61e8c40bf9ee98bc42acd7166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iceberg::operator==</definition>
        <argsstring>(const MappedFields &amp;lhs, const MappedFields &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>iceberg::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1MappedFields" kindref="compound">MappedFields</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classiceberg_1_1MappedFields" kindref="compound">MappedFields</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/name_mapping.cc" line="235" column="6" bodyfile="iceberg/name_mapping.cc" bodystart="235" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping_8cc_1ab03d254a55246e0e557d0c4656a4db3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iceberg::operator==</definition>
        <argsstring>(const NameMapping &amp;lhs, const NameMapping &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>iceberg::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/name_mapping.cc" line="249" column="6" bodyfile="iceberg/name_mapping.cc" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping_8cc_1a8b947fc7280e03e5838d4e7ea88cf429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>ICEBERG_EXPORT std::string iceberg::ToString</definition>
        <argsstring>(const MappedField &amp;field)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/name_mapping.cc" line="253" column="13" bodyfile="iceberg/name_mapping.cc" bodystart="253" bodyend="258" declfile="iceberg/name_mapping.h" declline="134" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping_8cc_1aade3fc3730f324faa39e06e6050a48c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>ICEBERG_EXPORT std::string iceberg::ToString</definition>
        <argsstring>(const MappedFields &amp;fields)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1MappedFields" kindref="compound">MappedFields</ref> &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/name_mapping.cc" line="260" column="13" bodyfile="iceberg/name_mapping.cc" bodystart="260" bodyend="262" declfile="iceberg/name_mapping.h" declline="135" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping_8cc_1a7d62ec9d0dabd389be0472c33557ec4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>ICEBERG_EXPORT std::string iceberg::ToString</definition>
        <argsstring>(const NameMapping &amp;name_mapping)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref> &amp;</type>
          <declname>name_mapping</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/name_mapping.cc" line="264" column="13" bodyfile="iceberg/name_mapping.cc" bodystart="264" bodyend="275" declfile="iceberg/name_mapping.h" declline="136" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping_8cc_1a44f19b655883ab0f951ee133a641a932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::unique_ptr&lt; NameMapping &gt; &gt; iceberg::CreateMapping</definition>
        <argsstring>(const Schema &amp;schema)</argsstring>
        <name>CreateMapping</name>
        <qualifiedname>iceberg::CreateMapping</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Create a name-based mapping for a schema. </para>
        </briefdescription>
        <detaileddescription>
<para>The mapping returned by this method will use the schema&apos;s name for each field.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>The schema to create the mapping for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref> instance initialized with the schema&apos;s fields and names. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/name_mapping.cc" line="328" column="8" bodyfile="iceberg/name_mapping.cc" bodystart="328" bodyend="336" declfile="iceberg/name_mapping.h" declline="144" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="manifest__wrapper_8cc_1a05c744e83f64d7d742d88c0b156bba0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classiceberg_1_1StructLike" kindref="compound">StructLike</ref> &gt;</type>
        <definition>std::unique_ptr&lt; StructLike &gt; iceberg::FromManifestFile</definition>
        <argsstring>(const ManifestFile &amp;file)</argsstring>
        <name>FromManifestFile</name>
        <qualifiedname>iceberg::FromManifestFile</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1ManifestFile" kindref="compound">ManifestFile</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/row/manifest_wrapper.cc" line="133" column="17" bodyfile="iceberg/row/manifest_wrapper.cc" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="schema__internal_8cc_1ad6d23f1bc4862d06b7b2fedd8e3e6b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>ICEBERG_EXPORT Status iceberg::ToArrowSchema</definition>
        <argsstring>(const Schema &amp;schema, ArrowSchema *out)</argsstring>
        <name>ToArrowSchema</name>
        <qualifiedname>iceberg::ToArrowSchema</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type><ref refid="structArrowSchema" kindref="compound">ArrowSchema</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Convert an Iceberg schema to an Arrow schema. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>The Iceberg schema to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>The Arrow schema to convert to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/schema_internal.cc" line="165" column="8" bodyfile="iceberg/schema_internal.cc" bodystart="165" bodyend="180" declfile="iceberg/schema_internal.h" declline="38" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="schema__internal_8cc_1a3f08c8a4ac571986cbe2ed5953c6debc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>std::unique_ptr&lt; Schema &gt; iceberg::FromStructType</definition>
        <argsstring>(StructType &amp;&amp;struct_type, std::optional&lt; int32_t &gt; schema_id)</argsstring>
        <name>FromStructType</name>
        <qualifiedname>iceberg::FromStructType</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1StructType" kindref="compound">StructType</ref> &amp;&amp;</type>
          <declname>struct_type</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t &gt;</type>
          <declname>schema_id</declname>
        </param>
        <briefdescription>
<para>Convert a struct type to an Iceberg schema. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">struct_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The struct type to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">schema_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The schema ID of the Iceberg schema. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Iceberg schema. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/schema_internal.cc" line="306" column="17" bodyfile="iceberg/schema_internal.cc" bodystart="306" bodyend="314" declfile="iceberg/schema_internal.h" declline="53" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="schema__internal_8cc_1ae34fdfb5ab0cb6d20deaf65b6aa55d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &gt; &gt;</type>
        <definition>Result&lt; std::unique_ptr&lt; Schema &gt; &gt; iceberg::FromArrowSchema</definition>
        <argsstring>(const ArrowSchema &amp;schema, std::optional&lt; int32_t &gt; schema_id)</argsstring>
        <name>FromArrowSchema</name>
        <qualifiedname>iceberg::FromArrowSchema</qualifiedname>
        <param>
          <type>const <ref refid="structArrowSchema" kindref="compound">ArrowSchema</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>std::optional&lt; int32_t &gt;</type>
          <declname>schema_id</declname>
        </param>
        <briefdescription>
<para>Convert an Arrow schema to an Iceberg schema. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>The Arrow schema to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">schema_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The schema ID of the Iceberg schema. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Iceberg schema or an error if the conversion fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/schema_internal.cc" line="316" column="8" bodyfile="iceberg/schema_internal.cc" bodystart="316" bodyend="326" declfile="iceberg/schema_internal.h" declline="45" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="schema__internal_8cc_1ade959c720377d0da04e271e64835a53c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classiceberg_1_1StructType" kindref="compound">StructType</ref> &gt;</type>
        <definition>std::unique_ptr&lt; StructType &gt; iceberg::ToStructType</definition>
        <argsstring>(const Schema &amp;schema)</argsstring>
        <name>ToStructType</name>
        <qualifiedname>iceberg::ToStructType</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/schema_internal.cc" line="328" column="17" bodyfile="iceberg/schema_internal.cc" bodystart="328" bodyend="331" declfile="iceberg/schema_internal.h" declline="56" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="schema__util_8cc_1a3b1a267c8d95870654d74edee09e7b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; <ref refid="structiceberg_1_1SchemaProjection" kindref="compound">SchemaProjection</ref> &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; SchemaProjection &gt; iceberg::Project</definition>
        <argsstring>(const Schema &amp;expected_schema, const Schema &amp;source_schema, bool prune_source)</argsstring>
        <name>Project</name>
        <qualifiedname>iceberg::Project</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>expected_schema</declname>
        </param>
        <param>
          <type>const <ref refid="classiceberg_1_1Schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>source_schema</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>prune_source</declname>
        </param>
        <briefdescription>
<para>Project the expected schema on top of the source schema. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expected_schema</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected schema. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_schema</parametername>
</parameternamelist>
<parameterdescription>
<para>The source schema. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prune_source</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the source schema can be pruned to project the expected schema on it. For example, literally a Parquet reader implementation is capable of column pruning, so <computeroutput>prune_source</computeroutput> is set to true in this case such that the <computeroutput>from</computeroutput> field in <computeroutput><ref refid="structiceberg_1_1FieldProjection" kindref="compound">FieldProjection</ref></computeroutput> exactly reflects the position (relative to its nesting level) to get the column value from the reader. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The projection result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/schema_util.cc" line="156" column="8" bodyfile="iceberg/schema_util.cc" bodystart="156" bodyend="161" declfile="iceberg/schema_util.h" declline="91" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="schema__util_8cc_1a40720e1964ff41e9f0600d3aa5d13bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string_view</type>
        <definition>ICEBERG_EXPORT std::string_view iceberg::ToString</definition>
        <argsstring>(FieldProjection::Kind kind)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942ad" kindref="member">FieldProjection::Kind</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/schema_util.cc" line="163" column="18" bodyfile="iceberg/schema_util.cc" bodystart="163" bodyend="177" declfile="iceberg/schema_util.h" declline="95" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="schema__util_8cc_1adc5585154c243c8c4768579c6f673a0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>ICEBERG_EXPORT std::string iceberg::ToString</definition>
        <argsstring>(const FieldProjection &amp;projection)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1FieldProjection" kindref="compound">FieldProjection</ref> &amp;</type>
          <declname>projection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/schema_util.cc" line="179" column="13" bodyfile="iceberg/schema_util.cc" bodystart="179" bodyend="190" declfile="iceberg/schema_util.h" declline="96" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="schema__util_8cc_1a0ad85dcbbd6c926ff5b6946863c04327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>ICEBERG_EXPORT std::string iceberg::ToString</definition>
        <argsstring>(const SchemaProjection &amp;projection)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1SchemaProjection" kindref="compound">SchemaProjection</ref> &amp;</type>
          <declname>projection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/schema_util.cc" line="192" column="13" bodyfile="iceberg/schema_util.cc" bodystart="192" bodyend="194" declfile="iceberg/schema_util.h" declline="97" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__internal_8h_1afa31cede9004e0a6efbb0a8bf71ef9b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void iceberg::PruneFieldProjection</definition>
        <argsstring>(FieldProjection &amp;field_projection)</argsstring>
        <name>PruneFieldProjection</name>
        <qualifiedname>iceberg::PruneFieldProjection</qualifiedname>
        <param>
          <type><ref refid="structiceberg_1_1FieldProjection" kindref="compound">FieldProjection</ref> &amp;</type>
          <declname>field_projection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/schema_util_internal.h" line="29" column="13" bodyfile="iceberg/schema_util_internal.h" bodystart="29" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="snapshot_8h_1a66c712314b7f24e819af7cb09429b4f5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>ICEBERG_EXPORT constexpr std::string_view</type>
        <definition>ICEBERG_EXPORT constexpr std::string_view iceberg::ToString</definition>
        <argsstring>(SnapshotRefType type) noexcept</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type>SnapshotRefType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Get the relative snapshot reference type name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/snapshot.h" line="46" column="43" bodyfile="iceberg/snapshot.h" bodystart="46" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="snapshot_8h_1a5028419abfe2479746086ccf712ce7d7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>ICEBERG_EXPORT constexpr Result&lt; SnapshotRefType &gt;</type>
        <definition>ICEBERG_EXPORT constexpr Result&lt; SnapshotRefType &gt; iceberg::SnapshotRefTypeFromString</definition>
        <argsstring>(std::string_view str) noexcept</argsstring>
        <name>SnapshotRefTypeFromString</name>
        <qualifiedname>iceberg::SnapshotRefTypeFromString</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Get the relative snapshot reference type from name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/snapshot.h" line="56" column="33" bodyfile="iceberg/snapshot.h" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="sort__field_8h_1af76315532529539fe49b0681574ec3a7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ICEBERG_EXPORT constexpr std::string_view</type>
        <definition>ICEBERG_EXPORT constexpr std::string_view iceberg::ToString</definition>
        <argsstring>(SortDirection direction)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type><ref refid="sort__field_8h_1a4f6d1460e9650c271d2f5f70766361e1" kindref="member">SortDirection</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Get the relative sort direction name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/sort_field.h" line="45" column="43" bodyfile="iceberg/sort_field.h" bodystart="45" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="sort__field_8h_1a77d79b68cd09ee3cf76595297d52df69" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ICEBERG_EXPORT constexpr Result&lt; <ref refid="sort__field_8h_1a4f6d1460e9650c271d2f5f70766361e1" kindref="member">SortDirection</ref> &gt;</type>
        <definition>ICEBERG_EXPORT constexpr Result&lt; SortDirection &gt; iceberg::SortDirectionFromString</definition>
        <argsstring>(std::string_view str)</argsstring>
        <name>SortDirectionFromString</name>
        <qualifiedname>iceberg::SortDirectionFromString</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Get the relative sort direction from name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/sort_field.h" line="56" column="33" bodyfile="iceberg/sort_field.h" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="sort__field_8h_1a247477b8b0fb4a05bbd67146ebe702c2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ICEBERG_EXPORT constexpr std::string_view</type>
        <definition>ICEBERG_EXPORT constexpr std::string_view iceberg::ToString</definition>
        <argsstring>(NullOrder null_order)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type><ref refid="sort__field_8h_1a7d2f6c79654ba49df0d36c1724041283" kindref="member">NullOrder</ref></type>
          <declname>null_order</declname>
        </param>
        <briefdescription>
<para>Get the relative null order name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/sort_field.h" line="70" column="43" bodyfile="iceberg/sort_field.h" bodystart="70" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="sort__field_8h_1a155ab590aceb8d431e32957a2ba4799e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ICEBERG_EXPORT constexpr Result&lt; <ref refid="sort__field_8h_1a7d2f6c79654ba49df0d36c1724041283" kindref="member">NullOrder</ref> &gt;</type>
        <definition>ICEBERG_EXPORT constexpr Result&lt; NullOrder &gt; iceberg::NullOrderFromString</definition>
        <argsstring>(std::string_view str)</argsstring>
        <name>NullOrderFromString</name>
        <qualifiedname>iceberg::NullOrderFromString</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Get the relative null order from name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/sort_field.h" line="81" column="33" bodyfile="iceberg/sort_field.h" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="statistics__file_8cc_1a296e114b97cc950477cdfc2c47792ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>ICEBERG_EXPORT std::string iceberg::ToString</definition>
        <argsstring>(const BlobMetadata &amp;blob_metadata)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1BlobMetadata" kindref="compound">BlobMetadata</ref> &amp;</type>
          <declname>blob_metadata</declname>
        </param>
        <briefdescription>
<para>Returns a string representation of a <ref refid="structiceberg_1_1BlobMetadata" kindref="compound">BlobMetadata</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/statistics_file.cc" line="28" column="13" bodyfile="iceberg/statistics_file.cc" bodystart="28" bodyend="38" declfile="iceberg/statistics_file.h" declline="84" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="statistics__file_8cc_1a65fdab3cb1265e12ca59ae45250ec063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>ICEBERG_EXPORT std::string iceberg::ToString</definition>
        <argsstring>(const StatisticsFile &amp;statistics_file)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1StatisticsFile" kindref="compound">StatisticsFile</ref> &amp;</type>
          <declname>statistics_file</declname>
        </param>
        <briefdescription>
<para>Returns a string representation of a <ref refid="structiceberg_1_1StatisticsFile" kindref="compound">StatisticsFile</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/statistics_file.cc" line="40" column="13" bodyfile="iceberg/statistics_file.cc" bodystart="40" bodyend="51" declfile="iceberg/statistics_file.h" declline="87" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="statistics__file_8cc_1a41870c3d1f8d0e955d9f8bbc8fe09388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>ICEBERG_EXPORT std::string iceberg::ToString</definition>
        <argsstring>(const PartitionStatisticsFile &amp;partition_statistics_file)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1PartitionStatisticsFile" kindref="compound">PartitionStatisticsFile</ref> &amp;</type>
          <declname>partition_statistics_file</declname>
        </param>
        <briefdescription>
<para>Returns a string representation of a <ref refid="structiceberg_1_1PartitionStatisticsFile" kindref="compound">PartitionStatisticsFile</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/statistics_file.cc" line="53" column="13" bodyfile="iceberg/statistics_file.cc" bodystart="53" bodyend="59" declfile="iceberg/statistics_file.h" declline="90" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata_8cc_1a740ff861b004756f412b0da494045f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>ICEBERG_EXPORT std::string iceberg::ToString</definition>
        <argsstring>(const SnapshotLogEntry &amp;entry)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1SnapshotLogEntry" kindref="compound">SnapshotLogEntry</ref> &amp;</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Returns a string representation of a <ref refid="structiceberg_1_1SnapshotLogEntry" kindref="compound">SnapshotLogEntry</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/table_metadata.cc" line="48" column="13" bodyfile="iceberg/table_metadata.cc" bodystart="48" bodyend="51" declfile="iceberg/table_metadata.h" declline="143" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata_8cc_1a5bb99468cb26d1831b43b40aab89be75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>ICEBERG_EXPORT std::string iceberg::ToString</definition>
        <argsstring>(const MetadataLogEntry &amp;entry)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1MetadataLogEntry" kindref="compound">MetadataLogEntry</ref> &amp;</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Returns a string representation of a <ref refid="structiceberg_1_1MetadataLogEntry" kindref="compound">MetadataLogEntry</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/table_metadata.cc" line="53" column="13" bodyfile="iceberg/table_metadata.cc" bodystart="53" bodyend="56" declfile="iceberg/table_metadata.h" declline="146" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata_8cc_1af10e2bb8a40961302269eeab85b0e0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iceberg::operator==</definition>
        <argsstring>(const TableMetadata &amp;lhs, const TableMetadata &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>iceberg::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/table_metadata.cc" line="143" column="6" bodyfile="iceberg/table_metadata.cc" bodystart="143" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="arrow__fs__file__io__test_8cc_1a877270f3b51804d0e0e50bec381f153d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(LocalFileIOTest, ReadWriteFile)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1LocalFileIOTest" kindref="compound">LocalFileIOTest</ref></type>
        </param>
        <param>
          <type>ReadWriteFile</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/arrow_fs_file_io_test.cc" line="42" column="1" bodyfile="iceberg/test/arrow_fs_file_io_test.cc" bodystart="42" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="arrow__fs__file__io__test_8cc_1acbdd732303345c61e9aab9da9616eda7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(LocalFileIOTest, DeleteFile)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1LocalFileIOTest" kindref="compound">LocalFileIOTest</ref></type>
        </param>
        <param>
          <type>DeleteFile</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/arrow_fs_file_io_test.cc" line="55" column="1" bodyfile="iceberg/test/arrow_fs_file_io_test.cc" bodystart="55" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="arrow__test_8cc_1a9348aa85455bab70c5f91e5774c9ceec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(ToArrowSchemaTest, PrimitiveType)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ToArrowSchemaTest" kindref="compound">ToArrowSchemaTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1PrimitiveType" kindref="compound">PrimitiveType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/arrow_test.cc" line="46" column="1" bodyfile="iceberg/test/arrow_test.cc" bodystart="46" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="arrow__test_8cc_1af9e794b2b8964b8e7301ff30e7455c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(SchemaConversion, ToArrowSchemaTest, ::testing::Values(ToArrowSchemaParam{.iceberg_type=iceberg::boolean(),.optional=false,.arrow_type=::arrow::boolean()}, ToArrowSchemaParam{.iceberg_type=iceberg::int32(),.optional=true,.arrow_type=::arrow::int32()}, ToArrowSchemaParam{.iceberg_type=iceberg::int64(),.arrow_type=::arrow::int64()}, ToArrowSchemaParam{.iceberg_type=iceberg::float32(),.arrow_type=::arrow::float32()}, ToArrowSchemaParam{.iceberg_type=iceberg::float64(),.arrow_type=::arrow::float64()}, ToArrowSchemaParam{.iceberg_type=iceberg::decimal(10, 2),.arrow_type=::arrow::decimal128(10, 2)}, ToArrowSchemaParam{.iceberg_type=iceberg::date(),.arrow_type=::arrow::date32()}, ToArrowSchemaParam{.iceberg_type=iceberg::time(),.arrow_type=::arrow::time64(arrow::TimeUnit::MICRO)}, ToArrowSchemaParam{.iceberg_type=iceberg::timestamp(),.arrow_type=::arrow::timestamp(arrow::TimeUnit::MICRO)}, ToArrowSchemaParam{.iceberg_type=iceberg::timestamp(),.arrow_type=::arrow::timestamp(arrow::TimeUnit::MICRO)}, ToArrowSchemaParam{.iceberg_type=iceberg::string(),.arrow_type=::arrow::utf8()}, ToArrowSchemaParam{.iceberg_type=iceberg::binary(),.arrow_type=::arrow::binary()}, ToArrowSchemaParam{.iceberg_type=iceberg::uuid(),.arrow_type=::arrow::extension::uuid()}, ToArrowSchemaParam{.iceberg_type=iceberg::fixed(20),.arrow_type=::arrow::fixed_size_binary(20)}))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>SchemaConversion</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1ToArrowSchemaTest" kindref="compound">ToArrowSchemaTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1gafb5f5aec1d1d6218809ee512e2f87e83" kindref="member">iceberg::boolean</ref>(),.optional=false,.arrow_type=::arrow::boolean()}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),.optional=true,.arrow_type=::arrow::int32()}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>(),.arrow_type=::arrow::int64()}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">iceberg::float32</ref>(),.arrow_type=::arrow::float32()}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">iceberg::float64</ref>(),.arrow_type=::arrow::float64()}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">iceberg::decimal</ref>(10, 2),.arrow_type=::arrow::decimal128(10, 2)}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">iceberg::date</ref>(),.arrow_type=::arrow::date32()}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1ga7048c118c821d9aba4c08f3f23262b0f" kindref="member">iceberg::time</ref>(),.arrow_type=::arrow::time64(arrow::TimeUnit::MICRO)}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.arrow_type=::arrow::timestamp(arrow::TimeUnit::MICRO)}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.arrow_type=::arrow::timestamp(arrow::TimeUnit::MICRO)}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),.arrow_type=::arrow::utf8()}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kindref="member">iceberg::binary</ref>(),.arrow_type=::arrow::binary()}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1gafcf0f5e6522390678b91a9515b174bcf" kindref="member">iceberg::uuid</ref>(),.arrow_type=::arrow::extension::uuid()}, <ref refid="structiceberg_1_1ToArrowSchemaParam" kindref="compound">ToArrowSchemaParam</ref>{.iceberg_type=<ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">iceberg::fixed</ref>(20),.arrow_type=::arrow::fixed_size_binary(20)})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/arrow_test.cc" line="72" column="1" declfile="iceberg/test/arrow_test.cc" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="arrow__test_8cc_1a0a544ba5bbf3e6e6dcb24fb8c9bc1e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ToArrowSchemaTest, StructType)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ToArrowSchemaTest" kindref="compound">ToArrowSchemaTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1StructType" kindref="compound">StructType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/arrow_test.cc" line="122" column="1" bodyfile="iceberg/test/arrow_test.cc" bodystart="122" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="arrow__test_8cc_1aeb8d834bb93f27f7583c4176192a7dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ToArrowSchemaTest, ListType)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ToArrowSchemaTest" kindref="compound">ToArrowSchemaTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1ListType" kindref="compound">ListType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/arrow_test.cc" line="160" column="1" bodyfile="iceberg/test/arrow_test.cc" bodystart="160" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="arrow__test_8cc_1a19e3f7903ec7d4c610713a0170a3e222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ToArrowSchemaTest, MapType)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ToArrowSchemaTest" kindref="compound">ToArrowSchemaTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1MapType" kindref="compound">MapType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/arrow_test.cc" line="188" column="1" bodyfile="iceberg/test/arrow_test.cc" bodystart="188" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="arrow__test_8cc_1a6a042ac337a1a8310f86915fa6dbf557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(FromArrowSchemaTest, PrimitiveType)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1FromArrowSchemaTest" kindref="compound">FromArrowSchemaTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1PrimitiveType" kindref="compound">PrimitiveType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/arrow_test.cc" line="238" column="1" bodyfile="iceberg/test/arrow_test.cc" bodystart="238" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="arrow__test_8cc_1a644d8bf9daf8384a6742f2fe8fd0de52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(SchemaConversion, FromArrowSchemaTest, ::testing::Values(FromArrowSchemaParam{.arrow_type=::arrow::boolean(),.optional=false,.iceberg_type=iceberg::boolean()}, FromArrowSchemaParam{.arrow_type=::arrow::int32(),.optional=true,.iceberg_type=iceberg::int32()}, FromArrowSchemaParam{.arrow_type=::arrow::int64(),.iceberg_type=iceberg::int64()}, FromArrowSchemaParam{.arrow_type=::arrow::float32(),.iceberg_type=iceberg::float32()}, FromArrowSchemaParam{.arrow_type=::arrow::float64(),.iceberg_type=iceberg::float64()}, FromArrowSchemaParam{.arrow_type=::arrow::decimal128(10, 2),.iceberg_type=iceberg::decimal(10, 2)}, FromArrowSchemaParam{.arrow_type=::arrow::date32(),.iceberg_type=iceberg::date()}, FromArrowSchemaParam{.arrow_type=::arrow::time64(arrow::TimeUnit::MICRO),.iceberg_type=iceberg::time()}, FromArrowSchemaParam{.arrow_type=::arrow::timestamp(arrow::TimeUnit::MICRO),.iceberg_type=iceberg::timestamp()}, FromArrowSchemaParam{ .arrow_type=::arrow::timestamp(arrow::TimeUnit::MICRO, &quot;UTC&quot;),.iceberg_type=std::make_shared&lt; TimestampTzType &gt;()}, FromArrowSchemaParam{.arrow_type=::arrow::utf8(),.iceberg_type=iceberg::string()}, FromArrowSchemaParam{.arrow_type=::arrow::binary(),.iceberg_type=iceberg::binary()}, FromArrowSchemaParam{.arrow_type=::arrow::extension::uuid(),.iceberg_type=iceberg::uuid()}, FromArrowSchemaParam{.arrow_type=::arrow::fixed_size_binary(20),.iceberg_type=iceberg::fixed(20)}))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>SchemaConversion</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1FromArrowSchemaTest" kindref="compound">FromArrowSchemaTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::boolean(),.optional=false,.iceberg_type=<ref refid="group__type-factories_1gafb5f5aec1d1d6218809ee512e2f87e83" kindref="member">iceberg::boolean</ref>()}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::int32(),.optional=true,.iceberg_type=<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>()}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::int64(),.iceberg_type=<ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::float32(),.iceberg_type=<ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">iceberg::float32</ref>()}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::float64(),.iceberg_type=<ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">iceberg::float64</ref>()}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::decimal128(10, 2),.iceberg_type=<ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">iceberg::decimal</ref>(10, 2)}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::date32(),.iceberg_type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">iceberg::date</ref>()}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::time64(arrow::TimeUnit::MICRO),.iceberg_type=<ref refid="group__type-factories_1ga7048c118c821d9aba4c08f3f23262b0f" kindref="member">iceberg::time</ref>()}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::timestamp(arrow::TimeUnit::MICRO),.iceberg_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>()}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{ .arrow_type=::arrow::timestamp(arrow::TimeUnit::MICRO, &quot;UTC&quot;),.iceberg_type=std::make_shared&lt; <ref refid="classiceberg_1_1TimestampTzType" kindref="compound">TimestampTzType</ref> &gt;()}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::utf8(),.iceberg_type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::binary(),.iceberg_type=<ref refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kindref="member">iceberg::binary</ref>()}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::extension::uuid(),.iceberg_type=<ref refid="group__type-factories_1gafcf0f5e6522390678b91a9515b174bcf" kindref="member">iceberg::uuid</ref>()}, <ref refid="structiceberg_1_1FromArrowSchemaParam" kindref="compound">FromArrowSchemaParam</ref>{.arrow_type=::arrow::fixed_size_binary(20),.iceberg_type=<ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">iceberg::fixed</ref>(20)})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/arrow_test.cc" line="266" column="1" declfile="iceberg/test/arrow_test.cc" declline="266" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="arrow__test_8cc_1a670df8adf8edfa6dd062d8346bd7e174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(FromArrowSchemaTest, StructType)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1FromArrowSchemaTest" kindref="compound">FromArrowSchemaTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1StructType" kindref="compound">StructType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/arrow_test.cc" line="301" column="1" bodyfile="iceberg/test/arrow_test.cc" bodystart="301" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="arrow__test_8cc_1a41aff6f560a6a3de455119584b2f2288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(FromArrowSchemaTest, ListType)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1FromArrowSchemaTest" kindref="compound">FromArrowSchemaTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1ListType" kindref="compound">ListType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/arrow_test.cc" line="358" column="1" bodyfile="iceberg/test/arrow_test.cc" bodystart="358" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="arrow__test_8cc_1a74534cf368a37661e61946896b1db141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(FromArrowSchemaTest, MapType)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1FromArrowSchemaTest" kindref="compound">FromArrowSchemaTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1MapType" kindref="compound">MapType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/arrow_test.cc" line="402" column="1" bodyfile="iceberg/test/arrow_test.cc" bodystart="402" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="bucket__util__test_8cc_1a17f0c0e991ef537c1ff7bae00363e7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(BucketUtilsTest, HashHelper)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>BucketUtilsTest</type>
        </param>
        <param>
          <type>HashHelper</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/bucket_util_test.cc" line="34" column="1" bodyfile="iceberg/test/bucket_util_test.cc" bodystart="34" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="config__test_8cc_1aaeaf49ed898f8b8c67facab8eed5dc62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iceberg::EnumToString</definition>
        <argsstring>(const TestEnum &amp;val)</argsstring>
        <name>EnumToString</name>
        <qualifiedname>iceberg::EnumToString</qualifiedname>
        <param>
          <type>const TestEnum &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/config_test.cc" line="30" column="13" bodyfile="iceberg/test/config_test.cc" bodystart="30" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="config__test_8cc_1a9a990df4fc5f20c771fd7bf8548f28eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TestEnum</type>
        <definition>TestEnum iceberg::StringToEnum</definition>
        <argsstring>(const std::string &amp;val)</argsstring>
        <name>StringToEnum</name>
        <qualifiedname>iceberg::StringToEnum</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/config_test.cc" line="43" column="10" bodyfile="iceberg/test/config_test.cc" bodystart="43" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="config__test_8cc_1a5b7108bd43baeb3cd3874c40901a50ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ConfigTest, BasicOperations)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>ConfigTest</type>
        </param>
        <param>
          <type>BasicOperations</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/config_test.cc" line="69" column="1" bodyfile="iceberg/test/config_test.cc" bodystart="69" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1ab9d10eec25e63cee28d8c3b787d05e94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, Basics)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>Basics</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="51" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="51" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a07c539d6e60f8dd382249bc3e78dff67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, StringStartingWithSign)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>StringStartingWithSign</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="65" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="65" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1aa2c9e417ef446da1ff8abd85acacaf1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, StringWithLeadingZeros)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>StringWithLeadingZeros</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="74" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="74" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a454df83769350f7745981b6763174a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, DecimalWithExponent)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>DecimalWithExponent</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="84" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="84" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a000fe0343dac3d0aa59a444d35a53a2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, SmallValues)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>SmallValues</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="93" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="93" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1ae247c94b4a078a0483ec0a580b04d933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, LargeValues)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>LargeValues</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="160" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="160" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1aa60c78cb6225679686f9779a77a56e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, TestStringRoundTrip)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>TestStringRoundTrip</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="174" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="174" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a0f093e60ddff1c2d4daed8f9c15e453c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, FromStringLimits)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>FromStringLimits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="211" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="211" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1acae1b6caabd1443f60c4fbe2d15e4e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, FromStringInvalid)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>FromStringInvalid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="271" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="271" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a806b6a827664fcf6772f41b03b9e5c38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, Division)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>Division</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="293" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="293" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1ad4f1b6031ab6fe373f07510ae1b620c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, ToString)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>ToString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="301" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="301" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a5d87455233b9c44813904657dfc04120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, FromBigEndian)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type><ref refid="endian_8h_1ad32cff8f6ada2e4ab2e0701f0a043f28" kindref="member">FromBigEndian</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="419" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="419" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a453544c7f2db301a5856bf3f54648ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, FromBigEndianInvalid)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>FromBigEndianInvalid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="488" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="488" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1ae5c713bb0f2615b7b51a4e5b0774a09b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, ToBigEndian)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type><ref refid="endian_8h_1aa051ea16b5c1c3d2c4b5c04db46ffa43" kindref="member">ToBigEndian</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="494" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="494" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a5d003b2a97ac254ca9f92d0ac19d7625" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTestFunctionality, Multiply)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTestFunctionality</type>
        </param>
        <param>
          <type>Multiply</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="538" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="538" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a7f956ccdec0783d9c33dc3aca10b3b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTestFunctionality, Divide)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTestFunctionality</type>
        </param>
        <param>
          <type>Divide</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="556" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="556" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1af92d8a326112d1af3f84b067f091bf31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTestFunctionality, Modulo)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTestFunctionality</type>
        </param>
        <param>
          <type>Modulo</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="572" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="572" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1aeee6ecf62fc3fc39f190c78754ebceac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTestFunctionality, Sign)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTestFunctionality</type>
        </param>
        <param>
          <type>Sign</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="589" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="589" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a4e5cb2fa35a9933f4c68fe168d26887b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTestFunctionality, FitsInPrecision)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTestFunctionality</type>
        </param>
        <param>
          <type>FitsInPrecision</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="595" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="595" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a088fe60d1910f317a4a02c89ae9a1ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, LeftShift)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>LeftShift</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="619" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="619" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1add371f0231d3305046d1c788df2ae578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, RightShift)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>RightShift</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="665" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="665" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a0baae41ced6b782f8a7a26c32c39fe18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, Negate)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>Negate</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="694" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="694" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1a17cddc2670cacead4dbbca12ef41262f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, Rescale)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>Rescale</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="710" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="710" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="decimal__test_8cc_1ac13fc1ebc0e3afa1d2d82e992eb5305e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(DecimalTest, Compare)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>DecimalTest</type>
        </param>
        <param>
          <type>Compare</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/decimal_test.cc" line="719" column="1" bodyfile="iceberg/test/decimal_test.cc" bodystart="719" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="endian__test_8cc_1a874f0028ae32ab1fae0f2053323a735f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(EndianTest, RoundTripPreservesValue)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>EndianTest</type>
        </param>
        <param>
          <type>RoundTripPreservesValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/endian_test.cc" line="36" column="1" bodyfile="iceberg/test/endian_test.cc" bodystart="36" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="endian__test_8cc_1aca8acafbb598c71617ace7910d8375af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(EndianTest, ByteWiseValidation)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>EndianTest</type>
        </param>
        <param>
          <type>ByteWiseValidation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/endian_test.cc" line="65" column="1" bodyfile="iceberg/test/endian_test.cc" bodystart="65" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="expression__test_8cc_1a2bcd8a50f6b6574c6cb38a57d8e6472f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(TrueFalseTest, Basic)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>TrueFalseTest</type>
        </param>
        <param>
          <type>Basic</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/expression_test.cc" line="30" column="1" bodyfile="iceberg/test/expression_test.cc" bodystart="30" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="expression__test_8cc_1ab9ec413a59fe766ccc9e498dfbbbd08c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ANDTest, Basic)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>ANDTest</type>
        </param>
        <param>
          <type>Basic</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/expression_test.cc" line="52" column="1" bodyfile="iceberg/test/expression_test.cc" bodystart="52" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="expression__test_8cc_1a3591356e0f5a98058945ce40a3943dce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ORTest, Basic)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>ORTest</type>
        </param>
        <param>
          <type>Basic</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/expression_test.cc" line="66" column="1" bodyfile="iceberg/test/expression_test.cc" bodystart="66" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="expression__test_8cc_1a9cab9f378b418108bdf150ae3abc9b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ORTest, Negation)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>ORTest</type>
        </param>
        <param>
          <type>Negation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/expression_test.cc" line="80" column="1" bodyfile="iceberg/test/expression_test.cc" bodystart="80" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="expression__test_8cc_1a63009bd221ae33726837aa9551ea028c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ORTest, Equals)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>ORTest</type>
        </param>
        <param>
          <type>Equals</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/expression_test.cc" line="95" column="1" bodyfile="iceberg/test/expression_test.cc" bodystart="95" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="expression__test_8cc_1a8c24b2f017db078aee3c0fa78be25947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ANDTest, Negation)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>ANDTest</type>
        </param>
        <param>
          <type>Negation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/expression_test.cc" line="117" column="1" bodyfile="iceberg/test/expression_test.cc" bodystart="117" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="expression__test_8cc_1afaac500aeacea0ee55b49b2c563fec1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ANDTest, Equals)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>ANDTest</type>
        </param>
        <param>
          <type>Equals</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/expression_test.cc" line="132" column="1" bodyfile="iceberg/test/expression_test.cc" bodystart="132" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="expression__test_8cc_1ad39daf3be55e6ab0f0de5f15a8c3d660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ExpressionTest, BaseClassNegateErrorOut)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>ExpressionTest</type>
        </param>
        <param>
          <type>BaseClassNegateErrorOut</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/expression_test.cc" line="154" column="1" bodyfile="iceberg/test/expression_test.cc" bodystart="154" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="expression__test_8cc_1a70e6444e31315a3e270942c312e5e84f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(NotTest, Basic)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>NotTest</type>
        </param>
        <param>
          <type>Basic</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/expression_test.cc" line="169" column="1" bodyfile="iceberg/test/expression_test.cc" bodystart="169" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="expression__test_8cc_1a31f2356996b50c2753624bb5651b1e7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(NotTest, Negation)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>NotTest</type>
        </param>
        <param>
          <type>Negation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/expression_test.cc" line="178" column="1" bodyfile="iceberg/test/expression_test.cc" bodystart="178" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="expression__test_8cc_1a59dabe70b69fb744611dda0405fe8f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(NotTest, Equals)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>NotTest</type>
        </param>
        <param>
          <type>Equals</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/expression_test.cc" line="191" column="1" bodyfile="iceberg/test/expression_test.cc" bodystart="191" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="file__scan__task__test_8cc_1ac928c3d5614497dcf8cac5f71015d628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(FileScanTaskTest, ReadFullSchema)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1FileScanTaskTest" kindref="compound">FileScanTaskTest</ref></type>
        </param>
        <param>
          <type>ReadFullSchema</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/file_scan_task_test.cc" line="129" column="1" bodyfile="iceberg/test/file_scan_task_test.cc" bodystart="129" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="file__scan__task__test_8cc_1a90a02e21b43d0d4f8c2cee821bb82d9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(FileScanTaskTest, ReadProjectedAndReorderedSchema)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1FileScanTaskTest" kindref="compound">FileScanTaskTest</ref></type>
        </param>
        <param>
          <type>ReadProjectedAndReorderedSchema</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/file_scan_task_test.cc" line="148" column="1" bodyfile="iceberg/test/file_scan_task_test.cc" bodystart="148" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="file__scan__task__test_8cc_1a4ef1ee231a86aa2bfdef74f1ab7ec7a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(FileScanTaskTest, ReadEmptyFile)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1FileScanTaskTest" kindref="compound">FileScanTaskTest</ref></type>
        </param>
        <param>
          <type>ReadEmptyFile</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/file_scan_task_test.cc" line="167" column="1" bodyfile="iceberg/test/file_scan_task_test.cc" bodystart="167" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="formatter__test_8cc_1aef221b21a0cdc5c47aeebf5f9bd46890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(FormatterTest, VectorFormat)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>FormatterTest</type>
        </param>
        <param>
          <type>VectorFormat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/formatter_test.cc" line="37" column="1" bodyfile="iceberg/test/formatter_test.cc" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="formatter__test_8cc_1ac3940f630a88ec9de2d65bd07f875481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(FormatterTest, MapFormat)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>FormatterTest</type>
        </param>
        <param>
          <type>MapFormat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/formatter_test.cc" line="48" column="1" bodyfile="iceberg/test/formatter_test.cc" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="formatter__test_8cc_1a59992439a4233b56896a8c7518806194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(FormatterTest, UnorderedMapFormat)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>FormatterTest</type>
        </param>
        <param>
          <type>UnorderedMapFormat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/formatter_test.cc" line="56" column="1" bodyfile="iceberg/test/formatter_test.cc" bodystart="56" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="formatter__test_8cc_1a528d4c0c190828049c7c654a77d59b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(FormatterTest, NestedContainersFormat)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>FormatterTest</type>
        </param>
        <param>
          <type>NestedContainersFormat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/formatter_test.cc" line="68" column="1" bodyfile="iceberg/test/formatter_test.cc" bodystart="68" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="formatter__test_8cc_1afc3eca947e27cebddea9b52b83c1aece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(FormatterTest, EdgeCasesFormat)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>FormatterTest</type>
        </param>
        <param>
          <type>EdgeCasesFormat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/formatter_test.cc" line="83" column="1" bodyfile="iceberg/test/formatter_test.cc" bodystart="83" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="formatter__test_8cc_1a5bee81b0da6cdd421dd15cdc4df05ace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(FormatterTest, SmartPointerFormat)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>FormatterTest</type>
        </param>
        <param>
          <type>SmartPointerFormat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/formatter_test.cc" line="94" column="1" bodyfile="iceberg/test/formatter_test.cc" bodystart="94" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="formatter__test_8cc_1ad37a43ba1bb975af581b91f5f0f7c1e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(FormatterTest, StatisticsFileFormat)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>FormatterTest</type>
        </param>
        <param>
          <type>StatisticsFileFormat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/formatter_test.cc" line="133" column="1" bodyfile="iceberg/test/formatter_test.cc" bodystart="133" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="gzip__decompress__test_8cc_1a0ecc3bc919667e1781fc197bbe9b47c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(GZipTest, GZipDecompressedString)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1GZipTest" kindref="compound">GZipTest</ref></type>
        </param>
        <param>
          <type>GZipDecompressedString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/gzip_decompress_test.cc" line="47" column="1" bodyfile="iceberg/test/gzip_decompress_test.cc" bodystart="47" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="in__memory__catalog__test_8cc_1a9633bffb8168cfe47936cc735f6eb91d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(InMemoryCatalogTest, CatalogName)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1InMemoryCatalogTest" kindref="compound">InMemoryCatalogTest</ref></type>
        </param>
        <param>
          <type>CatalogName</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/in_memory_catalog_test.cc" line="84" column="1" bodyfile="iceberg/test/in_memory_catalog_test.cc" bodystart="84" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="in__memory__catalog__test_8cc_1a8b238d2f36d3659c06d914b282e056fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(InMemoryCatalogTest, ListTables)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1InMemoryCatalogTest" kindref="compound">InMemoryCatalogTest</ref></type>
        </param>
        <param>
          <type>ListTables</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/in_memory_catalog_test.cc" line="91" column="1" bodyfile="iceberg/test/in_memory_catalog_test.cc" bodystart="91" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="in__memory__catalog__test_8cc_1a6b5fea3256fe329aea38188a532df1f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(InMemoryCatalogTest, TableExists)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1InMemoryCatalogTest" kindref="compound">InMemoryCatalogTest</ref></type>
        </param>
        <param>
          <type>TableExists</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/in_memory_catalog_test.cc" line="97" column="1" bodyfile="iceberg/test/in_memory_catalog_test.cc" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="in__memory__catalog__test_8cc_1a9c5cdb7bf028a48512b9c70a95f30ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(InMemoryCatalogTest, RegisterTable)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1InMemoryCatalogTest" kindref="compound">InMemoryCatalogTest</ref></type>
        </param>
        <param>
          <type>RegisterTable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/in_memory_catalog_test.cc" line="103" column="1" bodyfile="iceberg/test/in_memory_catalog_test.cc" bodystart="103" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="in__memory__catalog__test_8cc_1a085ab9b93687352b2070c40f08397f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(InMemoryCatalogTest, RefreshTable)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1InMemoryCatalogTest" kindref="compound">InMemoryCatalogTest</ref></type>
        </param>
        <param>
          <type>RefreshTable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/in_memory_catalog_test.cc" line="120" column="1" bodyfile="iceberg/test/in_memory_catalog_test.cc" bodystart="120" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="in__memory__catalog__test_8cc_1a2e4b64497db47d21227dbe08dbb73863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(InMemoryCatalogTest, DropTable)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1InMemoryCatalogTest" kindref="compound">InMemoryCatalogTest</ref></type>
        </param>
        <param>
          <type>DropTable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/in_memory_catalog_test.cc" line="170" column="1" bodyfile="iceberg/test/in_memory_catalog_test.cc" bodystart="170" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="in__memory__catalog__test_8cc_1a1fa183996043eb975c2203bd4e164e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(InMemoryCatalogTest, Namespace)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1InMemoryCatalogTest" kindref="compound">InMemoryCatalogTest</ref></type>
        </param>
        <param>
          <type><ref refid="structiceberg_1_1Namespace" kindref="compound">Namespace</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/in_memory_catalog_test.cc" line="176" column="1" bodyfile="iceberg/test/in_memory_catalog_test.cc" bodystart="176" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="json__internal__test_8cc_1af83bcafab02c41e7a9fce842ed97ac59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(JsonInternalTest, SortField)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>JsonInternalTest</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1SortField" kindref="compound">SortField</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/json_internal_test.cc" line="91" column="1" bodyfile="iceberg/test/json_internal_test.cc" bodystart="91" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="json__internal__test_8cc_1ac3816b6e4626bc21bac9510eef41e4d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(JsonInternalTest, SortOrder)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>JsonInternalTest</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1SortOrder" kindref="compound">SortOrder</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/json_internal_test.cc" line="109" column="1" bodyfile="iceberg/test/json_internal_test.cc" bodystart="109" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="json__internal__test_8cc_1aa4da50d8ae3f294e121c0b81caedeb50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(JsonInternalTest, PartitionField)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>JsonInternalTest</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1PartitionField" kindref="compound">PartitionField</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/json_internal_test.cc" line="121" column="1" bodyfile="iceberg/test/json_internal_test.cc" bodystart="121" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="json__internal__test_8cc_1a9fdc9fdd8c0c9d3d76c35606819b3216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(JsonPartitionTest, PartitionFieldFromJsonMissingField)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>JsonPartitionTest</type>
        </param>
        <param>
          <type>PartitionFieldFromJsonMissingField</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/json_internal_test.cc" line="129" column="1" bodyfile="iceberg/test/json_internal_test.cc" bodystart="129" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="json__internal__test_8cc_1afba6d8fdb9ee8f4eb7f5d4606bad45cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(JsonPartitionTest, PartitionSpec)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>JsonPartitionTest</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1PartitionSpec" kindref="compound">PartitionSpec</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/json_internal_test.cc" line="140" column="1" bodyfile="iceberg/test/json_internal_test.cc" bodystart="140" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="json__internal__test_8cc_1ae2e6d6ccaac07b9c6d4e8047d63557be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(JsonInternalTest, SnapshotRefBranch)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>JsonInternalTest</type>
        </param>
        <param>
          <type>SnapshotRefBranch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/json_internal_test.cc" line="169" column="1" bodyfile="iceberg/test/json_internal_test.cc" bodystart="169" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="json__internal__test_8cc_1a004f32932e4eb3d587216f950645e62a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(JsonInternalTest, SnapshotRefTag)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>JsonInternalTest</type>
        </param>
        <param>
          <type>SnapshotRefTag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/json_internal_test.cc" line="181" column="1" bodyfile="iceberg/test/json_internal_test.cc" bodystart="181" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="json__internal__test_8cc_1a6591fd1f4dc2e493aa7c62cac5ef90a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(JsonInternalTest, Snapshot)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>JsonInternalTest</type>
        </param>
        <param>
          <type><ref refid="structiceberg_1_1Snapshot" kindref="compound">Snapshot</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/json_internal_test.cc" line="191" column="1" bodyfile="iceberg/test/json_internal_test.cc" bodystart="191" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="json__internal__test_8cc_1a3ef18fba7c7491838e1febed4bb4d419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(JsonInternalTest, DISABLED_SnapshotFromJsonWithInvalidSummary)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>JsonInternalTest</type>
        </param>
        <param>
          <type>DISABLED_SnapshotFromJsonWithInvalidSummary</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/json_internal_test.cc" line="213" column="1" bodyfile="iceberg/test/json_internal_test.cc" bodystart="213" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="json__internal__test_8cc_1a64461e122c5b636c45155a605caa1f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(JsonInternalTest, SnapshotFromJsonSummaryWithNoOperation)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>JsonInternalTest</type>
        </param>
        <param>
          <type>SnapshotFromJsonSummaryWithNoOperation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/json_internal_test.cc" line="225" column="1" bodyfile="iceberg/test/json_internal_test.cc" bodystart="225" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="json__internal__test_8cc_1ae83460ef9744520508bea88dcceb47ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(JsonInternalTest, NameMapping)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>JsonInternalTest</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1NameMapping" kindref="compound">NameMapping</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/json_internal_test.cc" line="235" column="1" bodyfile="iceberg/test/json_internal_test.cc" bodystart="235" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1ae34f9e9e9a31a629b3db323b4315408d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(BasicLiteralTest, BasicsTest)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1BasicLiteralTest" kindref="compound">BasicLiteralTest</ref></type>
        </param>
        <param>
          <type>BasicsTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="44" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="44" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a92c9ea67b3efeeda2c18fced0b4d8a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(ComparisonLiteralTest, ComparisonTest)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ComparisonLiteralTest" kindref="compound">ComparisonLiteralTest</ref></type>
        </param>
        <param>
          <type>ComparisonTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="62" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="62" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a6cc5a4fa779510cfa404b9f0aa4c831d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(CastLiteralTest, CastTest)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1CastLiteralTest" kindref="compound">CastLiteralTest</ref></type>
        </param>
        <param>
          <type>CastTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="81" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="81" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1af637e835016387144b4689177d7e0e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, CrossTypeComparison)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>CrossTypeComparison</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="90" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="90" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a8c35bbe67551ae628059a9bf9f8a1f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, LongCastToOverflow)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>LongCastToOverflow</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="99" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="99" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1aa763c75a88f0345aba5d292101d72ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, DoubleCastToOverflow)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>DoubleCastToOverflow</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="123" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="123" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a3fd27cd3af8ca094685e65b40da45e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, CastToError)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>CastToError</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="138" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="138" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a6f30fc204a1299bac1fa8d01b1514d05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, SpecialValues)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>SpecialValues</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="153" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="153" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a9570054db416f8afb74cf4f9f5fea707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, FloatSpecialValuesComparison)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>FloatSpecialValuesComparison</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="160" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="160" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a4937e22a5bfe312c5c778b3a6d3766ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, FloatNaNComparison)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>FloatNaNComparison</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="181" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="181" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a116f33ab73b8902fcfd94a350c07d6c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, FloatInfinityComparison)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>FloatInfinityComparison</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="191" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="191" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1ae628404629110064f77045ab9275cc79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, FloatZeroComparison)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>FloatZeroComparison</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="202" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="202" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a8976f69ed3a2a6c043efafa9badf9943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, DoubleSpecialValuesComparison)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>DoubleSpecialValuesComparison</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="211" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="211" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1acba580aefe6ff9ca299c75dda054c88b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, DoubleNaNComparison)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>DoubleNaNComparison</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="232" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="232" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1aa7ce2949f1df25e1e097b8acd6a6dae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, DoubleInfinityComparison)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>DoubleInfinityComparison</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="242" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="242" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a426e1ada863092db742957cfd2a69696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, DoubleZeroComparison)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>DoubleZeroComparison</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="253" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="253" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1ac3512730efc2c1b8b84ea80f23619833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralTest, UuidComparison)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralTest</type>
        </param>
        <param>
          <type>UuidComparison</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="260" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="260" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a508da237012a6c7b0436d2d1e59e9902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(LiteralSerDeParam, RoundTrip)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1LiteralSerDeParam" kindref="compound">LiteralSerDeParam</ref></type>
        </param>
        <param>
          <type>RoundTrip</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="284" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="284" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a5d0e76b9bc8f868513acdc71d96455c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(BinarySerialization, LiteralSerDeParam, ::testing::Values(LiteralParam{&quot;BooleanTrue&quot;, {1}, Literal::Boolean(true), boolean()}, LiteralParam{&quot;BooleanFalse&quot;, {0}, Literal::Boolean(false), boolean()}, LiteralParam{&quot;Int&quot;, {32, 0, 0, 0}, Literal::Int(32), int32()}, LiteralParam{ &quot;IntMaxValue&quot;, {255, 255, 255, 127}, Literal::Int(2147483647), int32()}, LiteralParam{&quot;IntMinValue&quot;, {0, 0, 0, 128}, Literal::Int(-2147483648), int32()}, LiteralParam{&quot;NegativeInt&quot;, {224, 255, 255, 255}, Literal::Int(-32), int32()}, LiteralParam{&quot;Long&quot;, {32, 0, 0, 0, 0, 0, 0, 0}, Literal::Long(32), int64()}, LiteralParam{&quot;LongMaxValue&quot;, {255, 255, 255, 255, 255, 255, 255, 127}, Literal::Long(std::numeric_limits&lt; int64_t &gt;::max()), int64()}, LiteralParam{&quot;LongMinValue&quot;, {0, 0, 0, 0, 0, 0, 0, 128}, Literal::Long(std::numeric_limits&lt; int64_t &gt;::min()), int64()}, LiteralParam{&quot;NegativeLong&quot;, {224, 255, 255, 255, 255, 255, 255, 255}, Literal::Long(-32), int64()}, LiteralParam{&quot;Float&quot;, {0, 0, 128, 63}, Literal::Float(1.0f), float32()}, LiteralParam{&quot;FloatNegativeInfinity&quot;, {0, 0, 128, 255}, Literal::Float(-std::numeric_limits&lt; float &gt;::infinity()), float32()}, LiteralParam{&quot;FloatMaxValue&quot;, {255, 255, 127, 127}, Literal::Float(std::numeric_limits&lt; float &gt;::max()), float32()}, LiteralParam{&quot;FloatMinValue&quot;, {255, 255, 127, 255}, Literal::Float(std::numeric_limits&lt; float &gt;::lowest()), float32()}, LiteralParam{ &quot;Double&quot;, {0, 0, 0, 0, 0, 0, 240, 63}, Literal::Double(1.0), float64()}, LiteralParam{&quot;DoubleNegativeInfinity&quot;, {0, 0, 0, 0, 0, 0, 240, 255}, Literal::Double(-std::numeric_limits&lt; double &gt;::infinity()), float64()}, LiteralParam{&quot;DoubleMaxValue&quot;, {255, 255, 255, 255, 255, 255, 239, 127}, Literal::Double(std::numeric_limits&lt; double &gt;::max()), float64()}, LiteralParam{&quot;DoubleMinValue&quot;, {255, 255, 255, 255, 255, 255, 239, 255}, Literal::Double(std::numeric_limits&lt; double &gt;::lowest()), float64()}, LiteralParam{&quot;DecimalPositive&quot;, {1, 226, 64}, Literal::Decimal(123456, 6, 2), decimal(6, 2)}, LiteralParam{&quot;DecimalNegative&quot;, {254, 29, 192}, Literal::Decimal(-123456, 6, 2), decimal(6, 2)}, LiteralParam{&quot;DecimalZero&quot;, {0}, Literal::Decimal(0, 3, 0), decimal(3, 0)}, LiteralParam{&quot;String&quot;, {105, 99, 101, 98, 101, 114, 103}, Literal::String(&quot;iceberg&quot;), string()}, LiteralParam{&quot;StringLong&quot;, {65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65}, Literal::String(&quot;AAAAAAAAAAAAAAAA&quot;), string()}, LiteralParam{ &quot;Uuid&quot;, {0x12, 0x3E, 0x45, 0x67, 0xE8, 0x9B, 0x12, 0xD3, 0xA4, 0x56, 0x42, 0x66, 0x14, 0x17, 0x40, 0x00}, Literal::UUID(Uuid::FromString(&quot;123e4567-e89b-12d3-a456-426614174000&quot;).value()), uuid()}, LiteralParam{&quot;BinaryData&quot;, {0x01, 0x02, 0x03, 0xFF}, Literal::Binary({0x01, 0x02, 0x03, 0xFF}), binary()}, LiteralParam{&quot;BinarySingleByte&quot;, {42}, Literal::Binary({42}), binary()}, LiteralParam{&quot;FixedLength4&quot;, {0x01, 0x02, 0x03, 0x04}, Literal::Fixed({0x01, 0x02, 0x03, 0x04}), fixed(4)}, LiteralParam{&quot;FixedLength8&quot;, {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00, 0x11}, Literal::Fixed({0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00, 0x11}), fixed(8)}, LiteralParam{&quot;FixedLength16&quot;, {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F}, Literal::Fixed({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F}), fixed(16)}, LiteralParam{&quot;FixedSingleByte&quot;, {0xFF}, Literal::Fixed({0xFF}), fixed(1)}, LiteralParam{&quot;DateEpoch&quot;, {0, 0, 0, 0}, Literal::Date(0), date()}, LiteralParam{&quot;DateNextDay&quot;, {1, 0, 0, 0}, Literal::Date(1), date()}, LiteralParam{&quot;DateY2K&quot;, {205, 42, 0, 0}, Literal::Date(10957), date()}, LiteralParam{&quot;DateNegative&quot;, {255, 255, 255, 255}, Literal::Date(-1), date()}, LiteralParam{&quot;TimeMidnight&quot;, {0, 0, 0, 0, 0, 0, 0, 0}, Literal::Time(0), time()}, LiteralParam{&quot;TimeNoon&quot;, {128, 9, 230, 124, 10, 0, 0, 0}, Literal::Time(45045123456), time()}, LiteralParam{ &quot;TimeOneSecond&quot;, {64, 66, 15, 0, 0, 0, 0, 0}, Literal::Time(1000000), time()}, LiteralParam{&quot;TimestampEpoch&quot;, {0, 0, 0, 0, 0, 0, 0, 0}, Literal::Timestamp(0), timestamp()}, LiteralParam{&quot;TimestampOneSecond&quot;, {64, 66, 15, 0, 0, 0, 0, 0}, Literal::Timestamp(1000000), timestamp()}, LiteralParam{&quot;TimestampNoon2024&quot;, {128, 9, 230, 124, 10, 0, 0, 0}, Literal::Timestamp(45045123456), timestamp()}, LiteralParam{&quot;TimestampTzEpoch&quot;, {0, 0, 0, 0, 0, 0, 0, 0}, Literal::TimestampTz(0), timestamp_tz()}, LiteralParam{&quot;TimestampTzOneHour&quot;, {0, 164, 147, 214, 0, 0, 0, 0}, Literal::TimestampTz(3600000000), timestamp_tz()}, LiteralParam{&quot;EmptyString&quot;, {}, Literal::String(&quot;&quot;), string()}, LiteralParam{&quot;EmptyBinary&quot;, {}, Literal::Binary({}), binary()}), [](const testing::TestParamInfo&lt; LiteralSerDeParam::ParamType &gt; &amp;info) { return info.param.test_name;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>BinarySerialization</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1LiteralSerDeParam" kindref="compound">LiteralSerDeParam</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;BooleanTrue&quot;, {1}, <ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(true), <ref refid="group__type-factories_1gafb5f5aec1d1d6218809ee512e2f87e83" kindref="member">boolean</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;BooleanFalse&quot;, {0}, <ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(false), <ref refid="group__type-factories_1gafb5f5aec1d1d6218809ee512e2f87e83" kindref="member">boolean</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;Int&quot;, {32, 0, 0, 0}, Literal::Int(32), <ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">int32</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{ &quot;IntMaxValue&quot;, {255, 255, 255, 127}, Literal::Int(2147483647), <ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">int32</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;IntMinValue&quot;, {0, 0, 0, 128}, Literal::Int(-2147483648), <ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">int32</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;NegativeInt&quot;, {224, 255, 255, 255}, Literal::Int(-32), <ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">int32</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;Long&quot;, {32, 0, 0, 0, 0, 0, 0, 0}, Literal::Long(32), <ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">int64</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;LongMaxValue&quot;, {255, 255, 255, 255, 255, 255, 255, 127}, Literal::Long(std::numeric_limits&lt; int64_t &gt;::max()), <ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">int64</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;LongMinValue&quot;, {0, 0, 0, 0, 0, 0, 0, 128}, Literal::Long(std::numeric_limits&lt; int64_t &gt;::min()), <ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">int64</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;NegativeLong&quot;, {224, 255, 255, 255, 255, 255, 255, 255}, Literal::Long(-32), <ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">int64</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;Float&quot;, {0, 0, 128, 63}, Literal::Float(1.0f), <ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">float32</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;FloatNegativeInfinity&quot;, {0, 0, 128, 255}, Literal::Float(-std::numeric_limits&lt; float &gt;::infinity()), <ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">float32</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;FloatMaxValue&quot;, {255, 255, 127, 127}, Literal::Float(std::numeric_limits&lt; float &gt;::max()), <ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">float32</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;FloatMinValue&quot;, {255, 255, 127, 255}, Literal::Float(std::numeric_limits&lt; float &gt;::lowest()), <ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">float32</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{ &quot;Double&quot;, {0, 0, 0, 0, 0, 0, 240, 63}, Literal::Double(1.0), <ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">float64</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;DoubleNegativeInfinity&quot;, {0, 0, 0, 0, 0, 0, 240, 255}, Literal::Double(-std::numeric_limits&lt; double &gt;::infinity()), <ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">float64</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;DoubleMaxValue&quot;, {255, 255, 255, 255, 255, 255, 239, 127}, Literal::Double(std::numeric_limits&lt; double &gt;::max()), <ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">float64</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;DoubleMinValue&quot;, {255, 255, 255, 255, 255, 255, 239, 255}, Literal::Double(std::numeric_limits&lt; double &gt;::lowest()), <ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">float64</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;DecimalPositive&quot;, {1, 226, 64}, <ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(123456, 6, 2), <ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">decimal</ref>(6, 2)}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;DecimalNegative&quot;, {254, 29, 192}, <ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(-123456, 6, 2), <ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">decimal</ref>(6, 2)}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;DecimalZero&quot;, {0}, <ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(0, 3, 0), <ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">decimal</ref>(3, 0)}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;String&quot;, {105, 99, 101, 98, 101, 114, 103}, Literal::String(&quot;iceberg&quot;), <ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">string</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;StringLong&quot;, {65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65}, Literal::String(&quot;AAAAAAAAAAAAAAAA&quot;), <ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">string</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{ &quot;Uuid&quot;, {0x12, 0x3E, 0x45, 0x67, 0xE8, 0x9B, 0x12, 0xD3, 0xA4, 0x56, 0x42, 0x66, 0x14, 0x17, 0x40, 0x00}, Literal::UUID(<ref refid="classiceberg_1_1Uuid_1a4058089f8fff9a9fcad38dac8731674f" kindref="member">Uuid::FromString</ref>(&quot;123e4567-e89b-12d3-a456-426614174000&quot;).value()), <ref refid="group__type-factories_1gafcf0f5e6522390678b91a9515b174bcf" kindref="member">uuid</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;BinaryData&quot;, {0x01, 0x02, 0x03, 0xFF}, Literal::Binary({0x01, 0x02, 0x03, 0xFF}), <ref refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kindref="member">binary</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;BinarySingleByte&quot;, {42}, Literal::Binary({42}), <ref refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kindref="member">binary</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;FixedLength4&quot;, {0x01, 0x02, 0x03, 0x04}, Literal::Fixed({0x01, 0x02, 0x03, 0x04}), <ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">fixed</ref>(4)}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;FixedLength8&quot;, {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00, 0x11}, Literal::Fixed({0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00, 0x11}), <ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">fixed</ref>(8)}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;FixedLength16&quot;, {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F}, Literal::Fixed({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F}), <ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">fixed</ref>(16)}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;FixedSingleByte&quot;, {0xFF}, Literal::Fixed({0xFF}), <ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">fixed</ref>(1)}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;DateEpoch&quot;, {0, 0, 0, 0}, Literal::Date(0), <ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">date</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;DateNextDay&quot;, {1, 0, 0, 0}, Literal::Date(1), <ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">date</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;DateY2K&quot;, {205, 42, 0, 0}, Literal::Date(10957), <ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">date</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;DateNegative&quot;, {255, 255, 255, 255}, Literal::Date(-1), <ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">date</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;TimeMidnight&quot;, {0, 0, 0, 0, 0, 0, 0, 0}, Literal::Time(0), <ref refid="group__type-factories_1ga7048c118c821d9aba4c08f3f23262b0f" kindref="member">time</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;TimeNoon&quot;, {128, 9, 230, 124, 10, 0, 0, 0}, Literal::Time(45045123456), <ref refid="group__type-factories_1ga7048c118c821d9aba4c08f3f23262b0f" kindref="member">time</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{ &quot;TimeOneSecond&quot;, {64, 66, 15, 0, 0, 0, 0, 0}, Literal::Time(1000000), <ref refid="group__type-factories_1ga7048c118c821d9aba4c08f3f23262b0f" kindref="member">time</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;TimestampEpoch&quot;, {0, 0, 0, 0, 0, 0, 0, 0}, Literal::Timestamp(0), <ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">timestamp</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;TimestampOneSecond&quot;, {64, 66, 15, 0, 0, 0, 0, 0}, Literal::Timestamp(1000000), <ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">timestamp</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;TimestampNoon2024&quot;, {128, 9, 230, 124, 10, 0, 0, 0}, Literal::Timestamp(45045123456), <ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">timestamp</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;TimestampTzEpoch&quot;, {0, 0, 0, 0, 0, 0, 0, 0}, Literal::TimestampTz(0), <ref refid="group__type-factories_1ga6533501016e29cf4e348da8a2a20635d" kindref="member">timestamp_tz</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;TimestampTzOneHour&quot;, {0, 164, 147, 214, 0, 0, 0, 0}, Literal::TimestampTz(3600000000), <ref refid="group__type-factories_1ga6533501016e29cf4e348da8a2a20635d" kindref="member">timestamp_tz</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;EmptyString&quot;, {}, Literal::String(&quot;&quot;), <ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">string</ref>()}, <ref refid="structiceberg_1_1LiteralParam" kindref="compound">LiteralParam</ref>{&quot;EmptyBinary&quot;, {}, Literal::Binary({}), <ref refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kindref="member">binary</ref>()})</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const testing::TestParamInfo&lt; LiteralSerDeParam::ParamType &gt; &amp;info) { return info.param.test_name;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="308" column="1" declfile="iceberg/test/literal_test.cc" declline="308" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1ad327c3d8d89561fe4219b8ff03bbb7ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralSerDeTest, EmptyString)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralSerDeTest</type>
        </param>
        <param>
          <type>EmptyString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="460" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="460" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1afa196f74c1b63c57731ff58c9bf6ad9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralSerDeTest, EmptyBinary)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralSerDeTest</type>
        </param>
        <param>
          <type>EmptyBinary</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="471" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="471" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1ada2e3b3861d0caba93863dc9c81cc71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(LiteralSerDeTest, TypePromotion)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>LiteralSerDeTest</type>
        </param>
        <param>
          <type>TypePromotion</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="483" column="1" bodyfile="iceberg/test/literal_test.cc" bodystart="483" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1ab06938cda764f8a8e29290b99a04c3e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(BasicLiteralTestCases, BasicLiteralTest, ::testing::Values(BasicLiteralTestParam{.test_name=&quot;BooleanTrue&quot;,.literal=Literal::Boolean(true),.expected_type_id=TypeId::kBoolean,.expected_string=&quot;true&quot;}, BasicLiteralTestParam{.test_name=&quot;BooleanFalse&quot;,.literal=Literal::Boolean(false),.expected_type_id=TypeId::kBoolean,.expected_string=&quot;false&quot;}, BasicLiteralTestParam{.test_name=&quot;IntPositive&quot;,.literal=Literal::Int(42),.expected_type_id=TypeId::kInt,.expected_string=&quot;42&quot;}, BasicLiteralTestParam{.test_name=&quot;IntNegative&quot;,.literal=Literal::Int(-123),.expected_type_id=TypeId::kInt,.expected_string=&quot;-123&quot;}, BasicLiteralTestParam{.test_name=&quot;LongPositive&quot;,.literal=Literal::Long(1234567890L),.expected_type_id=TypeId::kLong,.expected_string=&quot;1234567890&quot;}, BasicLiteralTestParam{.test_name=&quot;LongNegative&quot;,.literal=Literal::Long(-9876543210L),.expected_type_id=TypeId::kLong,.expected_string=&quot;-9876543210&quot;}, BasicLiteralTestParam{.test_name=&quot;Float&quot;,.literal=Literal::Float(3.14f),.expected_type_id=TypeId::kFloat,.expected_string=&quot;3.140000&quot;}, BasicLiteralTestParam{.test_name=&quot;Double&quot;,.literal=Literal::Double(std::numbers::pi),.expected_type_id=TypeId::kDouble,.expected_string=&quot;3.141593&quot;}, BasicLiteralTestParam{.test_name=&quot;DecimalPositive&quot;,.literal=Literal::Decimal(123456, 6, 2),.expected_type_id=TypeId::kDecimal,.expected_string=&quot;1234.56&quot;}, BasicLiteralTestParam{.test_name=&quot;DecimalNegative&quot;,.literal=Literal::Decimal(-123456, 6, 2),.expected_type_id=TypeId::kDecimal,.expected_string=&quot;-1234.56&quot;}, BasicLiteralTestParam{.test_name=&quot;DecimalZero&quot;,.literal=Literal::Decimal(0, 3, 0),.expected_type_id=TypeId::kDecimal,.expected_string=&quot;0&quot;}, BasicLiteralTestParam{.test_name=&quot;String&quot;,.literal=Literal::String(&quot;hello world&quot;),.expected_type_id=TypeId::kString,.expected_string=&quot;\&quot;hello world\&quot;&quot;}, BasicLiteralTestParam{ .test_name=&quot;Uuid&quot;,.literal=Literal::UUID(Uuid::FromString(&quot;123e4567-e89b-12d3-a456-426614174000&quot;).value()),.expected_type_id=TypeId::kUuid,.expected_string=&quot;123e4567-e89b-12d3-a456-426614174000&quot;}, BasicLiteralTestParam{ .test_name=&quot;Binary&quot;,.literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x02, 0x03, 0xFF}),.expected_type_id=TypeId::kBinary,.expected_string=&quot;X&apos;010203FF&apos;&quot;}, BasicLiteralTestParam{ .test_name=&quot;Fixed&quot;,.literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x02, 0x03, 0xFF}),.expected_type_id=TypeId::kFixed,.expected_string=&quot;X&apos;010203FF&apos;&quot;}, BasicLiteralTestParam{.test_name=&quot;Date&quot;,.literal=Literal::Date(19489),.expected_type_id=TypeId::kDate,.expected_string=&quot;19489&quot;}, BasicLiteralTestParam{.test_name=&quot;Time&quot;,.literal=Literal::Time(43200000000LL),.expected_type_id=TypeId::kTime,.expected_string=&quot;43200000000&quot;}, BasicLiteralTestParam{.test_name=&quot;Timestamp&quot;,.literal=Literal::Timestamp(1684137600000000LL),.expected_type_id=TypeId::kTimestamp,.expected_string=&quot;1684137600000000&quot;}, BasicLiteralTestParam{.test_name=&quot;TimestampTz&quot;,.literal=Literal::TimestampTz(1684137600000000LL),.expected_type_id=TypeId::kTimestampTz,.expected_string=&quot;1684137600000000&quot;}), [](const ::testing::TestParamInfo&lt; BasicLiteralTestParam &gt; &amp;info) { return info.param.test_name;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>BasicLiteralTestCases</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1BasicLiteralTest" kindref="compound">BasicLiteralTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;BooleanTrue&quot;,.literal=<ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(true),.expected_type_id=TypeId::kBoolean,.expected_string=&quot;true&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;BooleanFalse&quot;,.literal=<ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(false),.expected_type_id=TypeId::kBoolean,.expected_string=&quot;false&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;IntPositive&quot;,.literal=Literal::Int(42),.expected_type_id=TypeId::kInt,.expected_string=&quot;42&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;IntNegative&quot;,.literal=Literal::Int(-123),.expected_type_id=TypeId::kInt,.expected_string=&quot;-123&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;LongPositive&quot;,.literal=Literal::Long(1234567890L),.expected_type_id=TypeId::kLong,.expected_string=&quot;1234567890&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;LongNegative&quot;,.literal=Literal::Long(-9876543210L),.expected_type_id=TypeId::kLong,.expected_string=&quot;-9876543210&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;Float&quot;,.literal=Literal::Float(3.14f),.expected_type_id=TypeId::kFloat,.expected_string=&quot;3.140000&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;Double&quot;,.literal=Literal::Double(std::numbers::pi),.expected_type_id=TypeId::kDouble,.expected_string=&quot;3.141593&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;DecimalPositive&quot;,.literal=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(123456, 6, 2),.expected_type_id=TypeId::kDecimal,.expected_string=&quot;1234.56&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;DecimalNegative&quot;,.literal=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(-123456, 6, 2),.expected_type_id=TypeId::kDecimal,.expected_string=&quot;-1234.56&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;DecimalZero&quot;,.literal=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(0, 3, 0),.expected_type_id=TypeId::kDecimal,.expected_string=&quot;0&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;String&quot;,.literal=Literal::String(&quot;hello world&quot;),.expected_type_id=TypeId::kString,.expected_string=&quot;\&quot;hello world\&quot;&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{ .test_name=&quot;Uuid&quot;,.literal=Literal::UUID(<ref refid="classiceberg_1_1Uuid_1a4058089f8fff9a9fcad38dac8731674f" kindref="member">Uuid::FromString</ref>(&quot;123e4567-e89b-12d3-a456-426614174000&quot;).value()),.expected_type_id=TypeId::kUuid,.expected_string=&quot;123e4567-e89b-12d3-a456-426614174000&quot;}, BasicLiteralTestParam{ .test_name=&quot;Binary&quot;,.literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x02, 0x03, 0xFF}),.expected_type_id=TypeId::kBinary,.expected_string=&quot;X&apos;010203FF&apos;&quot;}, BasicLiteralTestParam{ .test_name=&quot;Fixed&quot;,.literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x02, 0x03, 0xFF}),.expected_type_id=TypeId::kFixed,.expected_string=&quot;X&apos;010203FF&apos;&quot;}, BasicLiteralTestParam{.test_name=&quot;Date&quot;,.literal=Literal::Date(19489),.expected_type_id=TypeId::kDate,.expected_string=&quot;19489&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;Time&quot;,.literal=Literal::Time(43200000000LL),.expected_type_id=TypeId::kTime,.expected_string=&quot;43200000000&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;Timestamp&quot;,.literal=Literal::Timestamp(1684137600000000LL),.expected_type_id=TypeId::kTimestamp,.expected_string=&quot;1684137600000000&quot;}, <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref>{.test_name=&quot;TimestampTz&quot;,.literal=Literal::TimestampTz(1684137600000000LL),.expected_type_id=TypeId::kTimestampTz,.expected_string=&quot;1684137600000000&quot;})</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const ::testing::TestParamInfo&lt; <ref refid="structiceberg_1_1BasicLiteralTestParam" kindref="compound">BasicLiteralTestParam</ref> &gt; &amp;info) { return info.param.test_name;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="500" column="1" declfile="iceberg/test/literal_test.cc" declline="500" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1aa83bb32230b0f6e3a9c63286cc14bb15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(ComparisonLiteralTestCases, ComparisonLiteralTest, ::testing::Values(ComparisonLiteralTestParam{.test_name=&quot;Boolean&quot;,.small_literal=Literal::Boolean(false),.large_literal=Literal::Boolean(true),.equal_literal=Literal::Boolean(false)}, ComparisonLiteralTestParam{.test_name=&quot;Int&quot;,.small_literal=Literal::Int(10),.large_literal=Literal::Int(20),.equal_literal=Literal::Int(10)}, ComparisonLiteralTestParam{.test_name=&quot;Long&quot;,.small_literal=Literal::Long(100L),.large_literal=Literal::Long(200L),.equal_literal=Literal::Long(100L)}, ComparisonLiteralTestParam{.test_name=&quot;Float&quot;,.small_literal=Literal::Float(1.5f),.large_literal=Literal::Float(2.5f),.equal_literal=Literal::Float(1.5f)}, ComparisonLiteralTestParam{.test_name=&quot;Double&quot;,.small_literal=Literal::Double(1.5),.large_literal=Literal::Double(2.5),.equal_literal=Literal::Double(1.5)}, ComparisonLiteralTestParam{.test_name=&quot;Decimal&quot;,.small_literal=Literal::Decimal(123456, 6, 2),.large_literal=Literal::Decimal(234567, 6, 2),.equal_literal=Literal::Decimal(123456, 6, 2)}, ComparisonLiteralTestParam{.test_name=&quot;DecimalDifferentScales&quot;,.small_literal=Literal::Decimal(123456, 6, 2),.large_literal=Literal::Decimal(1234567, 7, 3),.equal_literal=Literal::Decimal(1234560, 7, 3)}, ComparisonLiteralTestParam{.test_name=&quot;String&quot;,.small_literal=Literal::String(&quot;apple&quot;),.large_literal=Literal::String(&quot;banana&quot;),.equal_literal=Literal::String(&quot;apple&quot;)}, ComparisonLiteralTestParam{ .test_name=&quot;Binary&quot;,.small_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x02}),.large_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x03}),.equal_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x02})}, ComparisonLiteralTestParam{ .test_name=&quot;BinaryDifferentLengths&quot;,.small_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x02}),.large_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x02, 0x03}),.equal_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x02})}, ComparisonLiteralTestParam{ .test_name=&quot;Fixed&quot;,.small_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x02}),.large_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x03}),.equal_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x02})}, ComparisonLiteralTestParam{ .test_name=&quot;FixedDifferentLengths&quot;,.small_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x02}),.large_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x02, 0x03}),.equal_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x02})}, ComparisonLiteralTestParam{.test_name=&quot;Date&quot;,.small_literal=Literal::Date(100),.large_literal=Literal::Date(200),.equal_literal=Literal::Date(100)}, ComparisonLiteralTestParam{.test_name=&quot;Time&quot;,.small_literal=Literal::Time(43200000000LL),.large_literal=Literal::Time(86400000000LL),.equal_literal=Literal::Time(43200000000LL)}, ComparisonLiteralTestParam{.test_name=&quot;Timestamp&quot;,.small_literal=Literal::Timestamp(1000000LL),.large_literal=Literal::Timestamp(2000000LL),.equal_literal=Literal::Timestamp(1000000LL)}, ComparisonLiteralTestParam{.test_name=&quot;TimestampTz&quot;,.small_literal=Literal::TimestampTz(1000000LL),.large_literal=Literal::TimestampTz(2000000LL),.equal_literal=Literal::TimestampTz(1000000LL)}), [](const ::testing::TestParamInfo&lt; ComparisonLiteralTestParam &gt; &amp;info) { return info.param.test_name;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>ComparisonLiteralTestCases</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1ComparisonLiteralTest" kindref="compound">ComparisonLiteralTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{.test_name=&quot;Boolean&quot;,.small_literal=<ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(false),.large_literal=<ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(true),.equal_literal=<ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(false)}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{.test_name=&quot;Int&quot;,.small_literal=Literal::Int(10),.large_literal=Literal::Int(20),.equal_literal=Literal::Int(10)}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{.test_name=&quot;Long&quot;,.small_literal=Literal::Long(100L),.large_literal=Literal::Long(200L),.equal_literal=Literal::Long(100L)}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{.test_name=&quot;Float&quot;,.small_literal=Literal::Float(1.5f),.large_literal=Literal::Float(2.5f),.equal_literal=Literal::Float(1.5f)}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{.test_name=&quot;Double&quot;,.small_literal=Literal::Double(1.5),.large_literal=Literal::Double(2.5),.equal_literal=Literal::Double(1.5)}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{.test_name=&quot;Decimal&quot;,.small_literal=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(123456, 6, 2),.large_literal=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(234567, 6, 2),.equal_literal=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(123456, 6, 2)}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{.test_name=&quot;DecimalDifferentScales&quot;,.small_literal=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(123456, 6, 2),.large_literal=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(1234567, 7, 3),.equal_literal=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(1234560, 7, 3)}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{.test_name=&quot;String&quot;,.small_literal=Literal::String(&quot;apple&quot;),.large_literal=Literal::String(&quot;banana&quot;),.equal_literal=Literal::String(&quot;apple&quot;)}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{ .test_name=&quot;Binary&quot;,.small_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x02}),.large_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x03}),.equal_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x02})}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{ .test_name=&quot;BinaryDifferentLengths&quot;,.small_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x02}),.large_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x02, 0x03}),.equal_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{0x01, 0x02})}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{ .test_name=&quot;Fixed&quot;,.small_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x02}),.large_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x03}),.equal_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x02})}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{ .test_name=&quot;FixedDifferentLengths&quot;,.small_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x02}),.large_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x02, 0x03}),.equal_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{0x01, 0x02})}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{.test_name=&quot;Date&quot;,.small_literal=Literal::Date(100),.large_literal=Literal::Date(200),.equal_literal=Literal::Date(100)}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{.test_name=&quot;Time&quot;,.small_literal=Literal::Time(43200000000LL),.large_literal=Literal::Time(86400000000LL),.equal_literal=Literal::Time(43200000000LL)}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{.test_name=&quot;Timestamp&quot;,.small_literal=Literal::Timestamp(1000000LL),.large_literal=Literal::Timestamp(2000000LL),.equal_literal=Literal::Timestamp(1000000LL)}, <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref>{.test_name=&quot;TimestampTz&quot;,.small_literal=Literal::TimestampTz(1000000LL),.large_literal=Literal::TimestampTz(2000000LL),.equal_literal=Literal::TimestampTz(1000000LL)})</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const ::testing::TestParamInfo&lt; <ref refid="structiceberg_1_1ComparisonLiteralTestParam" kindref="compound">ComparisonLiteralTestParam</ref> &gt; &amp;info) { return info.param.test_name;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="587" column="1" declfile="iceberg/test/literal_test.cc" declline="587" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="literal__test_8cc_1a36a3e19bad2440332631e6a4e32ec502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(CastLiteralTestCases, CastLiteralTest, ::testing::Values(CastLiteralTestParam{.test_name=&quot;IntToLong&quot;,.source_literal=Literal::Int(42),.target_type=int64(),.expected_literal=Literal::Long(42L)}, CastLiteralTestParam{.test_name=&quot;IntToFloat&quot;,.source_literal=Literal::Int(42),.target_type=float32(),.expected_literal=Literal::Float(42.0f)}, CastLiteralTestParam{.test_name=&quot;IntToDouble&quot;,.source_literal=Literal::Int(42),.target_type=float64(),.expected_literal=Literal::Double(42.0)}, CastLiteralTestParam{.test_name=&quot;IntToDate&quot;,.source_literal=Literal::Int(42),.target_type=date(),.expected_literal=Literal::Date(42)}, CastLiteralTestParam{.test_name=&quot;LongToInt&quot;,.source_literal=Literal::Long(42L),.target_type=int32(),.expected_literal=Literal::Int(42)}, CastLiteralTestParam{.test_name=&quot;LongToFloat&quot;,.source_literal=Literal::Long(42L),.target_type=float32(),.expected_literal=Literal::Float(42.0f)}, CastLiteralTestParam{.test_name=&quot;LongToDouble&quot;,.source_literal=Literal::Long(42L),.target_type=float64(),.expected_literal=Literal::Double(42.0)}, CastLiteralTestParam{.test_name=&quot;LongToTime&quot;,.source_literal=Literal::Long(42L),.target_type=time(),.expected_literal=Literal::Time(42L)}, CastLiteralTestParam{.test_name=&quot;LongToTimestamp&quot;,.source_literal=Literal::Long(42L),.target_type=timestamp(),.expected_literal=Literal::Timestamp(42L)}, CastLiteralTestParam{.test_name=&quot;LongToTimestampTz&quot;,.source_literal=Literal::Long(42L),.target_type=timestamp_tz(),.expected_literal=Literal::TimestampTz(42L)}, CastLiteralTestParam{ .test_name=&quot;TimestampToDate&quot;,.source_literal=Literal::Timestamp(TemporalTestHelper::CreateTimestamp({.year=2021,.month=6,.day=1,.hour=11,.minute=43,.second=20})),.target_type=date(),.expected_literal=Literal::Date(TemporalTestHelper::CreateDate({.year=2021,.month=6,.day=1}))}, CastLiteralTestParam{ .test_name=&quot;TimestampTzToDate&quot;,.source_literal=Literal::TimestampTz(TemporalTestHelper::CreateTimestampTz({.year=2021,.month=1,.day=1,.hour=7,.minute=43,.second=20,.tz_offset_minutes=480})),.target_type=date(),.expected_literal=Literal::Date(TemporalTestHelper::CreateDate({.year=2020,.month=12,.day=31}))}, CastLiteralTestParam{.test_name=&quot;EpochToDate&quot;,.source_literal=Literal::Timestamp(TemporalTestHelper::CreateTimestamp({.year=1970,.month=1,.day=1,.hour=0,.minute=0,.second=0})),.target_type=date(),.expected_literal=Literal::Date(0)}, CastLiteralTestParam{.test_name=&quot;TimestampBeforeEpochToDate&quot;,.source_literal=Literal::Timestamp(TemporalTestHelper::CreateTimestamp({.year=1969,.month=12,.day=31,.hour=23,.minute=59,.second=59})),.target_type=date(),.expected_literal=Literal::Date(-1)}, CastLiteralTestParam{.test_name=&quot;FloatToDouble&quot;,.source_literal=Literal::Float(2.0f),.target_type=float64(),.expected_literal=Literal::Double(double{2.0f})}, CastLiteralTestParam{.test_name=&quot;DoubleToFloat&quot;,.source_literal=Literal::Double(2.0),.target_type=float32(),.expected_literal=Literal::Float(2.0f)}, CastLiteralTestParam{.test_name=&quot;BinaryToFixed&quot;,.source_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{ 0x01, 0x02, 0x03, 0x04}),.target_type=fixed(4),.expected_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{ 0x01, 0x02, 0x03, 0x04})}, CastLiteralTestParam{.test_name=&quot;FixedToBinary&quot;,.source_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{ 0x01, 0x02, 0x03, 0x04}),.target_type=binary(),.expected_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{ 0x01, 0x02, 0x03, 0x04})}, CastLiteralTestParam{.test_name=&quot;FixedToFixed&quot;,.source_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{ 0x01, 0x02, 0x03, 0x04}),.target_type=fixed(4),.expected_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{ 0x01, 0x02, 0x03, 0x04})}, CastLiteralTestParam{ .test_name=&quot;StringToUuid&quot;,.source_literal=Literal::String(&quot;123e4567-e89b-12d3-a456-426614174000&quot;),.target_type=uuid(),.expected_literal=Literal::UUID(Uuid::FromString(&quot;123e4567-e89b-12d3-a456-426614174000&quot;).value())}, CastLiteralTestParam{.test_name=&quot;IntToInt&quot;,.source_literal=Literal::Int(42),.target_type=int32(),.expected_literal=Literal::Int(42)}), [](const ::testing::TestParamInfo&lt; CastLiteralTestParam &gt; &amp;info) { return info.param.test_name;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>CastLiteralTestCases</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1CastLiteralTest" kindref="compound">CastLiteralTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;IntToLong&quot;,.source_literal=Literal::Int(42),.target_type=<ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">int64</ref>(),.expected_literal=Literal::Long(42L)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;IntToFloat&quot;,.source_literal=Literal::Int(42),.target_type=<ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">float32</ref>(),.expected_literal=Literal::Float(42.0f)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;IntToDouble&quot;,.source_literal=Literal::Int(42),.target_type=<ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">float64</ref>(),.expected_literal=Literal::Double(42.0)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;IntToDate&quot;,.source_literal=Literal::Int(42),.target_type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">date</ref>(),.expected_literal=Literal::Date(42)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;LongToInt&quot;,.source_literal=Literal::Long(42L),.target_type=<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">int32</ref>(),.expected_literal=Literal::Int(42)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;LongToFloat&quot;,.source_literal=Literal::Long(42L),.target_type=<ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">float32</ref>(),.expected_literal=Literal::Float(42.0f)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;LongToDouble&quot;,.source_literal=Literal::Long(42L),.target_type=<ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">float64</ref>(),.expected_literal=Literal::Double(42.0)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;LongToTime&quot;,.source_literal=Literal::Long(42L),.target_type=<ref refid="group__type-factories_1ga7048c118c821d9aba4c08f3f23262b0f" kindref="member">time</ref>(),.expected_literal=Literal::Time(42L)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;LongToTimestamp&quot;,.source_literal=Literal::Long(42L),.target_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">timestamp</ref>(),.expected_literal=Literal::Timestamp(42L)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;LongToTimestampTz&quot;,.source_literal=Literal::Long(42L),.target_type=<ref refid="group__type-factories_1ga6533501016e29cf4e348da8a2a20635d" kindref="member">timestamp_tz</ref>(),.expected_literal=Literal::TimestampTz(42L)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{ .test_name=&quot;TimestampToDate&quot;,.source_literal=Literal::Timestamp(<ref refid="classiceberg_1_1TemporalTestHelper_1a2ae9b1c35bb860df5162b51bed761fe0" kindref="member">TemporalTestHelper::CreateTimestamp</ref>({.year=2021,.month=6,.day=1,.hour=11,.minute=43,.second=20})),.target_type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">date</ref>(),.expected_literal=Literal::Date(<ref refid="classiceberg_1_1TemporalTestHelper_1aefda458c187052bf1bb772bc3b321a04" kindref="member">TemporalTestHelper::CreateDate</ref>({.year=2021,.month=6,.day=1}))}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{ .test_name=&quot;TimestampTzToDate&quot;,.source_literal=Literal::TimestampTz(<ref refid="classiceberg_1_1TemporalTestHelper_1a5a6d083e812d0277aa3c34224a3e75c3" kindref="member">TemporalTestHelper::CreateTimestampTz</ref>({.year=2021,.month=1,.day=1,.hour=7,.minute=43,.second=20,.tz_offset_minutes=480})),.target_type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">date</ref>(),.expected_literal=Literal::Date(<ref refid="classiceberg_1_1TemporalTestHelper_1aefda458c187052bf1bb772bc3b321a04" kindref="member">TemporalTestHelper::CreateDate</ref>({.year=2020,.month=12,.day=31}))}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;EpochToDate&quot;,.source_literal=Literal::Timestamp(<ref refid="classiceberg_1_1TemporalTestHelper_1a2ae9b1c35bb860df5162b51bed761fe0" kindref="member">TemporalTestHelper::CreateTimestamp</ref>({.year=1970,.month=1,.day=1,.hour=0,.minute=0,.second=0})),.target_type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">date</ref>(),.expected_literal=Literal::Date(0)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;TimestampBeforeEpochToDate&quot;,.source_literal=Literal::Timestamp(<ref refid="classiceberg_1_1TemporalTestHelper_1a2ae9b1c35bb860df5162b51bed761fe0" kindref="member">TemporalTestHelper::CreateTimestamp</ref>({.year=1969,.month=12,.day=31,.hour=23,.minute=59,.second=59})),.target_type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">date</ref>(),.expected_literal=Literal::Date(-1)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;FloatToDouble&quot;,.source_literal=Literal::Float(2.0f),.target_type=<ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">float64</ref>(),.expected_literal=Literal::Double(double{2.0f})}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;DoubleToFloat&quot;,.source_literal=Literal::Double(2.0),.target_type=<ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">float32</ref>(),.expected_literal=Literal::Float(2.0f)}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;BinaryToFixed&quot;,.source_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{ 0x01, 0x02, 0x03, 0x04}),.target_type=<ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">fixed</ref>(4),.expected_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{ 0x01, 0x02, 0x03, 0x04})}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;FixedToBinary&quot;,.source_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{ 0x01, 0x02, 0x03, 0x04}),.target_type=<ref refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kindref="member">binary</ref>(),.expected_literal=Literal::Binary(std::vector&lt; uint8_t &gt;{ 0x01, 0x02, 0x03, 0x04})}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;FixedToFixed&quot;,.source_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{ 0x01, 0x02, 0x03, 0x04}),.target_type=<ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">fixed</ref>(4),.expected_literal=Literal::Fixed(std::vector&lt; uint8_t &gt;{ 0x01, 0x02, 0x03, 0x04})}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{ .test_name=&quot;StringToUuid&quot;,.source_literal=Literal::String(&quot;123e4567-e89b-12d3-a456-426614174000&quot;),.target_type=<ref refid="group__type-factories_1gafcf0f5e6522390678b91a9515b174bcf" kindref="member">uuid</ref>(),.expected_literal=Literal::UUID(<ref refid="classiceberg_1_1Uuid_1a4058089f8fff9a9fcad38dac8731674f" kindref="member">Uuid::FromString</ref>(&quot;123e4567-e89b-12d3-a456-426614174000&quot;).value())}, <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref>{.test_name=&quot;IntToInt&quot;,.source_literal=Literal::Int(42),.target_type=<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">int32</ref>(),.expected_literal=Literal::Int(42)})</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const ::testing::TestParamInfo&lt; <ref refid="structiceberg_1_1CastLiteralTestParam" kindref="compound">CastLiteralTestParam</ref> &gt; &amp;info) { return info.param.test_name;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/literal_test.cc" line="662" column="1" declfile="iceberg/test/literal_test.cc" declline="662" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="manifest__list__reader__writer__test_8cc_1a9cc44aa6c6e8e922e0e0ff1b28cab8d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestListReaderWriterV1Test, PartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestListReaderWriterV1Test" kindref="compound">ManifestListReaderWriterV1Test</ref></type>
        </param>
        <param>
          <type>PartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_list_reader_writer_test.cc" line="314" column="1" bodyfile="iceberg/test/manifest_list_reader_writer_test.cc" bodystart="314" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="manifest__list__reader__writer__test_8cc_1aa01f3a64f8651ab507fec934a6112af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestListReaderWriterV1Test, ComplexTypeTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestListReaderWriterV1Test" kindref="compound">ManifestListReaderWriterV1Test</ref></type>
        </param>
        <param>
          <type>ComplexTypeTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_list_reader_writer_test.cc" line="321" column="1" bodyfile="iceberg/test/manifest_list_reader_writer_test.cc" bodystart="321" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="manifest__list__reader__writer__test_8cc_1a33c097dfe554fa59ca7defe91aa5f474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestListReaderWriterV1Test, ComplexPartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestListReaderWriterV1Test" kindref="compound">ManifestListReaderWriterV1Test</ref></type>
        </param>
        <param>
          <type>ComplexPartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_list_reader_writer_test.cc" line="328" column="1" bodyfile="iceberg/test/manifest_list_reader_writer_test.cc" bodystart="328" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="manifest__list__reader__writer__test_8cc_1aa65e1993552f3b603d78fa3a0137eee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestListReaderWriterV1Test, WritePartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestListReaderWriterV1Test" kindref="compound">ManifestListReaderWriterV1Test</ref></type>
        </param>
        <param>
          <type>WritePartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_list_reader_writer_test.cc" line="335" column="1" bodyfile="iceberg/test/manifest_list_reader_writer_test.cc" bodystart="335" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="manifest__list__reader__writer__test_8cc_1a6fd4422d83108d39e99401b30bdf3e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestListReaderWriterV1Test, WriteComplexTypeTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestListReaderWriterV1Test" kindref="compound">ManifestListReaderWriterV1Test</ref></type>
        </param>
        <param>
          <type>WriteComplexTypeTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_list_reader_writer_test.cc" line="342" column="1" bodyfile="iceberg/test/manifest_list_reader_writer_test.cc" bodystart="342" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="manifest__list__reader__writer__test_8cc_1aa743f27a86af55c5506db3412fc2359d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestListReaderWriterV1Test, WriteComplexPartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestListReaderWriterV1Test" kindref="compound">ManifestListReaderWriterV1Test</ref></type>
        </param>
        <param>
          <type>WriteComplexPartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_list_reader_writer_test.cc" line="349" column="1" bodyfile="iceberg/test/manifest_list_reader_writer_test.cc" bodystart="349" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="manifest__list__reader__writer__test_8cc_1a02ceee06fd0c9c372ced71f1ac49d49a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestListReaderWriterV2Test, PartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestListReaderWriterV2Test" kindref="compound">ManifestListReaderWriterV2Test</ref></type>
        </param>
        <param>
          <type>PartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_list_reader_writer_test.cc" line="357" column="1" bodyfile="iceberg/test/manifest_list_reader_writer_test.cc" bodystart="357" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="manifest__list__reader__writer__test_8cc_1a2a8c3e99799e3f523bbc5f9a726b6983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestListReaderWriterV2Test, NonPartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestListReaderWriterV2Test" kindref="compound">ManifestListReaderWriterV2Test</ref></type>
        </param>
        <param>
          <type>NonPartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_list_reader_writer_test.cc" line="364" column="1" bodyfile="iceberg/test/manifest_list_reader_writer_test.cc" bodystart="364" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="manifest__list__reader__writer__test_8cc_1a4a2ebb616889acdd238fc731bbf95dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestListReaderWriterV2Test, WritePartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestListReaderWriterV2Test" kindref="compound">ManifestListReaderWriterV2Test</ref></type>
        </param>
        <param>
          <type>WritePartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_list_reader_writer_test.cc" line="374" column="1" bodyfile="iceberg/test/manifest_list_reader_writer_test.cc" bodystart="374" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="manifest__list__reader__writer__test_8cc_1a36dee0883bb71800089b7aa9a6ce191d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestListReaderWriterV2Test, WriteNonPartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestListReaderWriterV2Test" kindref="compound">ManifestListReaderWriterV2Test</ref></type>
        </param>
        <param>
          <type>WriteNonPartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_list_reader_writer_test.cc" line="381" column="1" bodyfile="iceberg/test/manifest_list_reader_writer_test.cc" bodystart="381" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__writer__test_8cc_1ab5ea5b2f560833bcae05191e864a06aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestReaderV1Test, PartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestReaderV1Test" kindref="compound">ManifestReaderV1Test</ref></type>
        </param>
        <param>
          <type>PartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_reader_writer_test.cc" line="167" column="1" bodyfile="iceberg/test/manifest_reader_writer_test.cc" bodystart="167" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__writer__test_8cc_1a5f708cbbe46fdab9b8ad9730a757c75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestReaderV1Test, WritePartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestReaderV1Test" kindref="compound">ManifestReaderV1Test</ref></type>
        </param>
        <param>
          <type>WritePartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_reader_writer_test.cc" line="177" column="1" bodyfile="iceberg/test/manifest_reader_writer_test.cc" bodystart="177" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__writer__test_8cc_1ac4d471609ce56fbc39053ad7c79e000b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestReaderV2Test, NonPartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestReaderV2Test" kindref="compound">ManifestReaderV2Test</ref></type>
        </param>
        <param>
          <type>NonPartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_reader_writer_test.cc" line="274" column="1" bodyfile="iceberg/test/manifest_reader_writer_test.cc" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__writer__test_8cc_1a5338d33538a96d4c855dfbcbb4cc35c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestReaderV2Test, MetadataInheritanceTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestReaderV2Test" kindref="compound">ManifestReaderV2Test</ref></type>
        </param>
        <param>
          <type>MetadataInheritanceTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_reader_writer_test.cc" line="279" column="1" bodyfile="iceberg/test/manifest_reader_writer_test.cc" bodystart="279" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__writer__test_8cc_1a04c439865636454def3d59f21c8f24d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestReaderV2Test, WriteNonPartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestReaderV2Test" kindref="compound">ManifestReaderV2Test</ref></type>
        </param>
        <param>
          <type>WriteNonPartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_reader_writer_test.cc" line="293" column="1" bodyfile="iceberg/test/manifest_reader_writer_test.cc" bodystart="293" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="manifest__reader__writer__test_8cc_1ace5759364c1f18f13c1c439286f7d464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(ManifestReaderV2Test, WriteInheritancePartitionedTest)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestReaderV2Test" kindref="compound">ManifestReaderV2Test</ref></type>
        </param>
        <param>
          <type>WriteInheritancePartitionedTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/manifest_reader_writer_test.cc" line="300" column="1" bodyfile="iceberg/test/manifest_reader_writer_test.cc" bodystart="300" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="matchers_8h_1ad040d17339ce1641a490df9fa48c7b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::MATCHER</definition>
        <argsstring>(IsOk, &quot;is an Ok result&quot;)</argsstring>
        <name>MATCHER</name>
        <qualifiedname>iceberg::MATCHER</qualifiedname>
        <param>
          <type>IsOk</type>
        </param>
        <param>
          <type>&quot;is an Ok result&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/matchers.h" line="67" column="1" bodyfile="iceberg/test/matchers.h" bodystart="67" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="matchers_8h_1a93a9c65a575345a74426c759ea62e16f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::MATCHER_P</definition>
        <argsstring>(IsError, kind, &quot;is an Error with the specified kind&quot;)</argsstring>
        <name>MATCHER_P</name>
        <qualifiedname>iceberg::MATCHER_P</qualifiedname>
        <param>
          <type>IsError</type>
        </param>
        <param>
          <type>kind</type>
        </param>
        <param>
          <type>&quot;is an <ref refid="structiceberg_1_1Error" kindref="compound">Error</ref> with the specified kind&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/matchers.h" line="76" column="1" bodyfile="iceberg/test/matchers.h" bodystart="76" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="matchers_8h_1a988d1fa7194de8f0d70fb0d33c84ed06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::MATCHER_P</definition>
        <argsstring>(HasErrorMessage, message_substr, &quot;is an Error with message containing the substring&quot;)</argsstring>
        <name>MATCHER_P</name>
        <qualifiedname>iceberg::MATCHER_P</qualifiedname>
        <param>
          <type>HasErrorMessage</type>
        </param>
        <param>
          <type>message_substr</type>
        </param>
        <param>
          <type>&quot;is an <ref refid="structiceberg_1_1Error" kindref="compound">Error</ref> with message containing the substring&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/matchers.h" line="92" column="1" bodyfile="iceberg/test/matchers.h" bodystart="92" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="matchers_8h_1a6cd3814ea31ecbb49e0a426b203d2319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatcherT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto iceberg::HasValue</definition>
        <argsstring>(MatcherT &amp;&amp;matcher)</argsstring>
        <name>HasValue</name>
        <qualifiedname>iceberg::HasValue</qualifiedname>
        <param>
          <type>MatcherT &amp;&amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/matchers.h" line="141" column="6" bodyfile="iceberg/test/matchers.h" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="matchers_8h_1adb3ad4d406c848d2eeda2edef76bb9af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto iceberg::HasValue</definition>
        <argsstring>()</argsstring>
        <name>HasValue</name>
        <qualifiedname>iceberg::HasValue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/matchers.h" line="147" column="13" bodyfile="iceberg/test/matchers.h" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="matchers_8h_1a16b2607444d958eb353342ffeab64b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatcherT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto iceberg::ResultIs</definition>
        <argsstring>(MatcherT &amp;&amp;matcher)</argsstring>
        <name>ResultIs</name>
        <qualifiedname>iceberg::ResultIs</qualifiedname>
        <param>
          <type>MatcherT &amp;&amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/matchers.h" line="202" column="6" bodyfile="iceberg/test/matchers.h" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="matchers_8h_1a90c33f8e2acd4b8e62919be8e877ee1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatcherT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto iceberg::ErrorIs</definition>
        <argsstring>(MatcherT &amp;&amp;matcher)</argsstring>
        <name>ErrorIs</name>
        <qualifiedname>iceberg::ErrorIs</qualifiedname>
        <param>
          <type>MatcherT &amp;&amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/matchers.h" line="209" column="6" bodyfile="iceberg/test/matchers.h" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="metadata__io__test_8cc_1a6d71dc31b459e9c22a92952c872969cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(MetadataIOTest, ReadWriteMetadata)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1MetadataIOTest" kindref="compound">MetadataIOTest</ref></type>
        </param>
        <param>
          <type>ReadWriteMetadata</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_io_test.cc" line="78" column="1" bodyfile="iceberg/test/metadata_io_test.cc" bodystart="78" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="metadata__io__test_8cc_1aeb60420a6e46bfebebecb81d98711064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(MetadataIOTest, ReadWriteCompressedMetadata)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1MetadataIOTest" kindref="compound">MetadataIOTest</ref></type>
        </param>
        <param>
          <type>ReadWriteCompressedMetadata</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_io_test.cc" line="90" column="1" bodyfile="iceberg/test/metadata_io_test.cc" bodystart="90" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="metadata__serde__test_8cc_1aaf69b7b942b8f56748b2001a67dc7551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(MetadataSerdeTest, DeserializeV1Valid)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>MetadataSerdeTest</type>
        </param>
        <param>
          <type>DeserializeV1Valid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_serde_test.cc" line="92" column="1" bodyfile="iceberg/test/metadata_serde_test.cc" bodystart="92" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="metadata__serde__test_8cc_1aecff0222f4fce7b2803e1fa91a70787e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(MetadataSerdeTest, DeserializeV2Valid)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>MetadataSerdeTest</type>
        </param>
        <param>
          <type>DeserializeV2Valid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_serde_test.cc" line="131" column="1" bodyfile="iceberg/test/metadata_serde_test.cc" bodystart="131" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="metadata__serde__test_8cc_1af2997693292388e5b6455d75c3926b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(MetadataSerdeTest, DeserializeV2ValidMinimal)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>MetadataSerdeTest</type>
        </param>
        <param>
          <type>DeserializeV2ValidMinimal</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_serde_test.cc" line="215" column="1" bodyfile="iceberg/test/metadata_serde_test.cc" bodystart="215" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="metadata__serde__test_8cc_1a3fd985d11611ea7cdd68a1fb34a2cb49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(MetadataSerdeTest, DeserializeStatisticsFiles)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>MetadataSerdeTest</type>
        </param>
        <param>
          <type>DeserializeStatisticsFiles</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_serde_test.cc" line="264" column="1" bodyfile="iceberg/test/metadata_serde_test.cc" bodystart="264" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="metadata__serde__test_8cc_1a2d443ce5c04df505656d8056a7657800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(MetadataSerdeTest, DeserializePartitionStatisticsFiles)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>MetadataSerdeTest</type>
        </param>
        <param>
          <type>DeserializePartitionStatisticsFiles</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_serde_test.cc" line="333" column="1" bodyfile="iceberg/test/metadata_serde_test.cc" bodystart="333" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="metadata__serde__test_8cc_1a05fc4ba35ea2ec79afa010c3f17e8395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(MetadataSerdeTest, DeserializeUnsupportedVersion)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>MetadataSerdeTest</type>
        </param>
        <param>
          <type>DeserializeUnsupportedVersion</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_serde_test.cc" line="381" column="1" bodyfile="iceberg/test/metadata_serde_test.cc" bodystart="381" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="metadata__serde__test_8cc_1a26bf496aef1a3b352ed129494fe419dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(MetadataSerdeTest, DeserializeV1MissingSchemaType)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>MetadataSerdeTest</type>
        </param>
        <param>
          <type>DeserializeV1MissingSchemaType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_serde_test.cc" line="386" column="1" bodyfile="iceberg/test/metadata_serde_test.cc" bodystart="386" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="metadata__serde__test_8cc_1ab061c473854b4d912d8edc352914db52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(MetadataSerdeTest, DeserializeV2CurrentSchemaNotFound)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>MetadataSerdeTest</type>
        </param>
        <param>
          <type>DeserializeV2CurrentSchemaNotFound</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_serde_test.cc" line="390" column="1" bodyfile="iceberg/test/metadata_serde_test.cc" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="metadata__serde__test_8cc_1af8dc8c801165969f599416ff9dbb2ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(MetadataSerdeTest, DeserializeV2MissingLastPartitionId)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>MetadataSerdeTest</type>
        </param>
        <param>
          <type>DeserializeV2MissingLastPartitionId</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_serde_test.cc" line="395" column="1" bodyfile="iceberg/test/metadata_serde_test.cc" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="metadata__serde__test_8cc_1a37429828f8c444258d2803b5c460bccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(MetadataSerdeTest, DeserializeV2MissingPartitionSpecs)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>MetadataSerdeTest</type>
        </param>
        <param>
          <type>DeserializeV2MissingPartitionSpecs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_serde_test.cc" line="400" column="1" bodyfile="iceberg/test/metadata_serde_test.cc" bodystart="400" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="metadata__serde__test_8cc_1ae5edcec3977bd19695fe4bbd5e1c2590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(MetadataSerdeTest, DeserializeV2MissingSchemas)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>MetadataSerdeTest</type>
        </param>
        <param>
          <type>DeserializeV2MissingSchemas</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_serde_test.cc" line="405" column="1" bodyfile="iceberg/test/metadata_serde_test.cc" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="metadata__serde__test_8cc_1a7dbe01d7db5e850014d3c7622fdd8a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(MetadataSerdeTest, DeserializeV2MissingSortOrder)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>MetadataSerdeTest</type>
        </param>
        <param>
          <type>DeserializeV2MissingSortOrder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/metadata_serde_test.cc" line="410" column="1" bodyfile="iceberg/test/metadata_serde_test.cc" bodystart="410" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping__test_8cc_1afb01d253ee12f35201b0b945ebbe44fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(NameMappingTest, FindById)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1NameMappingTest" kindref="compound">NameMappingTest</ref></type>
        </param>
        <param>
          <type>FindById</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/name_mapping_test.cc" line="50" column="1" bodyfile="iceberg/test/name_mapping_test.cc" bodystart="50" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping__test_8cc_1a3bab04ccc14f22ca3b7d4ad7159597e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(NameMappingTest, FindByName)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1NameMappingTest" kindref="compound">NameMappingTest</ref></type>
        </param>
        <param>
          <type>FindByName</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/name_mapping_test.cc" line="80" column="1" bodyfile="iceberg/test/name_mapping_test.cc" bodystart="80" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping__test_8cc_1a22912f3cccbf0526f8c6d4adc4643b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(NameMappingTest, FindByNameParts)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1NameMappingTest" kindref="compound">NameMappingTest</ref></type>
        </param>
        <param>
          <type>FindByNameParts</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/name_mapping_test.cc" line="110" column="1" bodyfile="iceberg/test/name_mapping_test.cc" bodystart="110" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping__test_8cc_1a317fe9168b7445bc82ed72d863fdc5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(NameMappingTest, FindMethodsOnConstObject)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1NameMappingTest" kindref="compound">NameMappingTest</ref></type>
        </param>
        <param>
          <type>FindMethodsOnConstObject</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/name_mapping_test.cc" line="140" column="1" bodyfile="iceberg/test/name_mapping_test.cc" bodystart="140" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping__test_8cc_1a26b7babfe12c73e55cc3553cee7754cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(NameMappingTest, FindMethodsOnConstEmptyMapping)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1NameMappingTest" kindref="compound">NameMappingTest</ref></type>
        </param>
        <param>
          <type>FindMethodsOnConstEmptyMapping</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/name_mapping_test.cc" line="174" column="1" bodyfile="iceberg/test/name_mapping_test.cc" bodystart="174" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping__test_8cc_1a29a69c77cadc3fb29527b5aa92849263" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(NameMappingTest, Equality)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1NameMappingTest" kindref="compound">NameMappingTest</ref></type>
        </param>
        <param>
          <type>Equality</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/name_mapping_test.cc" line="192" column="1" bodyfile="iceberg/test/name_mapping_test.cc" bodystart="192" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping__test_8cc_1a61477838d0820867f1ea8758e1972281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(NameMappingTest, MappedFieldsAccess)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1NameMappingTest" kindref="compound">NameMappingTest</ref></type>
        </param>
        <param>
          <type>MappedFieldsAccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/name_mapping_test.cc" line="208" column="1" bodyfile="iceberg/test/name_mapping_test.cc" bodystart="208" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping__test_8cc_1a7ec3e4fa94a74bb52c603d483de43ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(NameMappingTest, ToString)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1NameMappingTest" kindref="compound">NameMappingTest</ref></type>
        </param>
        <param>
          <type>ToString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/name_mapping_test.cc" line="231" column="1" bodyfile="iceberg/test/name_mapping_test.cc" bodystart="231" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping__test_8cc_1a9d574a2090ab3114a24406424c575078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(CreateMappingTest, FlatSchemaToMapping)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>CreateMappingTest</type>
        </param>
        <param>
          <type>FlatSchemaToMapping</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/name_mapping_test.cc" line="258" column="1" bodyfile="iceberg/test/name_mapping_test.cc" bodystart="258" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping__test_8cc_1ac0ca4561cb32439233b04bebb4d1d151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(CreateMappingTest, NestedStructSchemaToMapping)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>CreateMappingTest</type>
        </param>
        <param>
          <type>NestedStructSchemaToMapping</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/name_mapping_test.cc" line="274" column="1" bodyfile="iceberg/test/name_mapping_test.cc" bodystart="274" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping__test_8cc_1a790cb380cfaf2b87304766189fe83cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(CreateMappingTest, MapSchemaToMapping)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>CreateMappingTest</type>
        </param>
        <param>
          <type>MapSchemaToMapping</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/name_mapping_test.cc" line="302" column="1" bodyfile="iceberg/test/name_mapping_test.cc" bodystart="302" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="name__mapping__test_8cc_1a06ea9e506e68d7c4fe5b3757c324727b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(CreateMappingTest, ListSchemaToMapping)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>CreateMappingTest</type>
        </param>
        <param>
          <type>ListSchemaToMapping</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/name_mapping_test.cc" line="329" column="1" bodyfile="iceberg/test/name_mapping_test.cc" bodystart="329" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="partition__field__test_8cc_1ae1c024093a1e3d3169f22bfcae25ccb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(PartitionFieldTest, Basics)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>PartitionFieldTest</type>
        </param>
        <param>
          <type>Basics</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/partition_field_test.cc" line="32" column="1" bodyfile="iceberg/test/partition_field_test.cc" bodystart="32" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="partition__field__test_8cc_1aaa74f85fbc23f860377bcdd6684cf247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(PartitionFieldTest, Equality)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>PartitionFieldTest</type>
        </param>
        <param>
          <type>Equality</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/partition_field_test.cc" line="45" column="1" bodyfile="iceberg/test/partition_field_test.cc" bodystart="45" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="partition__spec__test_8cc_1aa0b5d4dc2aefb6a9197a81bbe3599907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(PartitionSpecTest, Basics)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>PartitionSpecTest</type>
        </param>
        <param>
          <type>Basics</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/partition_spec_test.cc" line="36" column="1" bodyfile="iceberg/test/partition_spec_test.cc" bodystart="36" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="partition__spec__test_8cc_1aee77051efb5107f841737fa0b7dc79dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(PartitionSpecTest, Equality)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>PartitionSpecTest</type>
        </param>
        <param>
          <type>Equality</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/partition_spec_test.cc" line="62" column="1" bodyfile="iceberg/test/partition_spec_test.cc" bodystart="62" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="partition__spec__test_8cc_1a0a440f98570cc41889073aa4abae3f0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(PartitionSpecTest, PartitionSchemaTest)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>PartitionSpecTest</type>
        </param>
        <param>
          <type>PartitionSchemaTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/partition_spec_test.cc" line="91" column="1" bodyfile="iceberg/test/partition_spec_test.cc" bodystart="91" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a0e60eda3bd4f92df9e337ad81778f780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, LogicalOperationsAndOr)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>LogicalOperationsAndOr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="43" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="43" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a8225302ba3fb58e4f02fb5ebd1596a9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, ConstantExpressions)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>ConstantExpressions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="82" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="82" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a395d928a9a1de639168503199e35e7b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, UnaryPredicateFactory)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>UnaryPredicateFactory</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="90" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="90" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1ac7dbd49b23d059e8fe37d31e1a259209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, ComparisonPredicateFactory)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>ComparisonPredicateFactory</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="108" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="108" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a6f66383812a0525e507f89083d3ea75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, StringPredicateFactory)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>StringPredicateFactory</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="134" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="134" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a6f702bdf8f224376776401584f79e2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, SetPredicateFactory)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>SetPredicateFactory</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="144" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="144" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a5a9c97ca55a952a887078e2daf2c78c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, GenericPredicateFactory)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>GenericPredicateFactory</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="166" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="166" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a2511952f8838ad393aceb4f67b96d43f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, TransformFactory)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>TransformFactory</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="182" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="182" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a1f14f88fae94db757386f53db8cc7b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, ReferenceFactory)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>ReferenceFactory</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="208" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="208" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1aab124e7963c393dfb1ef9ddfa7c4254c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, NamedReferenceBasics)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>NamedReferenceBasics</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="214" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="214" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1ae91c0e3927803562417dc15ccb5415ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, NamedReferenceBind)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>NamedReferenceBind</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="221" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="221" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1ad36ad3a8d25d59eb7e8700707419768d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, NamedReferenceBindNonExistentField)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>NamedReferenceBindNonExistentField</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="233" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="233" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1ae67c3c3e607d9f1cd79419dbd87841cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, BoundReferenceEquality)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>BoundReferenceEquality</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="239" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="239" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1ad45f4fb12bf47224a239718683ebd45e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, UnboundPredicateCreation)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>UnboundPredicateCreation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="257" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="257" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1adbed5369c95ba6829031a1eb506449c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, UnboundPredicateToString)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>UnboundPredicateToString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="272" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="272" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1aaf8869e85591661cecd2695b358db098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, UnboundPredicateNegate)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>UnboundPredicateNegate</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="286" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="286" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a31b0e45bff9db36437e5cf3cbe268d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, UnboundPredicateBindUnary)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>UnboundPredicateBindUnary</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="309" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="309" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1af6402a794aa24f3c78ddd61710a88c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, UnboundPredicateBindLiteral)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>UnboundPredicateBindLiteral</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="334" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="334" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a2b9afff641aff7ea4d830981e4d92cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, UnboundPredicateBindIn)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>UnboundPredicateBindIn</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="352" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="352" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a0d7f69576e3870068afee5375d3cb74c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, FloatingPointNaNPredicates)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>FloatingPointNaNPredicates</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="378" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="378" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a4ed760beae9bcc34f51d1471dc732072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, StringStartsWithPredicates)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>StringStartsWithPredicates</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="391" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="391" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1ac770383c63180811f8a26e419bd25591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, LiteralConversionEdgeCases)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>LiteralConversionEdgeCases</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="404" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="404" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="predicate__test_8cc_1a78f57fc09a5e8245081fba91177e1d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(PredicateTest, ComplexExpressionCombinations)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1PredicateTest" kindref="compound">PredicateTest</ref></type>
        </param>
        <param>
          <type>ComplexExpressionCombinations</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/predicate_test.cc" line="414" column="1" bodyfile="iceberg/test/predicate_test.cc" bodystart="414" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="roaring__test_8cc_1a5b66192dd54bd27a247d5b8188ef37f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(CRoaringTest, Basic32Bit)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>CRoaringTest</type>
        </param>
        <param>
          <type>Basic32Bit</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/roaring_test.cc" line="27" column="1" bodyfile="iceberg/test/roaring_test.cc" bodystart="27" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="roaring__test_8cc_1a12684bd8025099094a6a56f508320c40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(CRoaringTest, Basic64Bit)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>CRoaringTest</type>
        </param>
        <param>
          <type>Basic64Bit</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/roaring_test.cc" line="38" column="1" bodyfile="iceberg/test/roaring_test.cc" bodystart="38" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="roaring__test_8cc_1af0b5374ccb0cadcb714504008aa08ebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(CRoaringTest, ConstructorWithInitializerList)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>CRoaringTest</type>
        </param>
        <param>
          <type>ConstructorWithInitializerList</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/roaring_test.cc" line="49" column="1" bodyfile="iceberg/test/roaring_test.cc" bodystart="49" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="schema__json__test_8cc_1afc716ac698b9e4ad25ec3214017e8ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(TypeJsonTest, SingleTypeRoundTrip)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TypeJsonTest" kindref="compound">TypeJsonTest</ref></type>
        </param>
        <param>
          <type>SingleTypeRoundTrip</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_json_test.cc" line="41" column="1" bodyfile="iceberg/test/schema_json_test.cc" bodystart="41" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="schema__json__test_8cc_1ab94ad62a63d8427bdcddb40928eebec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(JsonSerailization, TypeJsonTest, ::testing::Values(SchemaJsonParam{.json=&quot;\&quot;boolean\&quot;&quot;,.type=iceberg::boolean()}, SchemaJsonParam{.json=&quot;\&quot;int\&quot;&quot;,.type=iceberg::int32()}, SchemaJsonParam{.json=&quot;\&quot;long\&quot;&quot;,.type=iceberg::int64()}, SchemaJsonParam{.json=&quot;\&quot;float\&quot;&quot;,.type=iceberg::float32()}, SchemaJsonParam{.json=&quot;\&quot;double\&quot;&quot;,.type=iceberg::float64()}, SchemaJsonParam{.json=&quot;\&quot;string\&quot;&quot;,.type=iceberg::string()}, SchemaJsonParam{.json=&quot;\&quot;binary\&quot;&quot;,.type=iceberg::binary()}, SchemaJsonParam{.json=&quot;\&quot;uuid\&quot;&quot;,.type=iceberg::uuid()}, SchemaJsonParam{.json=&quot;\&quot;fixed[8]\&quot;&quot;,.type=iceberg::fixed(8)}, SchemaJsonParam{.json=&quot;\&quot;decimal(10,2)\&quot;&quot;,.type=iceberg::decimal(10, 2)}, SchemaJsonParam{.json=&quot;\&quot;date\&quot;&quot;,.type=iceberg::date()}, SchemaJsonParam{.json=&quot;\&quot;time\&quot;&quot;,.type=iceberg::time()}, SchemaJsonParam{.json=&quot;\&quot;timestamp\&quot;&quot;,.type=iceberg::timestamp()}, SchemaJsonParam{.json=&quot;\&quot;timestamptz\&quot;&quot;,.type=std::make_shared&lt; TimestampTzType &gt;()}, SchemaJsonParam{ .json=R&quot;({&quot;element&quot;:&quot;string&quot;,&quot;element-id&quot;:3,&quot;element-required&quot;:true,&quot;type&quot;:&quot;list&quot;})&quot;,.type=std::make_shared&lt; ListType &gt;(SchemaField::MakeRequired(3, &quot;element&quot;, iceberg::string()))}, SchemaJsonParam{ .json=R&quot;({&quot;key&quot;:&quot;string&quot;,&quot;key-id&quot;:4,&quot;type&quot;:&quot;map&quot;,&quot;value&quot;:&quot;double&quot;,&quot;value-id&quot;:5,&quot;value-required&quot;:false})&quot;,.type=std::make_shared&lt; MapType &gt;(SchemaField::MakeRequired(4, &quot;key&quot;, iceberg::string()), SchemaField::MakeOptional(5, &quot;value&quot;, iceberg::float64()))}, SchemaJsonParam{ .json=R&quot;({&quot;fields&quot;:[{&quot;id&quot;:1,&quot;name&quot;:&quot;id&quot;,&quot;required&quot;:true,&quot;type&quot;:&quot;int&quot;},{&quot;id&quot;:2,&quot;name&quot;:&quot;name&quot;,&quot;required&quot;:false,&quot;type&quot;:&quot;string&quot;}],&quot;type&quot;:&quot;struct&quot;})&quot;,.type=std::make_shared&lt; StructType &gt;(std::vector&lt; SchemaField &gt;{ SchemaField::MakeRequired(1, &quot;id&quot;, iceberg::int32()), SchemaField::MakeOptional(2, &quot;name&quot;, iceberg::string())})}))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>JsonSerailization</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1TypeJsonTest" kindref="compound">TypeJsonTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;boolean\&quot;&quot;,.type=<ref refid="group__type-factories_1gafb5f5aec1d1d6218809ee512e2f87e83" kindref="member">iceberg::boolean</ref>()}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;int\&quot;&quot;,.type=<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>()}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;long\&quot;&quot;,.type=<ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;float\&quot;&quot;,.type=<ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">iceberg::float32</ref>()}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;double\&quot;&quot;,.type=<ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">iceberg::float64</ref>()}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;string\&quot;&quot;,.type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;binary\&quot;&quot;,.type=<ref refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kindref="member">iceberg::binary</ref>()}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;uuid\&quot;&quot;,.type=<ref refid="group__type-factories_1gafcf0f5e6522390678b91a9515b174bcf" kindref="member">iceberg::uuid</ref>()}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;fixed[8]\&quot;&quot;,.type=<ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">iceberg::fixed</ref>(8)}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;decimal(10,2)\&quot;&quot;,.type=<ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">iceberg::decimal</ref>(10, 2)}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;date\&quot;&quot;,.type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">iceberg::date</ref>()}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;time\&quot;&quot;,.type=<ref refid="group__type-factories_1ga7048c118c821d9aba4c08f3f23262b0f" kindref="member">iceberg::time</ref>()}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;timestamp\&quot;&quot;,.type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>()}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{.json=&quot;\&quot;timestamptz\&quot;&quot;,.type=std::make_shared&lt; <ref refid="classiceberg_1_1TimestampTzType" kindref="compound">TimestampTzType</ref> &gt;()}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{ .json=R&quot;({&quot;element&quot;:&quot;string&quot;,&quot;element-id&quot;:3,&quot;element-required&quot;:true,&quot;type&quot;:&quot;list&quot;})&quot;,.type=std::make_shared&lt; <ref refid="classiceberg_1_1ListType" kindref="compound">ListType</ref> &gt;(<ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(3, &quot;element&quot;, <ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()))}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{ .json=R&quot;({&quot;key&quot;:&quot;string&quot;,&quot;key-id&quot;:4,&quot;type&quot;:&quot;map&quot;,&quot;value&quot;:&quot;double&quot;,&quot;value-id&quot;:5,&quot;value-required&quot;:false})&quot;,.type=std::make_shared&lt; <ref refid="classiceberg_1_1MapType" kindref="compound">MapType</ref> &gt;(<ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(4, &quot;key&quot;, <ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()), <ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(5, &quot;value&quot;, <ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">iceberg::float64</ref>()))}, <ref refid="structiceberg_1_1SchemaJsonParam" kindref="compound">SchemaJsonParam</ref>{ .json=R&quot;({&quot;fields&quot;:[{&quot;id&quot;:1,&quot;name&quot;:&quot;id&quot;,&quot;required&quot;:true,&quot;type&quot;:&quot;int&quot;},{&quot;id&quot;:2,&quot;name&quot;:&quot;name&quot;,&quot;required&quot;:false,&quot;type&quot;:&quot;string&quot;}],&quot;type&quot;:&quot;struct&quot;})&quot;,.type=std::make_shared&lt; <ref refid="classiceberg_1_1StructType" kindref="compound">StructType</ref> &gt;(std::vector&lt; <ref refid="classiceberg_1_1SchemaField" kindref="compound">SchemaField</ref> &gt;{ <ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(1, &quot;id&quot;, <ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>()), <ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(2, &quot;name&quot;, <ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>())})})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_json_test.cc" line="55" column="1" declfile="iceberg/test/schema_json_test.cc" declline="55" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="schema__json__test_8cc_1a820fd1e1cecb22d3aaaa2fab5ecb6742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(TypeJsonTest, FromJsonWithSpaces)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TypeJsonTest" kindref="compound">TypeJsonTest</ref></type>
        </param>
        <param>
          <type>FromJsonWithSpaces</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_json_test.cc" line="91" column="1" bodyfile="iceberg/test/schema_json_test.cc" bodystart="91" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="schema__json__test_8cc_1a5ad654385f5fa90fd284e97e8fef42df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaJsonTest, RoundTrip)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaJsonTest</type>
        </param>
        <param>
          <type>RoundTrip</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_json_test.cc" line="110" column="1" bodyfile="iceberg/test/schema_json_test.cc" bodystart="110" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1a68dfbb41910c3aa4d7529077cf1be37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectIdenticalSchemas)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectIdenticalSchemas</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="103" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="103" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1ac3d9e442ded6f12b911aab12e39701ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectSubsetSchema)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectSubsetSchema</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="116" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="116" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1a012b105befde3880209471a88e03bafe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectWithPruning)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectWithPruning</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="133" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="133" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1ad45f336bb9c6b019ba62e80021d2860f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectMissingOptionalField)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectMissingOptionalField</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="149" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="149" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1a6755043802892973e23842faeaa97d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectMissingRequiredField)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectMissingRequiredField</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="168" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="168" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1a5cd9ab84ab3ac2e0bdf53a981435f45c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectMetadataColumn)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectMetadataColumn</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="182" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="182" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1a1b7c6cf842ea0d0df58a406b11977538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectSchemaEvolutionIntToLong)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectSchemaEvolutionIntToLong</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="199" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="199" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1a6dd3c7f2cd8f5892d232c7a9b1570c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectSchemaEvolutionFloatToDouble)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectSchemaEvolutionFloatToDouble</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="214" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="214" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1a1d784f9ea6144e9f3b8e3ae9844dd304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectSchemaEvolutionDecimalCompatible)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectSchemaEvolutionDecimalCompatible</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="229" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="229" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1a25f9903dbff0820994987f1f78b7fba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectSchemaEvolutionDecimalIncompatible)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectSchemaEvolutionDecimalIncompatible</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="244" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="244" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1a921234ab7b0adfb0e2cfca4f93f3d434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectSchemaEvolutionIncompatibleTypes)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectSchemaEvolutionIncompatibleTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="256" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="256" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1acd317cce0ff25e8da14c60032ae59887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectNestedStructures)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectNestedStructures</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="268" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="268" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1a2bb54655ecbd2ca3a80f785e66137f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectSubsetNestedFields)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectSubsetNestedFields</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="297" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="297" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1aca14958ab5f61ff11239a195a4edc585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectListOfStruct)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectListOfStruct</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="336" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="336" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1aee57b76c527c71bb8c9babf1f91ee4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectMapWithStructValue)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectMapWithStructValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="388" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="388" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1a0b1be58865573b55fdee68edae363b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectComplexMixedTypes)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectComplexMixedTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="409" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="409" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="schema__util__test_8cc_1a97447dfaee0b40cd003f4b31a78cdb1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SchemaUtilTest, ProjectIncompatibleNestedTypes)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SchemaUtilTest</type>
        </param>
        <param>
          <type>ProjectIncompatibleNestedTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/schema_util_test.cc" line="440" column="1" bodyfile="iceberg/test/schema_util_test.cc" bodystart="440" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="snapshot__test_8cc_1a74575107373e36866229cfeb3919212b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SnapshotRefTest, SnapshotRefBranchInitialization)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SnapshotRefTest</type>
        </param>
        <param>
          <type>SnapshotRefBranchInitialization</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/snapshot_test.cc" line="27" column="1" bodyfile="iceberg/test/snapshot_test.cc" bodystart="27" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="snapshot__test_8cc_1ab8c0e97e93cedac8192716bfd32962ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SnapshotRefTest, SnapshotRefTagInitialization)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SnapshotRefTest</type>
        </param>
        <param>
          <type>SnapshotRefTagInitialization</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/snapshot_test.cc" line="48" column="1" bodyfile="iceberg/test/snapshot_test.cc" bodystart="48" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="snapshot__test_8cc_1a85cf644abe32c350aeb1868b4f22097f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(SnapshotTest, ConstructionAndFieldAccess)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1SnapshotTest" kindref="compound">SnapshotTest</ref></type>
        </param>
        <param>
          <type>ConstructionAndFieldAccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/snapshot_test.cc" line="83" column="1" bodyfile="iceberg/test/snapshot_test.cc" bodystart="83" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="snapshot__test_8cc_1a5965adb2802545f134fe204d322c326a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(SnapshotTest, EqualityComparison)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1SnapshotTest" kindref="compound">SnapshotTest</ref></type>
        </param>
        <param>
          <type>EqualityComparison</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/snapshot_test.cc" line="108" column="1" bodyfile="iceberg/test/snapshot_test.cc" bodystart="108" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="sort__field__test_8cc_1a8c4a0202540170c1ce4eebf0ade5d0a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SortFieldTest, Basics)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SortFieldTest</type>
        </param>
        <param>
          <type>Basics</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/sort_field_test.cc" line="31" column="1" bodyfile="iceberg/test/sort_field_test.cc" bodystart="31" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="sort__field__test_8cc_1a41ba0fa194dc4d5374c23eef699a40d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SortFieldTest, Equality)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SortFieldTest</type>
        </param>
        <param>
          <type>Equality</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/sort_field_test.cc" line="50" column="1" bodyfile="iceberg/test/sort_field_test.cc" bodystart="50" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="sort__order__test_8cc_1a0ade71ca3409040864d58068769a01b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SortOrderTest, Basics)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SortOrderTest</type>
        </param>
        <param>
          <type>Basics</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/sort_order_test.cc" line="34" column="1" bodyfile="iceberg/test/sort_order_test.cc" bodystart="34" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="sort__order__test_8cc_1a6c14eeea856564942437a8114ec617a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(SortOrderTest, Equality)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>SortOrderTest</type>
        </param>
        <param>
          <type>Equality</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/sort_order_test.cc" line="61" column="1" bodyfile="iceberg/test/sort_order_test.cc" bodystart="61" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="string__util__test_8cc_1a668e049c17363bb783ee1f5e4cab25e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(StringUtilsTest, ToLower)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>StringUtilsTest</type>
        </param>
        <param>
          <type>ToLower</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/string_util_test.cc" line="26" column="1" bodyfile="iceberg/test/string_util_test.cc" bodystart="26" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="string__util__test_8cc_1ab8eb770905aa7c4581f367d6981b1e87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(StringUtilsTest, ToUpper)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>StringUtilsTest</type>
        </param>
        <param>
          <type>ToUpper</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/string_util_test.cc" line="35" column="1" bodyfile="iceberg/test/string_util_test.cc" bodystart="35" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="struct__like__test_8cc_1a096c10a7b38658713c935d7849b20274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ManifestFileStructLike, BasicFields)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestFileStructLike" kindref="compound">ManifestFileStructLike</ref></type>
        </param>
        <param>
          <type>BasicFields</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/struct_like_test.cc" line="59" column="1" bodyfile="iceberg/test/struct_like_test.cc" bodystart="59" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="struct__like__test_8cc_1a4f59a5d6ff657c72c44e9dbbbfca20ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ManifestFileStructLike, OptionalFields)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestFileStructLike" kindref="compound">ManifestFileStructLike</ref></type>
        </param>
        <param>
          <type>OptionalFields</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/struct_like_test.cc" line="99" column="1" bodyfile="iceberg/test/struct_like_test.cc" bodystart="99" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="struct__like__test_8cc_1ab8cccf17943429fdc943ff8d38424ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ManifestFileStructLike, WithPartitions)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ManifestFileStructLike" kindref="compound">ManifestFileStructLike</ref></type>
        </param>
        <param>
          <type>WithPartitions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/struct_like_test.cc" line="130" column="1" bodyfile="iceberg/test/struct_like_test.cc" bodystart="130" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="struct__like__test_8cc_1a76de2c11fa68ee78fc088cad4e8bca1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ArrowArrayStructLike, PrimitiveFields)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ArrowArrayStructLike" kindref="compound">ArrowArrayStructLike</ref></type>
        </param>
        <param>
          <type>PrimitiveFields</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/struct_like_test.cc" line="197" column="1" bodyfile="iceberg/test/struct_like_test.cc" bodystart="197" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="struct__like__test_8cc_1ae93228054d3e7eacd0cf4de0c3fda288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ArrowArrayStructLike, NestedStruct)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ArrowArrayStructLike" kindref="compound">ArrowArrayStructLike</ref></type>
        </param>
        <param>
          <type>NestedStruct</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/struct_like_test.cc" line="265" column="1" bodyfile="iceberg/test/struct_like_test.cc" bodystart="265" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="struct__like__test_8cc_1a470808aaed1170c81a6179c50fe64ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ArrowArrayStructLike, PrimitiveList)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ArrowArrayStructLike" kindref="compound">ArrowArrayStructLike</ref></type>
        </param>
        <param>
          <type>PrimitiveList</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/struct_like_test.cc" line="311" column="1" bodyfile="iceberg/test/struct_like_test.cc" bodystart="311" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="struct__like__test_8cc_1a9958316c16707cf826906d72e53d4e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(ArrowArrayStructLike, PrimitiveMap)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1ArrowArrayStructLike" kindref="compound">ArrowArrayStructLike</ref></type>
        </param>
        <param>
          <type>PrimitiveMap</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/struct_like_test.cc" line="349" column="1" bodyfile="iceberg/test/struct_like_test.cc" bodystart="349" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1a51eb383fd0a9f99f5e3941191407dc94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, BuildFromEmpty)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>BuildFromEmpty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="78" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="78" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1a289f7e3e8da923c82246245b51a5c733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, BuildFromExisting)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>BuildFromExisting</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="94" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="94" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1a82ed2cae118dd6923407a259c292a261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, AssignUUIDForNewTable)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>AssignUUIDForNewTable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="110" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="110" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1a1001e764ad83ffadc18d2b40f6a8e80a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, AssignUUIDAndUpdateExisting)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>AssignUUIDAndUpdateExisting</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="118" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="118" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1a278b510f09d43accb2c02bf95fdfa459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, AssignUUIDWithEmptyUUID)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>AssignUUIDWithEmptyUUID</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="126" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="126" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1a8912b2ac57b521418f01f0660e2534a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, AssignUUIDWithSameUUID)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>AssignUUIDWithSameUUID</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="133" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="133" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1a42144c23cd866a59ba2047a63b8e87b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, AssignUUIDWithAutoGenerate)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>AssignUUIDWithAutoGenerate</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="141" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="141" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1a7aeec1a0cc7b7f028470e239d9c02541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, AssignUUIDAndCaseInsensitiveComparison)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>AssignUUIDAndCaseInsensitiveComparison</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="149" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="149" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1abfa9849df8cce5b046d2ab83cf4bc497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, TableUpdateWithAssignUUID)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>TableUpdateWithAssignUUID</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="162" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="162" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1aa153f3476407f54a7e34246c5b9ac4af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, TableUpdateWithAssignUUIDAndGenerateRequirementsForNewTable)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>TableUpdateWithAssignUUIDAndGenerateRequirementsForNewTable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="176" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="176" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1acc414e28a6f7fbf3bf52bf3bded13dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, TableUpdateWithAssignUUIDAndGenerateRequirementsForExistingTable)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>TableUpdateWithAssignUUIDAndGenerateRequirementsForExistingTable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="184" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="184" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1af7834c2f47e8195275f3995664abcf30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, TableUpdateWithAssignUUIDAndGenerateRequirementsWithEmptyUUID)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>TableUpdateWithAssignUUIDAndGenerateRequirementsWithEmptyUUID</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="192" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="192" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1a4fab619801a19b0f1dc07abb038b4a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, TableRequirementAssertUUIDSuccess)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>TableRequirementAssertUUIDSuccess</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="205" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="205" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1aa067cfa8963f0d02a00384b9c888c5e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, TableRequirementAssertUUIDMismatch)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>TableRequirementAssertUUIDMismatch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="211" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="211" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1afb6026c423f23ce492091ea45e6d2443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, TableRequirementAssertUUIDNullBase)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>TableRequirementAssertUUIDNullBase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="219" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1a07bc1e4eb075d6462d5d5f7ebb4dc8c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, TableRequirementAssertUUIDCaseInsensitive)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>TableRequirementAssertUUIDCaseInsensitive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="227" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="227" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1a2c918f3a105e82336cddae875db10b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, IntegrationCreateTableWithUUID)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>IntegrationCreateTableWithUUID</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="238" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="238" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="table__metadata__builder__test_8cc_1aa95ce27768971d53a132d9cb55e17fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_F</definition>
        <argsstring>(TableMetadataBuilderTest, IntegrationOptimisticConcurrencyControl)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>iceberg::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TableMetadataBuilderTest" kindref="compound">TableMetadataBuilderTest</ref></type>
        </param>
        <param>
          <type>IntegrationOptimisticConcurrencyControl</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_metadata_builder_test.cc" line="247" column="1" bodyfile="iceberg/test/table_metadata_builder_test.cc" bodystart="247" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="table__test_8cc_1ad96aec343b5d227bda8e8e96a1b016e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(Table, TableV1)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1Table" kindref="compound">Table</ref></type>
        </param>
        <param>
          <type>TableV1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_test.cc" line="39" column="1" bodyfile="iceberg/test/table_test.cc" bodystart="39" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="table__test_8cc_1a2f3e8c37b43aafb920e35841c4f2b9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(Table, TableV2)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1Table" kindref="compound">Table</ref></type>
        </param>
        <param>
          <type>TableV2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/table_test.cc" line="78" column="1" bodyfile="iceberg/test/table_test.cc" bodystart="78" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="test__common_8cc_1a6eb724a6ac97fd5899c07e75467aec8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iceberg::GetResourcePath</definition>
        <argsstring>(const std::string &amp;file_name)</argsstring>
        <name>GetResourcePath</name>
        <qualifiedname>iceberg::GetResourcePath</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
<para>Get the full path to a resource file in the test resources directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/test_common.cc" line="34" column="13" bodyfile="iceberg/test/test_common.cc" bodystart="34" bodyend="36" declfile="iceberg/test/test_common.h" declline="31" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="test__common_8cc_1a289bcb1b68edb188ec442bb53a06858d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iceberg::ReadJsonFile</definition>
        <argsstring>(const std::string &amp;file_name, std::string *content)</argsstring>
        <name>ReadJsonFile</name>
        <qualifiedname>iceberg::ReadJsonFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>content</declname>
        </param>
        <briefdescription>
<para>Read a JSON file from the test resources directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/test_common.cc" line="38" column="6" bodyfile="iceberg/test/test_common.cc" bodystart="38" bodyend="46" declfile="iceberg/test/test_common.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__common_8cc_1aa6f3dc42f9e02c355214dffdd6436394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iceberg::ReadTableMetadata</definition>
        <argsstring>(const std::string &amp;file_name, std::unique_ptr&lt; TableMetadata &gt; *metadata)</argsstring>
        <name>ReadTableMetadata</name>
        <qualifiedname>iceberg::ReadTableMetadata</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref> &gt; *</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Read table metadata from a JSON file in the test resources directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/test_common.cc" line="48" column="6" bodyfile="iceberg/test/test_common.cc" bodystart="48" bodyend="54" declfile="iceberg/test/test_common.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__common_8cc_1a4f52511e71ccf2d446fb4d86b07aad04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; <ref refid="structiceberg_1_1TableMetadata" kindref="compound">TableMetadata</ref> &gt; &gt;</type>
        <definition>Result&lt; std::unique_ptr&lt; TableMetadata &gt; &gt; iceberg::ReadTableMetadata</definition>
        <argsstring>(const std::string &amp;file_name)</argsstring>
        <name>ReadTableMetadata</name>
        <qualifiedname>iceberg::ReadTableMetadata</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
<para>Read table metadata from a JSON file and return the Result directly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/test_common.cc" line="56" column="8" bodyfile="iceberg/test/test_common.cc" bodystart="56" bodyend="62" declfile="iceberg/test/test_common.h" declline="41" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1abdd96097d80ae83b0c6391943637a13f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(TransformTest, Transform)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>TransformTest</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1Transform" kindref="compound">Transform</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="37" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a6ef3d78c661dfbb7f06f5bec61e58e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(TransformFunctionTest, CreateBucketTransform)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>TransformFunctionTest</type>
        </param>
        <param>
          <type>CreateBucketTransform</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="48" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="48" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1ad08b111e902296aa62be68df76f5f6d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(TransformFunctionTest, CreateTruncateTransform)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>TransformFunctionTest</type>
        </param>
        <param>
          <type>CreateTruncateTransform</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="59" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="59" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1ae6d15ec8a8cc8e4b2cf6dec6cdf962af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(TransformFromStringTest, PositiveCases)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>TransformFromStringTest</type>
        </param>
        <param>
          <type>PositiveCases</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="69" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="69" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a23400ef638fd911af74b77326caad965" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(TransformFromStringTest, NegativeCases)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>TransformFromStringTest</type>
        </param>
        <param>
          <type>NegativeCases</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="101" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="101" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1ac48065c8d222d2f082dc1ca9f0999219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(TransformResultTypeTest, PositiveCases)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>TransformResultTypeTest</type>
        </param>
        <param>
          <type>PositiveCases</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="118" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="118" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a537c1b383cc2e27422d7edb55b02273d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(TransformResultTypeTest, NegativeCases)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>TransformResultTypeTest</type>
        </param>
        <param>
          <type>NegativeCases</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="166" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="166" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1aeb5b248362289ded4d1fa27c98c65a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(TransformLiteralTest, IdentityTransform)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TransformLiteralTest" kindref="compound">TransformLiteralTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1IdentityTransform" kindref="compound">IdentityTransform</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="205" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="205" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a8d32e243dc4a2f51db9b9cf7e8bbdb4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(IdentityTransformTests, TransformLiteralTest, ::testing::Values(TransformParam{.str=&quot;BooleanTrue&quot;,.source_type=iceberg::boolean(),.source=Literal::Boolean(true),.expected=Literal::Boolean(true)}, TransformParam{.str=&quot;BooleanFalse&quot;,.source_type=iceberg::boolean(),.source=Literal::Boolean(false),.expected=Literal::Boolean(false)}, TransformParam{.str=&quot;Int32&quot;,.source_type=iceberg::int32(),.source=Literal::Int(42),.expected=Literal::Int(42)}, TransformParam{.str=&quot;Date&quot;,.source_type=iceberg::int32(),.source=Literal::Date(30000),.expected=Literal::Date(30000)}, TransformParam{.str=&quot;Int64&quot;,.source_type=iceberg::int64(),.source=Literal::Long(1234567890),.expected=Literal::Long(1234567890)}, TransformParam{.str=&quot;Timestamp&quot;,.source_type=iceberg::timestamp(),.source=Literal::Timestamp(1622547800000000),.expected=Literal::Timestamp(1622547800000000)}, TransformParam{.str=&quot;TimestampTz&quot;,.source_type=iceberg::timestamp_tz(),.source=Literal::TimestampTz(1622547800000000),.expected=Literal::TimestampTz(1622547800000000)}, TransformParam{.str=&quot;Float&quot;,.source_type=iceberg::float32(),.source=Literal::Float(3.14),.expected=Literal::Float(3.14)}, TransformParam{.str=&quot;Double&quot;,.source_type=iceberg::float64(),.source=Literal::Double(1.23e-5),.expected=Literal::Double(1.23e-5)}, TransformParam{.str=&quot;Decimal&quot;,.source_type=iceberg::decimal(10, 2),.source=Literal::Decimal(123456, 10, 2),.expected=Literal::Decimal(123456, 10, 2)}, TransformParam{.str=&quot;String&quot;,.source_type=iceberg::string(),.source=Literal::String(&quot;Hello, World!&quot;),.expected=Literal::String(&quot;Hello, World!&quot;)}, TransformParam{ .str=&quot;Uuid&quot;,.source_type=iceberg::uuid(),.source=Literal::UUID(Uuid::FromString(&quot;123e4567-e89b-12d3-a456-426614174000&quot;).value()),.expected=Literal::UUID(Uuid::FromString(&quot;123e4567-e89b-12d3-a456-426614174000&quot;).value())}, TransformParam{.str=&quot;Binary&quot;,.source_type=iceberg::binary(),.source=Literal::Binary({0x01, 0x02, 0x03}),.expected=Literal::Binary({0x01, 0x02, 0x03})}, TransformParam{.str=&quot;Fixed&quot;,.source_type=iceberg::fixed(3),.source=Literal::Fixed({0x01, 0x02, 0x03}),.expected=Literal::Fixed({0x01, 0x02, 0x03})}), [](const ::testing::TestParamInfo&lt; TransformParam &gt; &amp;info) { return info.param.str;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>IdentityTransformTests</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1TransformLiteralTest" kindref="compound">TransformLiteralTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;BooleanTrue&quot;,.source_type=<ref refid="group__type-factories_1gafb5f5aec1d1d6218809ee512e2f87e83" kindref="member">iceberg::boolean</ref>(),.source=<ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(true),.expected=<ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(true)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;BooleanFalse&quot;,.source_type=<ref refid="group__type-factories_1gafb5f5aec1d1d6218809ee512e2f87e83" kindref="member">iceberg::boolean</ref>(),.source=<ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(false),.expected=<ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(false)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Int32&quot;,.source_type=<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),.source=Literal::Int(42),.expected=Literal::Int(42)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Date&quot;,.source_type=<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),.source=Literal::Date(30000),.expected=Literal::Date(30000)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Int64&quot;,.source_type=<ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>(),.source=Literal::Long(1234567890),.expected=Literal::Long(1234567890)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Timestamp&quot;,.source_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.source=Literal::Timestamp(1622547800000000),.expected=Literal::Timestamp(1622547800000000)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;TimestampTz&quot;,.source_type=<ref refid="group__type-factories_1ga6533501016e29cf4e348da8a2a20635d" kindref="member">iceberg::timestamp_tz</ref>(),.source=Literal::TimestampTz(1622547800000000),.expected=Literal::TimestampTz(1622547800000000)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Float&quot;,.source_type=<ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">iceberg::float32</ref>(),.source=Literal::Float(3.14),.expected=Literal::Float(3.14)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Double&quot;,.source_type=<ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">iceberg::float64</ref>(),.source=Literal::Double(1.23e-5),.expected=Literal::Double(1.23e-5)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Decimal&quot;,.source_type=<ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">iceberg::decimal</ref>(10, 2),.source=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(123456, 10, 2),.expected=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(123456, 10, 2)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;String&quot;,.source_type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),.source=Literal::String(&quot;Hello, World!&quot;),.expected=Literal::String(&quot;Hello, World!&quot;)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{ .str=&quot;Uuid&quot;,.source_type=<ref refid="group__type-factories_1gafcf0f5e6522390678b91a9515b174bcf" kindref="member">iceberg::uuid</ref>(),.source=Literal::UUID(<ref refid="classiceberg_1_1Uuid_1a4058089f8fff9a9fcad38dac8731674f" kindref="member">Uuid::FromString</ref>(&quot;123e4567-e89b-12d3-a456-426614174000&quot;).value()),.expected=Literal::UUID(<ref refid="classiceberg_1_1Uuid_1a4058089f8fff9a9fcad38dac8731674f" kindref="member">Uuid::FromString</ref>(&quot;123e4567-e89b-12d3-a456-426614174000&quot;).value())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Binary&quot;,.source_type=<ref refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kindref="member">iceberg::binary</ref>(),.source=Literal::Binary({0x01, 0x02, 0x03}),.expected=Literal::Binary({0x01, 0x02, 0x03})}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Fixed&quot;,.source_type=<ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">iceberg::fixed</ref>(3),.source=Literal::Fixed({0x01, 0x02, 0x03}),.expected=Literal::Fixed({0x01, 0x02, 0x03})})</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const ::testing::TestParamInfo&lt; <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref> &gt; &amp;info) { return info.param.str;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="220" column="1" declfile="iceberg/test/transform_test.cc" declline="220" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1ae4237651c90c58c16c7eb7dbb12297cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(BucketTransformTest, BucketTransform)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1BucketTransformTest" kindref="compound">BucketTransformTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1BucketTransform" kindref="compound">BucketTransform</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="286" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="286" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a2a9fcdb5b26925ee5588744d275e4915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(BucketTransformTests, BucketTransformTest, ::testing::Values(TransformParam{.str=&quot;Int32&quot;,.source_type=iceberg::int32(),.source=Literal::Int(34),.expected=Literal::Int(3)}, TransformParam{.str=&quot;Int64&quot;,.source_type=iceberg::int64(),.source=Literal::Long(34),.expected=Literal::Int(3)}, TransformParam{.str=&quot;Decimal&quot;,.source_type=iceberg::decimal(4, 2),.source=Literal::Decimal(1420, 4, 2),.expected=Literal::Int(3)}, TransformParam{.str=&quot;Date&quot;,.source_type=iceberg::date(),.source=Literal::Date(TemporalTestHelper::CreateDate({.year=2017,.month=11,.day=16})),.expected=Literal::Int(2)}, TransformParam{.str=&quot;Time&quot;,.source_type=iceberg::time(),.source=Literal::Time(TemporalTestHelper::CreateTime({.hour=22,.minute=31,.second=8})),.expected=Literal::Int(3)}, TransformParam{.str=&quot;Timestamp&quot;,.source_type=iceberg::timestamp(),.source=Literal::Timestamp(TemporalTestHelper::CreateTimestamp({.year=2017,.month=11,.day=16,.hour=22,.minute=31,.second=8})),.expected=Literal::Int(3)}, TransformParam{ .str=&quot;TimestampTz&quot;,.source_type=iceberg::timestamp_tz(),.source=Literal::TimestampTz(TemporalTestHelper::CreateTimestampTz({.year=2017,.month=11,.day=16,.hour=14,.minute=31,.second=8,.microsecond=1,.tz_offset_minutes=-480})),.expected=Literal::Int(2)}, TransformParam{.str=&quot;String&quot;,.source_type=iceberg::string(),.source=Literal::String(&quot;iceberg&quot;),.expected=Literal::Int(1)}, TransformParam{ .str=&quot;Uuid&quot;,.source_type=iceberg::uuid(),.source=Literal::UUID(Uuid::FromString(&quot;f79c3e09-677c-4bbd-a479-3f349cb785e7&quot;).value()),.expected=Literal::Int(0)}, TransformParam{.str=&quot;Fixed&quot;,.source_type=iceberg::fixed(4),.source=Literal::Fixed({0, 1, 2, 3}),.expected=Literal::Int(1)}, TransformParam{.str=&quot;Binary&quot;,.source_type=iceberg::binary(),.source=Literal::Binary({0, 1, 2, 3}),.expected=Literal::Int(1)}), [](const ::testing::TestParamInfo&lt; TransformParam &gt; &amp;info) { return info.param.str;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>BucketTransformTests</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1BucketTransformTest" kindref="compound">BucketTransformTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Int32&quot;,.source_type=<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),.source=Literal::Int(34),.expected=Literal::Int(3)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Int64&quot;,.source_type=<ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>(),.source=Literal::Long(34),.expected=Literal::Int(3)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Decimal&quot;,.source_type=<ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">iceberg::decimal</ref>(4, 2),.source=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(1420, 4, 2),.expected=Literal::Int(3)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Date&quot;,.source_type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">iceberg::date</ref>(),.source=Literal::Date(<ref refid="classiceberg_1_1TemporalTestHelper_1aefda458c187052bf1bb772bc3b321a04" kindref="member">TemporalTestHelper::CreateDate</ref>({.year=2017,.month=11,.day=16})),.expected=Literal::Int(2)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Time&quot;,.source_type=<ref refid="group__type-factories_1ga7048c118c821d9aba4c08f3f23262b0f" kindref="member">iceberg::time</ref>(),.source=Literal::Time(<ref refid="classiceberg_1_1TemporalTestHelper_1a932a3c0963283ee38fca9ea4ffd65fa8" kindref="member">TemporalTestHelper::CreateTime</ref>({.hour=22,.minute=31,.second=8})),.expected=Literal::Int(3)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Timestamp&quot;,.source_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.source=Literal::Timestamp(<ref refid="classiceberg_1_1TemporalTestHelper_1a2ae9b1c35bb860df5162b51bed761fe0" kindref="member">TemporalTestHelper::CreateTimestamp</ref>({.year=2017,.month=11,.day=16,.hour=22,.minute=31,.second=8})),.expected=Literal::Int(3)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{ .str=&quot;TimestampTz&quot;,.source_type=<ref refid="group__type-factories_1ga6533501016e29cf4e348da8a2a20635d" kindref="member">iceberg::timestamp_tz</ref>(),.source=Literal::TimestampTz(<ref refid="classiceberg_1_1TemporalTestHelper_1a5a6d083e812d0277aa3c34224a3e75c3" kindref="member">TemporalTestHelper::CreateTimestampTz</ref>({.year=2017,.month=11,.day=16,.hour=14,.minute=31,.second=8,.microsecond=1,.tz_offset_minutes=-480})),.expected=Literal::Int(2)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;String&quot;,.source_type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),.source=Literal::String(&quot;iceberg&quot;),.expected=Literal::Int(1)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{ .str=&quot;Uuid&quot;,.source_type=<ref refid="group__type-factories_1gafcf0f5e6522390678b91a9515b174bcf" kindref="member">iceberg::uuid</ref>(),.source=Literal::UUID(<ref refid="classiceberg_1_1Uuid_1a4058089f8fff9a9fcad38dac8731674f" kindref="member">Uuid::FromString</ref>(&quot;f79c3e09-677c-4bbd-a479-3f349cb785e7&quot;).value()),.expected=Literal::Int(0)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Fixed&quot;,.source_type=<ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">iceberg::fixed</ref>(4),.source=Literal::Fixed({0, 1, 2, 3}),.expected=Literal::Int(1)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Binary&quot;,.source_type=<ref refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kindref="member">iceberg::binary</ref>(),.source=Literal::Binary({0, 1, 2, 3}),.expected=Literal::Int(1)})</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const ::testing::TestParamInfo&lt; <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref> &gt; &amp;info) { return info.param.str;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="301" column="1" declfile="iceberg/test/transform_test.cc" declline="301" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a8eb4c9c0c1abf7f716aab3937ce9b59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(TruncateTransformTest, TruncateTransform)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TruncateTransformTest" kindref="compound">TruncateTransformTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1TruncateTransform" kindref="compound">TruncateTransform</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="374" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="374" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a067f473b0b89223212031e58539fcee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(TruncateTransformTests, TruncateTransformTest, ::testing::Values(TransformParam{.str=&quot;Int32&quot;,.param=5,.source_type=iceberg::int32(),.source=Literal::Int(123456),.expected=Literal::Int(123455)}, TransformParam{.str=&quot;Int64&quot;,.param=10,.source_type=iceberg::int64(),.source=Literal::Long(-1),.expected=Literal::Long(-10)}, TransformParam{.str=&quot;Decimal&quot;,.param=50,.source_type=iceberg::decimal(5, 2),.source=Literal::Decimal(12345, 5, 2),.expected=Literal::Decimal(12300, 5, 2)}, TransformParam{.str=&quot;StringShort&quot;,.param=5,.source_type=iceberg::string(),.source=Literal::String(&quot;Hello, World!&quot;),.expected=Literal::String(&quot;Hello&quot;)}, TransformParam{.str=&quot;StringEmoji&quot;,.param=5,.source_type=iceberg::string(),.source=Literal::String(&quot;😜🧐🤔🤪🥳😵‍💫😂&quot;),.expected=Literal::String(&quot;😜🧐🤔🤪🥳&quot;)}, TransformParam{.str=&quot;StringMixed&quot;,.param=8,.source_type=iceberg::string(),.source=Literal::String(&quot;a😜b🧐c🤔d🤪e🥳&quot;),.expected=Literal::String(&quot;a😜b🧐c🤔d🤪&quot;)}, TransformParam{.str=&quot;Binary&quot;,.param=5,.source_type=iceberg::binary(),.source=Literal::Binary({0x01, 0x02, 0x03, 0x04, 0x05, 0x06}),.expected=Literal::Binary({0x01, 0x02, 0x03, 0x04, 0x05})}), [](const ::testing::TestParamInfo&lt; TransformParam &gt; &amp;info) { return info.param.str;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>TruncateTransformTests</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1TruncateTransformTest" kindref="compound">TruncateTransformTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Int32&quot;,.param=5,.source_type=<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),.source=Literal::Int(123456),.expected=Literal::Int(123455)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Int64&quot;,.param=10,.source_type=<ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>(),.source=Literal::Long(-1),.expected=Literal::Long(-10)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Decimal&quot;,.param=50,.source_type=<ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">iceberg::decimal</ref>(5, 2),.source=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(12345, 5, 2),.expected=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(12300, 5, 2)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;StringShort&quot;,.param=5,.source_type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),.source=Literal::String(&quot;Hello, World!&quot;),.expected=Literal::String(&quot;Hello&quot;)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;StringEmoji&quot;,.param=5,.source_type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),.source=Literal::String(&quot;😜🧐🤔🤪🥳😵‍💫😂&quot;),.expected=Literal::String(&quot;😜🧐🤔🤪🥳&quot;)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;StringMixed&quot;,.param=8,.source_type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),.source=Literal::String(&quot;a😜b🧐c🤔d🤪e🥳&quot;),.expected=Literal::String(&quot;a😜b🧐c🤔d🤪&quot;)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Binary&quot;,.param=5,.source_type=<ref refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kindref="member">iceberg::binary</ref>(),.source=Literal::Binary({0x01, 0x02, 0x03, 0x04, 0x05, 0x06}),.expected=Literal::Binary({0x01, 0x02, 0x03, 0x04, 0x05})})</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const ::testing::TestParamInfo&lt; <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref> &gt; &amp;info) { return info.param.str;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="387" column="1" declfile="iceberg/test/transform_test.cc" declline="387" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a985fe3e76638d4951a78b5bed080a243" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(YearTransformTest, YearTransform)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1YearTransformTest" kindref="compound">YearTransformTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1YearTransform" kindref="compound">YearTransform</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="429" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="429" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a9425016c808437187ce2c2e077a57e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(YearTransformTests, YearTransformTest, ::testing::Values(TransformParam{.str=&quot;Timestamp&quot;,.source_type=iceberg::timestamp(),.source=Literal::Timestamp(TemporalTestHelper::CreateTimestamp({.year=2021,.month=6,.day=1,.hour=11,.minute=43,.second=20})),.expected=Literal::Int(2021)}, TransformParam{ .str=&quot;TimestampTz&quot;,.source_type=iceberg::timestamp_tz(),.source=Literal::TimestampTz(TemporalTestHelper::CreateTimestampTz({.year=2021,.month=1,.day=1,.hour=7,.minute=43,.second=20,.tz_offset_minutes=480})),.expected=Literal::Int(2020)}, TransformParam{.str=&quot;Date&quot;,.source_type=iceberg::date(),.source=Literal::Date(TemporalTestHelper::CreateDate({.year=2052,.month=2,.day=20})),.expected=Literal::Int(2052)}), [](const ::testing::TestParamInfo&lt; TransformParam &gt; &amp;info) { return info.param.str;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>YearTransformTests</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1YearTransformTest" kindref="compound">YearTransformTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Timestamp&quot;,.source_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.source=Literal::Timestamp(<ref refid="classiceberg_1_1TemporalTestHelper_1a2ae9b1c35bb860df5162b51bed761fe0" kindref="member">TemporalTestHelper::CreateTimestamp</ref>({.year=2021,.month=6,.day=1,.hour=11,.minute=43,.second=20})),.expected=Literal::Int(2021)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{ .str=&quot;TimestampTz&quot;,.source_type=<ref refid="group__type-factories_1ga6533501016e29cf4e348da8a2a20635d" kindref="member">iceberg::timestamp_tz</ref>(),.source=Literal::TimestampTz(<ref refid="classiceberg_1_1TemporalTestHelper_1a5a6d083e812d0277aa3c34224a3e75c3" kindref="member">TemporalTestHelper::CreateTimestampTz</ref>({.year=2021,.month=1,.day=1,.hour=7,.minute=43,.second=20,.tz_offset_minutes=480})),.expected=Literal::Int(2020)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Date&quot;,.source_type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">iceberg::date</ref>(),.source=Literal::Date(<ref refid="classiceberg_1_1TemporalTestHelper_1aefda458c187052bf1bb772bc3b321a04" kindref="member">TemporalTestHelper::CreateDate</ref>({.year=2052,.month=2,.day=20})),.expected=Literal::Int(2052)})</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const ::testing::TestParamInfo&lt; <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref> &gt; &amp;info) { return info.param.str;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="444" column="1" declfile="iceberg/test/transform_test.cc" declline="444" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a38126da32a4020ba6fb3120ac5b71358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(MonthTransformTest, MonthTransform)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1MonthTransformTest" kindref="compound">MonthTransformTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1MonthTransform" kindref="compound">MonthTransform</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="480" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="480" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a3934cf5b82d42a5acf7e4681f35e4ef3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(MonthTransformTests, MonthTransformTest, ::testing::Values(TransformParam{.str=&quot;Timestamp&quot;,.source_type=iceberg::timestamp(),.source=Literal::Timestamp(1622547800000000),.expected=Literal::Int(617)}, TransformParam{.str=&quot;TimestampTz&quot;,.source_type=iceberg::timestamp_tz(),.source=Literal::TimestampTz(1622547800000000),.expected=Literal::Int(617)}, TransformParam{.str=&quot;Date&quot;,.source_type=iceberg::date(),.source=Literal::Date(30000),.expected=Literal::Int(985)}), [](const ::testing::TestParamInfo&lt; TransformParam &gt; &amp;info) { return info.param.str;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>MonthTransformTests</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1MonthTransformTest" kindref="compound">MonthTransformTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Timestamp&quot;,.source_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.source=Literal::Timestamp(1622547800000000),.expected=Literal::Int(617)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;TimestampTz&quot;,.source_type=<ref refid="group__type-factories_1ga6533501016e29cf4e348da8a2a20635d" kindref="member">iceberg::timestamp_tz</ref>(),.source=Literal::TimestampTz(1622547800000000),.expected=Literal::Int(617)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Date&quot;,.source_type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">iceberg::date</ref>(),.source=Literal::Date(30000),.expected=Literal::Int(985)})</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const ::testing::TestParamInfo&lt; <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref> &gt; &amp;info) { return info.param.str;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="495" column="1" declfile="iceberg/test/transform_test.cc" declline="495" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a76530dddaae1e3661fee72c808cd2310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(DayTransformTest, DayTransform)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1DayTransformTest" kindref="compound">DayTransformTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1DayTransform" kindref="compound">DayTransform</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="513" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="513" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1adb1884122fadafccdc30542e4c9fd3ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(DayTransformTests, DayTransformTest, ::testing::Values(TransformParam{.str=&quot;Timestamp&quot;,.source_type=iceberg::timestamp(),.source=Literal::Timestamp(TemporalTestHelper::CreateTimestamp({.year=2021,.month=6,.day=1,.hour=11,.minute=43,.second=20})),.expected=Literal::Int(TemporalTestHelper::CreateDate({.year=2021,.month=6,.day=1}))}, TransformParam{ .str=&quot;TimestampTz&quot;,.source_type=iceberg::timestamp_tz(),.source=Literal::TimestampTz(TemporalTestHelper::CreateTimestampTz({.year=2021,.month=1,.day=1,.hour=7,.minute=43,.second=20,.tz_offset_minutes=480})),.expected=Literal::Int(TemporalTestHelper::CreateDate({.year=2020,.month=12,.day=31}))}, TransformParam{.str=&quot;Date&quot;,.source_type=iceberg::date(),.source=Literal::Date(30000),.expected=Literal::Int(30000)}), [](const ::testing::TestParamInfo&lt; TransformParam &gt; &amp;info) { return info.param.str;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>DayTransformTests</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1DayTransformTest" kindref="compound">DayTransformTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Timestamp&quot;,.source_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.source=Literal::Timestamp(<ref refid="classiceberg_1_1TemporalTestHelper_1a2ae9b1c35bb860df5162b51bed761fe0" kindref="member">TemporalTestHelper::CreateTimestamp</ref>({.year=2021,.month=6,.day=1,.hour=11,.minute=43,.second=20})),.expected=Literal::Int(<ref refid="classiceberg_1_1TemporalTestHelper_1aefda458c187052bf1bb772bc3b321a04" kindref="member">TemporalTestHelper::CreateDate</ref>({.year=2021,.month=6,.day=1}))}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{ .str=&quot;TimestampTz&quot;,.source_type=<ref refid="group__type-factories_1ga6533501016e29cf4e348da8a2a20635d" kindref="member">iceberg::timestamp_tz</ref>(),.source=Literal::TimestampTz(<ref refid="classiceberg_1_1TemporalTestHelper_1a5a6d083e812d0277aa3c34224a3e75c3" kindref="member">TemporalTestHelper::CreateTimestampTz</ref>({.year=2021,.month=1,.day=1,.hour=7,.minute=43,.second=20,.tz_offset_minutes=480})),.expected=Literal::Int(<ref refid="classiceberg_1_1TemporalTestHelper_1aefda458c187052bf1bb772bc3b321a04" kindref="member">TemporalTestHelper::CreateDate</ref>({.year=2020,.month=12,.day=31}))}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Date&quot;,.source_type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">iceberg::date</ref>(),.source=Literal::Date(30000),.expected=Literal::Int(30000)})</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const ::testing::TestParamInfo&lt; <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref> &gt; &amp;info) { return info.param.str;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="528" column="1" declfile="iceberg/test/transform_test.cc" declline="528" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1ae73abe903b0fe737628dc26d1d5035fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(HourTransformTest, HourTransform)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1HourTransformTest" kindref="compound">HourTransformTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1HourTransform" kindref="compound">HourTransform</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="563" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="563" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1ac75c372980bf5ccb9740deeae9d19033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(HourTransformTests, HourTransformTest, ::testing::Values(TransformParam{.str=&quot;Timestamp&quot;,.source_type=iceberg::timestamp(),.source=Literal::Timestamp(1622547800000000),.expected=Literal::Int(450707)}, TransformParam{.str=&quot;TimestampTz&quot;,.source_type=iceberg::timestamp_tz(),.source=Literal::TimestampTz(1622547800000000),.expected=Literal::Int(450707)}), [](const ::testing::TestParamInfo&lt; TransformParam &gt; &amp;info) { return info.param.str;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>HourTransformTests</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1HourTransformTest" kindref="compound">HourTransformTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Timestamp&quot;,.source_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.source=Literal::Timestamp(1622547800000000),.expected=Literal::Int(450707)}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;TimestampTz&quot;,.source_type=<ref refid="group__type-factories_1ga6533501016e29cf4e348da8a2a20635d" kindref="member">iceberg::timestamp_tz</ref>(),.source=Literal::TimestampTz(1622547800000000),.expected=Literal::Int(450707)})</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const ::testing::TestParamInfo&lt; <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref> &gt; &amp;info) { return info.param.str;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="578" column="1" declfile="iceberg/test/transform_test.cc" declline="578" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a4521812d777c7d5fc7a20e2b7cc8baca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(VoidTransformTest, VoidTransform)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1VoidTransformTest" kindref="compound">VoidTransformTest</ref></type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1VoidTransform" kindref="compound">VoidTransform</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="592" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="592" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a3801204a055a4b2cdcd1ace7dcc18e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(VoidTransformTests, VoidTransformTest, ::testing::Values(TransformParam{.str=&quot;Boolean&quot;,.source_type=iceberg::boolean(),.source=Literal::Boolean(true),.expected=Literal::Null(iceberg::boolean())}, TransformParam{.str=&quot;Int32&quot;,.source_type=iceberg::int32(),.source=Literal::Int(42),.expected=Literal::Null(iceberg::int32())}, TransformParam{.str=&quot;Date&quot;,.source_type=iceberg::date(),.source=Literal::Date(30000),.expected=Literal::Null(iceberg::date())}, TransformParam{.str=&quot;Int64&quot;,.source_type=iceberg::int64(),.source=Literal::Long(1234567890),.expected=Literal::Null(iceberg::int64())}, TransformParam{.str=&quot;Timestamp&quot;,.source_type=iceberg::timestamp(),.source=Literal::Timestamp(1622547800000000),.expected=Literal::Null(iceberg::timestamp())}, TransformParam{.str=&quot;TimestampTz&quot;,.source_type=iceberg::timestamp_tz(),.source=Literal::TimestampTz(1622547800000000),.expected=Literal::Null(iceberg::timestamp_tz())}, TransformParam{.str=&quot;Float&quot;,.source_type=iceberg::float32(),.source=Literal::Float(3.14),.expected=Literal::Null(iceberg::float32())}, TransformParam{.str=&quot;Double&quot;,.source_type=iceberg::float64(),.source=Literal::Double(1.23e-5),.expected=Literal::Null(iceberg::float64())}, TransformParam{.str=&quot;Decimal&quot;,.source_type=iceberg::decimal(10, 2),.source=Literal::Decimal(123456, 10, 2),.expected=Literal::Null(iceberg::decimal(10, 2))}, TransformParam{.str=&quot;String&quot;,.source_type=iceberg::string(),.source=Literal::String(&quot;Hello, World!&quot;),.expected=Literal::Null(iceberg::string())}, TransformParam{ .str=&quot;Uuid&quot;,.source_type=iceberg::uuid(),.source=Literal::UUID(Uuid::FromString(&quot;123e4567-e89b-12d3-a456-426614174000&quot;).value()),.expected=Literal::Null(iceberg::uuid())}, TransformParam{.str=&quot;Binary&quot;,.source_type=iceberg::binary(),.source=Literal::Binary({0x01, 0x02, 0x03}),.expected=Literal::Null(iceberg::binary())}, TransformParam{.str=&quot;Fixed&quot;,.source_type=iceberg::fixed(3),.source=Literal::Fixed({0x01, 0x02, 0x03}),.expected=Literal::Null(iceberg::fixed(3))}), [](const ::testing::TestParamInfo&lt; TransformParam &gt; &amp;info) { return info.param.str;})</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>VoidTransformTests</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1VoidTransformTest" kindref="compound">VoidTransformTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Boolean&quot;,.source_type=<ref refid="group__type-factories_1gafb5f5aec1d1d6218809ee512e2f87e83" kindref="member">iceberg::boolean</ref>(),.source=<ref refid="classiceberg_1_1Literal_1ada29f73dbb21bde3e3da88e70ec56be3" kindref="member">Literal::Boolean</ref>(true),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1gafb5f5aec1d1d6218809ee512e2f87e83" kindref="member">iceberg::boolean</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Int32&quot;,.source_type=<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),.source=Literal::Int(42),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Date&quot;,.source_type=<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">iceberg::date</ref>(),.source=Literal::Date(30000),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kindref="member">iceberg::date</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Int64&quot;,.source_type=<ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>(),.source=Literal::Long(1234567890),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Timestamp&quot;,.source_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.source=Literal::Timestamp(1622547800000000),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;TimestampTz&quot;,.source_type=<ref refid="group__type-factories_1ga6533501016e29cf4e348da8a2a20635d" kindref="member">iceberg::timestamp_tz</ref>(),.source=Literal::TimestampTz(1622547800000000),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga6533501016e29cf4e348da8a2a20635d" kindref="member">iceberg::timestamp_tz</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Float&quot;,.source_type=<ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">iceberg::float32</ref>(),.source=Literal::Float(3.14),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kindref="member">iceberg::float32</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Double&quot;,.source_type=<ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">iceberg::float64</ref>(),.source=Literal::Double(1.23e-5),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">iceberg::float64</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Decimal&quot;,.source_type=<ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">iceberg::decimal</ref>(10, 2),.source=<ref refid="classiceberg_1_1Literal_1adee20c80370bc1256e52a25b6b68e831" kindref="member">Literal::Decimal</ref>(123456, 10, 2),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">iceberg::decimal</ref>(10, 2))}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;String&quot;,.source_type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),.source=Literal::String(&quot;Hello, World!&quot;),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{ .str=&quot;Uuid&quot;,.source_type=<ref refid="group__type-factories_1gafcf0f5e6522390678b91a9515b174bcf" kindref="member">iceberg::uuid</ref>(),.source=Literal::UUID(<ref refid="classiceberg_1_1Uuid_1a4058089f8fff9a9fcad38dac8731674f" kindref="member">Uuid::FromString</ref>(&quot;123e4567-e89b-12d3-a456-426614174000&quot;).value()),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1gafcf0f5e6522390678b91a9515b174bcf" kindref="member">iceberg::uuid</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Binary&quot;,.source_type=<ref refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kindref="member">iceberg::binary</ref>(),.source=Literal::Binary({0x01, 0x02, 0x03}),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kindref="member">iceberg::binary</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;Fixed&quot;,.source_type=<ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">iceberg::fixed</ref>(3),.source=Literal::Fixed({0x01, 0x02, 0x03}),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kindref="member">iceberg::fixed</ref>(3))})</type>
        </param>
        <param>
          <attributes>[]</attributes>
          <type>(const ::testing::TestParamInfo&lt; <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref> &gt; &amp;info) { return info.param.str;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="610" column="1" declfile="iceberg/test/transform_test.cc" declline="610" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a16b6eed6f9c4ea93cc2e42b84a41658c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(NullLiteralTransformTest, NullLiteralTransform)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1NullLiteralTransformTest" kindref="compound">NullLiteralTransformTest</ref></type>
        </param>
        <param>
          <type>NullLiteralTransform</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="671" column="1" bodyfile="iceberg/test/transform_test.cc" bodystart="671" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="transform__test_8cc_1a8d85cdb3d9beca8f9b2bee732633e87f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(NullLiteralTransformTests, NullLiteralTransformTest, ::testing::Values(TransformParam{.str=&quot;identity&quot;,.source_type=iceberg::string(),.source=Literal::Null(iceberg::string()),.expected=Literal::Null(iceberg::string())}, TransformParam{.str=&quot;year&quot;,.source_type=iceberg::timestamp(),.source=Literal::Null(iceberg::timestamp()),.expected=Literal::Null(iceberg::int32())}, TransformParam{.str=&quot;month&quot;,.source_type=iceberg::timestamp(),.source=Literal::Null(iceberg::timestamp()),.expected=Literal::Null(iceberg::int32())}, TransformParam{.str=&quot;day&quot;,.source_type=iceberg::timestamp(),.source=Literal::Null(iceberg::timestamp()),.expected=Literal::Null(iceberg::int32())}, TransformParam{.str=&quot;hour&quot;,.source_type=iceberg::timestamp(),.source=Literal::Null(iceberg::timestamp()),.expected=Literal::Null(iceberg::int32())}, TransformParam{.str=&quot;void&quot;,.source_type=iceberg::string(),.source=Literal::Null(iceberg::string()),.expected=Literal::Null(iceberg::string())}, TransformParam{.str=&quot;bucket[16]&quot;,.source_type=iceberg::string(),.source=Literal::Null(iceberg::string()),.expected=Literal::Null(iceberg::int32())}, TransformParam{.str=&quot;truncate[32]&quot;,.source_type=iceberg::string(),.source=Literal::Null(iceberg::string()),.expected=Literal::Null(iceberg::string())}))</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>NullLiteralTransformTests</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1NullLiteralTransformTest" kindref="compound">NullLiteralTransformTest</ref></type>
        </param>
        <param>
          <type>::testing::Values(<ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;identity&quot;,.source_type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),.source=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;year&quot;,.source_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.source=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>()),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;month&quot;,.source_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.source=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>()),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;day&quot;,.source_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.source=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>()),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;hour&quot;,.source_type=<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>(),.source=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kindref="member">iceberg::timestamp</ref>()),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;void&quot;,.source_type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),.source=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;bucket[16]&quot;,.source_type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),.source=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>())}, <ref refid="structiceberg_1_1TransformParam" kindref="compound">TransformParam</ref>{.str=&quot;truncate[32]&quot;,.source_type=<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),.source=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),.expected=<ref refid="classiceberg_1_1Literal_1a44431a54eab3ee7b4373b8b13b70960c" kindref="member">Literal::Null</ref>(<ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>())})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/transform_test.cc" line="688" column="1" declfile="iceberg/test/transform_test.cc" declline="688" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="truncate__util__test_8cc_1a6f766bae7aabfe7d0105d03227430480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(TruncateUtilTest, TruncateLiteral)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>TruncateUtilTest</type>
        </param>
        <param>
          <type>TruncateLiteral</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/truncate_util_test.cc" line="30" column="1" bodyfile="iceberg/test/truncate_util_test.cc" bodystart="30" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="uuid__test_8cc_1acad4e44ce763ec423b9ab230be407b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(UUIDUtilTest, GenerateV4)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>UUIDUtilTest</type>
        </param>
        <param>
          <type>GenerateV4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/uuid_test.cc" line="30" column="1" bodyfile="iceberg/test/uuid_test.cc" bodystart="30" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="uuid__test_8cc_1a3a432ce5d963e83c441183b2c0853f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(UUIDUtilTest, GenerateV7)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>UUIDUtilTest</type>
        </param>
        <param>
          <type>GenerateV7</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/uuid_test.cc" line="40" column="1" bodyfile="iceberg/test/uuid_test.cc" bodystart="40" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="uuid__test_8cc_1a0c8a399257ff5e3dced7d091ebd5e7d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(UUIDUtilTest, FromString)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>UUIDUtilTest</type>
        </param>
        <param>
          <type>FromString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/uuid_test.cc" line="50" column="1" bodyfile="iceberg/test/uuid_test.cc" bodystart="50" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="uuid__test_8cc_1af8fdfedca58d635bb27738df7b84a3d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(UUIDUtilTest, FromStringInvalid)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>UUIDUtilTest</type>
        </param>
        <param>
          <type>FromStringInvalid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/uuid_test.cc" line="78" column="1" bodyfile="iceberg/test/uuid_test.cc" bodystart="78" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="uuid__test_8cc_1a6fe2f4f60f9afb2af2d394ebc2923dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(UUIDUtilTest, FromBytes)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>UUIDUtilTest</type>
        </param>
        <param>
          <type>FromBytes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/uuid_test.cc" line="97" column="1" bodyfile="iceberg/test/uuid_test.cc" bodystart="97" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="uuid__test_8cc_1adf44aba9347e2ee4aea5f21f631ab1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST</definition>
        <argsstring>(UUIDUtilTest, FromBytesInvalid)</argsstring>
        <name>TEST</name>
        <qualifiedname>iceberg::TEST</qualifiedname>
        <param>
          <type>UUIDUtilTest</type>
        </param>
        <param>
          <type>FromBytesInvalid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/uuid_test.cc" line="108" column="1" bodyfile="iceberg/test/uuid_test.cc" bodystart="108" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="visit__type__test_8cc_1a5546ece6a8b74f4ab72b2901f7519b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(Primitive, TypeTest, ::testing::ValuesIn(kPrimitiveTypes), TypeTestCaseToString)</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>Primitive</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1TypeTest" kindref="compound">TypeTest</ref></type>
        </param>
        <param>
          <type>::testing::ValuesIn(kPrimitiveTypes)</type>
        </param>
        <param>
          <type>TypeTestCaseToString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/visit_type_test.cc" line="215" column="1" declfile="iceberg/test/visit_type_test.cc" declline="215" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="visit__type__test_8cc_1ab6e73f8c873cb53117142fef24c23d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::INSTANTIATE_TEST_SUITE_P</definition>
        <argsstring>(Nested, TypeTest, ::testing::ValuesIn(kNestedTypes), TypeTestCaseToString)</argsstring>
        <name>INSTANTIATE_TEST_SUITE_P</name>
        <qualifiedname>iceberg::INSTANTIATE_TEST_SUITE_P</qualifiedname>
        <param>
          <type>Nested</type>
        </param>
        <param>
          <type><ref refid="classiceberg_1_1TypeTest" kindref="compound">TypeTest</ref></type>
        </param>
        <param>
          <type>::testing::ValuesIn(kNestedTypes)</type>
        </param>
        <param>
          <type>TypeTestCaseToString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/visit_type_test.cc" line="218" column="1" declfile="iceberg/test/visit_type_test.cc" declline="218" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="visit__type__test_8cc_1a55166d8349426c9b2e3b45ec02e14bf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(TypeTest, VisitTypePrintToString)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TypeTest" kindref="compound">TypeTest</ref></type>
        </param>
        <param>
          <type>VisitTypePrintToString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/visit_type_test.cc" line="221" column="1" bodyfile="iceberg/test/visit_type_test.cc" bodystart="221" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="visit__type__test_8cc_1a00e901a840bb369cd5a95f872812fa51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iceberg::TEST_P</definition>
        <argsstring>(TypeTest, VisitTypeReturnNestedTypeId)</argsstring>
        <name>TEST_P</name>
        <qualifiedname>iceberg::TEST_P</qualifiedname>
        <param>
          <type><ref refid="classiceberg_1_1TypeTest" kindref="compound">TypeTest</ref></type>
        </param>
        <param>
          <type>VisitTypeReturnNestedTypeId</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/test/visit_type_test.cc" line="229" column="1" bodyfile="iceberg/test/visit_type_test.cc" bodystart="229" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="transform_8cc_1a01618a62c6221ea8682246168e74a8a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; <ref refid="classiceberg_1_1Transform" kindref="compound">Transform</ref> &gt; &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; std::shared_ptr&lt; Transform &gt; &gt; iceberg::TransformFromString</definition>
        <argsstring>(std::string_view transform_str)</argsstring>
        <name>TransformFromString</name>
        <qualifiedname>iceberg::TransformFromString</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>transform_str</declname>
        </param>
        <briefdescription>
<para>Converts a string representation of a transform into a <ref refid="classiceberg_1_1Transform" kindref="compound">Transform</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function parses the provided string to identify the corresponding transform type (e.g., &quot;identity&quot;, &quot;year&quot;, &quot;bucket[16]&quot;), and creates a shared pointer to the corresponding <ref refid="classiceberg_1_1Transform" kindref="compound">Transform</ref> object. It supports both simple transforms (like &quot;identity&quot;) and parameterized transforms (like &quot;bucket[16]&quot; or &quot;truncate[4]&quot;).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string representation of the transform type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Result containing either a shared pointer to the corresponding <ref refid="classiceberg_1_1Transform" kindref="compound">Transform</ref> instance or an <ref refid="structiceberg_1_1Error" kindref="compound">Error</ref> if the string does not match any valid transform type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/transform.cc" line="163" column="8" bodyfile="iceberg/transform.cc" bodystart="163" bodyend="189" declfile="iceberg/transform.h" declline="188" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="transform_8h_1a165e3b4437918cd461bfabe9fe5d3a91" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ICEBERG_EXPORT constexpr std::string_view</type>
        <definition>ICEBERG_EXPORT constexpr std::string_view iceberg::TransformTypeToString</definition>
        <argsstring>(TransformType type)</argsstring>
        <name>TransformTypeToString</name>
        <qualifiedname>iceberg::TransformTypeToString</qualifiedname>
        <param>
          <type><ref refid="transform_8h_1a78b299cfdfb0b9631ca6fc520bd1b131" kindref="member">TransformType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Get the relative transform name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/transform.h" line="61" column="43" bodyfile="iceberg/transform.h" bodystart="61" bodyend="83"/>
      </memberdef>
      <member refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kind="function"><name>decimal</name></member>
      <member refid="group__type-factories_1gab0c125df895ca2e1f90a05c9b0704cf5" kind="function"><name>fixed</name></member>
      <member refid="group__type-factories_1ga4d0b2254f39850e311ffed558e1bac7b" kind="function"><name>map</name></member>
      <member refid="group__type-factories_1ga63d320f2972eee8c041fd5c98ecc1070" kind="function"><name>list</name></member>
      <member refid="group__type-factories_1gabb4c15b4e4cef71d45d6af7bc2777469" kind="function"><name>struct_</name></member>
      <memberdef kind="function" id="type_8cc_1af23c8214e9b9ecf4ff2e47acf8a16aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string_view</type>
        <definition>ICEBERG_EXPORT std::string_view iceberg::ToString</definition>
        <argsstring>(TypeId id)</argsstring>
        <name>ToString</name>
        <qualifiedname>iceberg::ToString</qualifiedname>
        <param>
          <type><ref refid="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8" kindref="member">TypeId</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the lowercase string representation of a TypeId. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns the same lowercase string as used by <ref refid="classiceberg_1_1util_1_1Formattable_1a79618aca5b3bf63610d9c87ac5ae0386" kindref="member">Type::ToString()</ref> methods. For example: TypeId::kBoolean -&gt; &quot;boolean&quot;, TypeId::kInt -&gt; &quot;int&quot;, etc.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The TypeId to convert to string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string_view containing the lowercase type name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/type.cc" line="385" column="18" bodyfile="iceberg/type.cc" bodystart="385" bodyend="424" declfile="iceberg/type.h" declline="533" declcolumn="33"/>
      </memberdef>
      <member refid="group__type-factories_1gafb5f5aec1d1d6218809ee512e2f87e83" kind="function"><name>boolean</name></member>
      <member refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kind="function"><name>int32</name></member>
      <member refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kind="function"><name>int64</name></member>
      <member refid="group__type-factories_1gab54ddf6ad9419b772fbde66891733212" kind="function"><name>float32</name></member>
      <member refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kind="function"><name>float64</name></member>
      <member refid="group__type-factories_1ga377ecf647b08303fd9f87c31b1519dbf" kind="function"><name>date</name></member>
      <member refid="group__type-factories_1ga7048c118c821d9aba4c08f3f23262b0f" kind="function"><name>time</name></member>
      <member refid="group__type-factories_1ga98107734ef37f6f3b36b9fa3a6e30fe9" kind="function"><name>timestamp</name></member>
      <member refid="group__type-factories_1ga6533501016e29cf4e348da8a2a20635d" kind="function"><name>timestamp_tz</name></member>
      <member refid="group__type-factories_1ga33cd0c2e979eebcccc89cdbcd3f6af99" kind="function"><name>binary</name></member>
      <member refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kind="function"><name>string</name></member>
      <member refid="group__type-factories_1gafcf0f5e6522390678b91a9515b174bcf" kind="function"><name>uuid</name></member>
      <memberdef kind="function" id="conversions_8cc_1a2aa510442e5b3476b36507daae212e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>EndianConvertible</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt; uint8_t &gt; iceberg::WriteLittleEndian</definition>
        <argsstring>(T value)</argsstring>
        <name>WriteLittleEndian</name>
        <qualifiedname>iceberg::WriteLittleEndian</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write a value in little-endian format and return as vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/conversions.cc" line="35" column="13" bodyfile="iceberg/util/conversions.cc" bodystart="35" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="conversions_8cc_1a2277ee8bbc27f716dee6551420de7ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>EndianConvertible</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>Result&lt; T &gt;</type>
        <definition>Result&lt; T &gt; iceberg::ReadLittleEndian</definition>
        <argsstring>(std::span&lt; const uint8_t &gt; data)</argsstring>
        <name>ReadLittleEndian</name>
        <qualifiedname>iceberg::ReadLittleEndian</qualifiedname>
        <param>
          <type>std::span&lt; const uint8_t &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Read a value in little-endian format from the data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/conversions.cc" line="45" column="8" bodyfile="iceberg/util/conversions.cc" bodystart="45" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="conversions_8cc_1a1bf6e8382ed58903b0fc2b44e5e747b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>TypeId</type>
            <declname>type_id</declname>
            <defname>type_id</defname>
          </param>
        </templateparamlist>
        <type>Result&lt; std::vector&lt; uint8_t &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; uint8_t &gt; &gt; iceberg::ToBytesImpl</definition>
        <argsstring>(const Literal::Value &amp;value)</argsstring>
        <name>ToBytesImpl</name>
        <qualifiedname>iceberg::ToBytesImpl</qualifiedname>
        <param>
          <type>const Literal::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/conversions.cc" line="57" column="8" bodyfile="iceberg/util/conversions.cc" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="conversions_8cc_1a0cf989a563e8cbf6b3c0a620499b80da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>Result&lt; std::vector&lt; uint8_t &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; uint8_t &gt; &gt; iceberg::ToBytesImpl&lt; TypeId::kBoolean &gt;</definition>
        <argsstring>(const Literal::Value &amp;value)</argsstring>
        <name>ToBytesImpl&lt; TypeId::kBoolean &gt;</name>
        <qualifiedname>iceberg::ToBytesImpl&lt; TypeId::kBoolean &gt;</qualifiedname>
        <param>
          <type>const Literal::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/conversions.cc" line="57" column="8" bodyfile="iceberg/util/conversions.cc" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="conversions_8cc_1af38b6e45623a4c68ec51ce1225a57344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>Result&lt; std::vector&lt; uint8_t &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; uint8_t &gt; &gt; iceberg::ToBytesImpl&lt; TypeId::kDecimal &gt;</definition>
        <argsstring>(const Literal::Value &amp;value)</argsstring>
        <name>ToBytesImpl&lt; TypeId::kDecimal &gt;</name>
        <qualifiedname>iceberg::ToBytesImpl&lt; TypeId::kDecimal &gt;</qualifiedname>
        <param>
          <type>const Literal::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/conversions.cc" line="57" column="8" bodyfile="iceberg/util/conversions.cc" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="conversions_8cc_1aa8ba8500fdee01645d2a360f4b4d55d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>Result&lt; std::vector&lt; uint8_t &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; uint8_t &gt; &gt; iceberg::ToBytesImpl&lt; TypeId::kString &gt;</definition>
        <argsstring>(const Literal::Value &amp;value)</argsstring>
        <name>ToBytesImpl&lt; TypeId::kString &gt;</name>
        <qualifiedname>iceberg::ToBytesImpl&lt; TypeId::kString &gt;</qualifiedname>
        <param>
          <type>const Literal::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/conversions.cc" line="57" column="8" bodyfile="iceberg/util/conversions.cc" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="conversions_8cc_1a3d0f066ff9df07e146d5e092d6d7bd7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>Result&lt; std::vector&lt; uint8_t &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; uint8_t &gt; &gt; iceberg::ToBytesImpl&lt; TypeId::kUuid &gt;</definition>
        <argsstring>(const Literal::Value &amp;value)</argsstring>
        <name>ToBytesImpl&lt; TypeId::kUuid &gt;</name>
        <qualifiedname>iceberg::ToBytesImpl&lt; TypeId::kUuid &gt;</qualifiedname>
        <param>
          <type>const Literal::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/conversions.cc" line="57" column="8" bodyfile="iceberg/util/conversions.cc" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="conversions_8cc_1ab4299594317481d9934d5ef40943ddcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>Result&lt; std::vector&lt; uint8_t &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; uint8_t &gt; &gt; iceberg::ToBytesImpl&lt; TypeId::kBinary &gt;</definition>
        <argsstring>(const Literal::Value &amp;value)</argsstring>
        <name>ToBytesImpl&lt; TypeId::kBinary &gt;</name>
        <qualifiedname>iceberg::ToBytesImpl&lt; TypeId::kBinary &gt;</qualifiedname>
        <param>
          <type>const Literal::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/conversions.cc" line="57" column="8" bodyfile="iceberg/util/conversions.cc" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="conversions_8cc_1ae9e2a46608604e27cb2b71c92ac08438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>Result&lt; std::vector&lt; uint8_t &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; uint8_t &gt; &gt; iceberg::ToBytesImpl&lt; TypeId::kFixed &gt;</definition>
        <argsstring>(const Literal::Value &amp;value)</argsstring>
        <name>ToBytesImpl&lt; TypeId::kFixed &gt;</name>
        <qualifiedname>iceberg::ToBytesImpl&lt; TypeId::kFixed &gt;</qualifiedname>
        <param>
          <type>const Literal::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/conversions.cc" line="57" column="8" bodyfile="iceberg/util/conversions.cc" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="decimal_8cc_1a1674be38840f70c3581a7fcb5378ca73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>ICEBERG_EXPORT std::ostream &amp; iceberg::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Decimal &amp;decimal)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>iceberg::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>decimal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/decimal.cc" line="629" column="1" bodyfile="iceberg/util/decimal.cc" bodystart="629" bodyend="632" declfile="iceberg/util/decimal.h" declline="230" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="decimal_8cc_1ad05f36ca45b7a564705798f48786f684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref></type>
        <definition>Decimal iceberg::operator-</definition>
        <argsstring>(const Decimal &amp;operand)</argsstring>
        <name>operator-</name>
        <qualifiedname>iceberg::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/decimal.cc" line="635" column="9" bodyfile="iceberg/util/decimal.cc" bodystart="635" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="decimal_8cc_1a54ee170c0fbd6ce1e918cc5e6fb992c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref></type>
        <definition>Decimal iceberg::operator~</definition>
        <argsstring>(const Decimal &amp;operand)</argsstring>
        <name>operator~</name>
        <qualifiedname>iceberg::operator~</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/decimal.cc" line="640" column="9" bodyfile="iceberg/util/decimal.cc" bodystart="640" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="decimal_8cc_1a4a2bce3b5ae63583d982647e9da437b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref></type>
        <definition>Decimal iceberg::operator+</definition>
        <argsstring>(const Decimal &amp;lhs, const Decimal &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>iceberg::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/decimal.cc" line="643" column="9" bodyfile="iceberg/util/decimal.cc" bodystart="643" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="decimal_8cc_1a5f0758ecdaf66705d20398c7b3045e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref></type>
        <definition>Decimal iceberg::operator-</definition>
        <argsstring>(const Decimal &amp;lhs, const Decimal &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>iceberg::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/decimal.cc" line="649" column="9" bodyfile="iceberg/util/decimal.cc" bodystart="649" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="decimal_8cc_1a9b69ae1b182ea09760e3212a6c9ec107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref></type>
        <definition>Decimal iceberg::operator*</definition>
        <argsstring>(const Decimal &amp;lhs, const Decimal &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>iceberg::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/decimal.cc" line="655" column="9" bodyfile="iceberg/util/decimal.cc" bodystart="655" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="decimal_8cc_1a95bd54de7de6dfdde5319c6ff9374129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref></type>
        <definition>Decimal iceberg::operator/</definition>
        <argsstring>(const Decimal &amp;lhs, const Decimal &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>iceberg::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/decimal.cc" line="661" column="9" bodyfile="iceberg/util/decimal.cc" bodystart="661" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="decimal_8cc_1aea122582704f2d71a77ce53d535af634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref></type>
        <definition>Decimal iceberg::operator%</definition>
        <argsstring>(const Decimal &amp;lhs, const Decimal &amp;rhs)</argsstring>
        <name>operator%</name>
        <qualifiedname>iceberg::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classiceberg_1_1Decimal" kindref="compound">Decimal</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/decimal.cc" line="665" column="9" bodyfile="iceberg/util/decimal.cc" bodystart="665" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="endian_8h_1a75138160d348d482441451885e7903ed" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>EndianConvertible</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T iceberg::ByteSwap</definition>
        <argsstring>(T value)</argsstring>
        <name>ByteSwap</name>
        <qualifiedname>iceberg::ByteSwap</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Byte-swap a value. For floating-point types, only support 32-bit and 64-bit floats. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/endian.h" line="38" column="13" bodyfile="iceberg/util/endian.h" bodystart="38" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="endian_8h_1a213342dba249a0224ead295465dbbfd0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>EndianConvertible</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T iceberg::ToLittleEndian</definition>
        <argsstring>(T value)</argsstring>
        <name>ToLittleEndian</name>
        <qualifiedname>iceberg::ToLittleEndian</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert a value to little-endian format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/endian.h" line="58" column="13" bodyfile="iceberg/util/endian.h" bodystart="58" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="endian_8h_1a3c625e7e9cbdc285af7559f3f20098ff" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>EndianConvertible</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T iceberg::FromLittleEndian</definition>
        <argsstring>(T value)</argsstring>
        <name>FromLittleEndian</name>
        <qualifiedname>iceberg::FromLittleEndian</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert a value from little-endian format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/endian.h" line="68" column="13" bodyfile="iceberg/util/endian.h" bodystart="68" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="endian_8h_1aa051ea16b5c1c3d2c4b5c04db46ffa43" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>EndianConvertible</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T iceberg::ToBigEndian</definition>
        <argsstring>(T value)</argsstring>
        <name>ToBigEndian</name>
        <qualifiedname>iceberg::ToBigEndian</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert a value to big-endian format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/endian.h" line="78" column="13" bodyfile="iceberg/util/endian.h" bodystart="78" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="endian_8h_1ad32cff8f6ada2e4ab2e0701f0a043f28" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>EndianConvertible</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T iceberg::FromBigEndian</definition>
        <argsstring>(T value)</argsstring>
        <name>FromBigEndian</name>
        <qualifiedname>iceberg::FromBigEndian</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert a value from big-endian format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/endian.h" line="88" column="13" bodyfile="iceberg/util/endian.h" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1af9da7d5b61c59e8669b891e1ef21e2ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void iceberg::SetOptionalField</definition>
        <argsstring>(nlohmann::json &amp;json, std::string_view key, const std::optional&lt; T &gt; &amp;value)</argsstring>
        <name>SetOptionalField</name>
        <qualifiedname>iceberg::SetOptionalField</qualifiedname>
        <param>
          <type>nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::optional&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="35" column="6" bodyfile="iceberg/util/json_util_internal.h" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1af9f69f032af580ee1e9b0d39c7f7190d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iceberg::SafeDumpJson</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>SafeDumpJson</name>
        <qualifiedname>iceberg::SafeDumpJson</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="42" column="20" bodyfile="iceberg/util/json_util_internal.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1ae06dbc80d9a252a664de0581657b05ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Result&lt; T &gt;</type>
        <definition>Result&lt; T &gt; iceberg::GetJsonValueImpl</definition>
        <argsstring>(const nlohmann::json &amp;json, std::string_view key)</argsstring>
        <name>GetJsonValueImpl</name>
        <qualifiedname>iceberg::GetJsonValueImpl</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="48" column="8" bodyfile="iceberg/util/json_util_internal.h" bodystart="48" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1aca6dc62f7a05bf6840d8676b3f72dad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Result&lt; std::optional&lt; T &gt; &gt;</type>
        <definition>Result&lt; std::optional&lt; T &gt; &gt; iceberg::GetJsonValueOptional</definition>
        <argsstring>(const nlohmann::json &amp;json, std::string_view key)</argsstring>
        <name>GetJsonValueOptional</name>
        <qualifiedname>iceberg::GetJsonValueOptional</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="58" column="8" bodyfile="iceberg/util/json_util_internal.h" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1a7738777ca56543c63e4841d281da889b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Result&lt; T &gt;</type>
        <definition>Result&lt; T &gt; iceberg::GetJsonValue</definition>
        <argsstring>(const nlohmann::json &amp;json, std::string_view key)</argsstring>
        <name>GetJsonValue</name>
        <qualifiedname>iceberg::GetJsonValue</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="68" column="8" bodyfile="iceberg/util/json_util_internal.h" bodystart="68" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1a893403b7a66a11c7eba2010199d45d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Result&lt; T &gt;</type>
        <definition>Result&lt; T &gt; iceberg::GetJsonValueOrDefault</definition>
        <argsstring>(const nlohmann::json &amp;json, std::string_view key, T default_value=T{})</argsstring>
        <name>GetJsonValueOrDefault</name>
        <qualifiedname>iceberg::GetJsonValueOrDefault</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>key</declname>
        </param>
        <param>
          <type>T</type>
          <declname>default_value</declname>
          <defval>T{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="76" column="8" bodyfile="iceberg/util/json_util_internal.h" bodystart="76" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1a6d66b6e578120c0b7b68af47d88d5507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>nlohmann::json::array_t</type>
        <definition>nlohmann::json::array_t iceberg::ToJsonList</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;list)</argsstring>
        <name>ToJsonList</name>
        <qualifiedname>iceberg::ToJsonList</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Convert a list of items to a json array. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that ToJson(const T&amp;) is required for this function to work. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="88" column="25" bodyfile="iceberg/util/json_util_internal.h" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1af7ee6add14eb4fd8348cb5e7202dd3dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>nlohmann::json::array_t</type>
        <definition>nlohmann::json::array_t iceberg::ToJsonList</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; T &gt; &gt; &amp;list)</argsstring>
        <name>ToJsonList</name>
        <qualifiedname>iceberg::ToJsonList</qualifiedname>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Overload of the above function for a list of shared pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="98" column="25" bodyfile="iceberg/util/json_util_internal.h" bodystart="98" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1a3d23a30b4c82f5f7446f10d45b9602b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Result&lt; std::vector&lt; T &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; T &gt; &gt; iceberg::FromJsonList</definition>
        <argsstring>(const nlohmann::json &amp;json, std::string_view key, const std::function&lt; Result&lt; T &gt;(const nlohmann::json &amp;)&gt; &amp;from_json)</argsstring>
        <name>FromJsonList</name>
        <qualifiedname>iceberg::FromJsonList</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::function&lt; Result&lt; T &gt;(const nlohmann::json &amp;)&gt; &amp;</type>
          <declname>from_json</declname>
        </param>
        <briefdescription>
<para>Parse a list of items from a JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to parse. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to parse. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from_json</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to parse an item from a JSON object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The list of items. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="113" column="8" bodyfile="iceberg/util/json_util_internal.h" bodystart="113" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1a707033e113ea70c489eac856fb1e138a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Result&lt; std::vector&lt; std::shared_ptr&lt; T &gt; &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; std::shared_ptr&lt; T &gt; &gt; &gt; iceberg::FromJsonList</definition>
        <argsstring>(const nlohmann::json &amp;json, std::string_view key, const std::function&lt; Result&lt; std::shared_ptr&lt; T &gt; &gt;(const nlohmann::json &amp;)&gt; &amp;from_json)</argsstring>
        <name>FromJsonList</name>
        <qualifiedname>iceberg::FromJsonList</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::function&lt; Result&lt; std::shared_ptr&lt; T &gt; &gt;(const nlohmann::json &amp;)&gt; &amp;</type>
          <declname>from_json</declname>
        </param>
        <briefdescription>
<para>Parse a list of items from a JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to parse. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to parse. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from_json</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to parse an item from a JSON object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The list of items. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="138" column="8" bodyfile="iceberg/util/json_util_internal.h" bodystart="138" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1ad1d4ee030801ebcf03776330e88892f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>nlohmann::json::object_t</type>
        <definition>nlohmann::json::object_t iceberg::ToJsonMap</definition>
        <argsstring>(const std::unordered_map&lt; std::string, T &gt; &amp;map)</argsstring>
        <name>ToJsonMap</name>
        <qualifiedname>iceberg::ToJsonMap</qualifiedname>
        <param>
          <type>const std::unordered_map&lt; std::string, T &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Convert a map of type &lt;std::string, T&gt; to a json object. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that ToJson(const T&amp;) is required for this function to work. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="160" column="26" bodyfile="iceberg/util/json_util_internal.h" bodystart="160" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1a80325617fb5fc90c9fb498cdb9747527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>nlohmann::json::object_t</type>
        <definition>nlohmann::json::object_t iceberg::ToJsonMap</definition>
        <argsstring>(const std::unordered_map&lt; std::string, std::shared_ptr&lt; T &gt; &gt; &amp;map)</argsstring>
        <name>ToJsonMap</name>
        <qualifiedname>iceberg::ToJsonMap</qualifiedname>
        <param>
          <type>const std::unordered_map&lt; std::string, std::shared_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Overload of the above function for a map of type &lt;std::string, std::shared_ptr&lt;T&gt;&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="171" column="26" bodyfile="iceberg/util/json_util_internal.h" bodystart="171" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="json__util__internal_8h_1aea48855e71f270ff7827615a9fa732d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>std::string</defval>
          </param>
        </templateparamlist>
        <type>Result&lt; std::unordered_map&lt; std::string, T &gt; &gt;</type>
        <definition>Result&lt; std::unordered_map&lt; std::string, T &gt; &gt; iceberg::FromJsonMap</definition>
        <argsstring>(const nlohmann::json &amp;json, std::string_view key, const std::function&lt; Result&lt; T &gt;(const nlohmann::json &amp;)&gt; &amp;from_json=[](const nlohmann::json &amp;json) -&gt; Result&lt; T &gt; { static_assert(std::is_same_v&lt; T, std::string &gt;, &quot;T must be std::string&quot;);try { return json.get&lt; std::string &gt;();} catch(const std::exception &amp;ex) { return JsonParseError(&quot;Cannot parse {} to a string value: {}&quot;, SafeDumpJson(json), ex.what());} })</argsstring>
        <name>FromJsonMap</name>
        <qualifiedname>iceberg::FromJsonMap</qualifiedname>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::function&lt; Result&lt; T &gt;(const nlohmann::json &amp;)&gt; &amp;</type>
          <declname>from_json</declname>
          <defval>[](const nlohmann::json &amp;json) -&gt; Result&lt; T &gt; { static_assert(std::is_same_v&lt; T, std::string &gt;, &quot;T must be std::string&quot;);try { return json.get&lt; std::string &gt;();} catch(const std::exception &amp;ex) { return JsonParseError(&quot;Cannot parse {} to a <ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">string</ref> value: {}&quot;, SafeDumpJson(json), ex.what());} }</defval>
        </param>
        <briefdescription>
<para>Parse a map of type &lt;std::string, T&gt; from a JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to parse. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to parse. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from_json</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to parse an item from a JSON object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The map of items. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/json_util_internal.h" line="187" column="8" bodyfile="iceberg/util/json_util_internal.h" bodystart="187" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="murmurhash3__internal_8cc_1a3fdbb25d1f18c354775d3c7e53133415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iceberg::MurmurHash3_x86_32</definition>
        <argsstring>(const void *key, int len, uint32_t seed, void *out)</argsstring>
        <name>MurmurHash3_x86_32</name>
        <qualifiedname>iceberg::MurmurHash3_x86_32</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/murmurhash3_internal.cc" line="87" column="6" bodyfile="iceberg/util/murmurhash3_internal.cc" bodystart="87" bodyend="143" declfile="iceberg/util/murmurhash3_internal.h" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="murmurhash3__internal_8cc_1a2090d7d351bd0ae3dfb75fbe0076dc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iceberg::MurmurHash3_x86_128</definition>
        <argsstring>(const void *key, const int len, uint32_t seed, void *out)</argsstring>
        <name>MurmurHash3_x86_128</name>
        <qualifiedname>iceberg::MurmurHash3_x86_128</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/murmurhash3_internal.cc" line="147" column="6" bodyfile="iceberg/util/murmurhash3_internal.cc" bodystart="147" bodyend="316" declfile="iceberg/util/murmurhash3_internal.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="murmurhash3__internal_8cc_1a9dfc5c8b2bcaf666dd5edc0155a17860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iceberg::MurmurHash3_x64_128</definition>
        <argsstring>(const void *key, const int len, const uint32_t seed, void *out)</argsstring>
        <name>MurmurHash3_x64_128</name>
        <qualifiedname>iceberg::MurmurHash3_x64_128</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/murmurhash3_internal.cc" line="320" column="6" bodyfile="iceberg/util/murmurhash3_internal.cc" bodystart="320" bodyend="439" declfile="iceberg/util/murmurhash3_internal.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="timepoint_8cc_1af0f835fbb1b937cad0ed38893f01a1bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; TimePointMs &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; TimePointMs &gt; iceberg::TimePointMsFromUnixMs</definition>
        <argsstring>(int64_t unix_ms)</argsstring>
        <name>TimePointMsFromUnixMs</name>
        <qualifiedname>iceberg::TimePointMsFromUnixMs</qualifiedname>
        <param>
          <type>int64_t</type>
          <declname>unix_ms</declname>
        </param>
        <briefdescription>
<para>Returns a TimePointMs from a Unix timestamp in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/timepoint.cc" line="26" column="8" bodyfile="iceberg/util/timepoint.cc" bodystart="26" bodyend="28" declfile="iceberg/util/timepoint.h" declline="38" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="timepoint_8cc_1af96a6855fffc190eef3e1baa56e5a3ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>ICEBERG_EXPORT int64_t iceberg::UnixMsFromTimePointMs</definition>
        <argsstring>(const TimePointMs &amp;time_point_ms)</argsstring>
        <name>UnixMsFromTimePointMs</name>
        <qualifiedname>iceberg::UnixMsFromTimePointMs</qualifiedname>
        <param>
          <type>const TimePointMs &amp;</type>
          <declname>time_point_ms</declname>
        </param>
        <briefdescription>
<para>Returns a Unix timestamp in milliseconds from a TimePointMs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/timepoint.cc" line="30" column="9" bodyfile="iceberg/util/timepoint.cc" bodystart="30" bodyend="34" declfile="iceberg/util/timepoint.h" declline="41" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="timepoint_8cc_1af5bf61f0dccf48a57da4eb18596ae380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; TimePointNs &gt;</type>
        <definition>ICEBERG_EXPORT Result&lt; TimePointNs &gt; iceberg::TimePointNsFromUnixNs</definition>
        <argsstring>(int64_t unix_ns)</argsstring>
        <name>TimePointNsFromUnixNs</name>
        <qualifiedname>iceberg::TimePointNsFromUnixNs</qualifiedname>
        <param>
          <type>int64_t</type>
          <declname>unix_ns</declname>
        </param>
        <briefdescription>
<para>Returns a TimePointNs from a Unix timestamp in nanoseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/timepoint.cc" line="36" column="8" bodyfile="iceberg/util/timepoint.cc" bodystart="36" bodyend="38" declfile="iceberg/util/timepoint.h" declline="44" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="timepoint_8cc_1aa029328e762f5fb4dbf2fd466423cb71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>ICEBERG_EXPORT int64_t iceberg::UnixNsFromTimePointNs</definition>
        <argsstring>(const TimePointNs &amp;time_point_ns)</argsstring>
        <name>UnixNsFromTimePointNs</name>
        <qualifiedname>iceberg::UnixNsFromTimePointNs</qualifiedname>
        <param>
          <type>const TimePointNs &amp;</type>
          <declname>time_point_ns</declname>
        </param>
        <briefdescription>
<para>Returns a Unix timestamp in nanoseconds from a TimePointNs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/timepoint.cc" line="40" column="9" bodyfile="iceberg/util/timepoint.cc" bodystart="40" bodyend="44" declfile="iceberg/util/timepoint.h" declline="47" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="visit__type_8h_1af926735520e18d69b831a79c78feff4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VISITOR</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type>Status</type>
        <definition>Status iceberg::VisitTypeInline</definition>
        <argsstring>(const Type &amp;type, VISITOR *visitor, ARGS &amp;&amp;... args)</argsstring>
        <name>VisitTypeInline</name>
        <qualifiedname>iceberg::VisitTypeInline</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Type" kindref="compound">Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>VISITOR *</type>
          <declname>visitor</declname>
        </param>
        <param>
          <type>ARGS &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Calls <computeroutput>visitor</computeroutput> with the corresponding concrete type class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VISITOR</parametername>
</parameternamelist>
<parameterdescription>
<para>Visitor type that implements Visit() for all Iceberg types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ARGS</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments, if any, will be passed to the Visit function after the <computeroutput>type</computeroutput> argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status</para>
</simplesect>
A visitor is a type that implements specialized logic for each Iceberg type. Example usage:</para>
<para><programlisting><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExampleVisitor<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Status<sp/>Visit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classiceberg_1_1IntType" kindref="compound">IntType</ref>&amp;<sp/>type)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Status<sp/>Visit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LongType&amp;<sp/>type)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">ExampleVisitor<sp/>visitor;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="visit__type_8h_1af926735520e18d69b831a79c78feff4c" kindref="member">VisitTypeInline</ref>(some_type,<sp/>&amp;visitor);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/visit_type.h" line="63" column="15" bodyfile="iceberg/util/visit_type.h" bodystart="63" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="visit__type_8h_1abd0e667fd43a5fbc4dc885434983e046" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VISITOR</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto iceberg::VisitType</definition>
        <argsstring>(const Type &amp;type, VISITOR &amp;&amp;visitor, ARGS &amp;&amp;... args) -&gt; decltype(std::forward&lt; VISITOR &gt;(visitor)(type, args...))</argsstring>
        <name>VisitType</name>
        <qualifiedname>iceberg::VisitType</qualifiedname>
        <param>
          <type>const <ref refid="classiceberg_1_1Type" kindref="compound">Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>VISITOR &amp;&amp;</type>
          <declname>visitor</declname>
        </param>
        <param>
          <type>ARGS &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Call <computeroutput>visitor</computeroutput> with the corresponding concrete type class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ARGS</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments, if any, will be passed to the Visit function after the <computeroutput>type</computeroutput> argument</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Unlike VisitTypeInline which calls <computeroutput>visitor.Visit</computeroutput>, here <computeroutput>visitor</computeroutput> itself is called. <computeroutput>visitor</computeroutput> must support a <computeroutput>const <ref refid="classiceberg_1_1Type" kindref="compound">Type</ref>&amp;</computeroutput> argument as a fallback, in addition to concrete type classes.</para>
<para>The intent is for this to be called on a generic lambda that may internally use <computeroutput>if constexpr</computeroutput> or similar constructs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/visit_type.h" line="92" column="13" bodyfile="iceberg/util/visit_type.h" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="visit__type_8h_1a89aae7356121f7c454fbb9f6b3364915" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VISITOR</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type>Status</type>
        <definition>Status iceberg::VisitTypeIdInline</definition>
        <argsstring>(TypeId id, VISITOR *visitor, ARGS &amp;&amp;... args)</argsstring>
        <name>VisitTypeIdInline</name>
        <qualifiedname>iceberg::VisitTypeIdInline</qualifiedname>
        <param>
          <type><ref refid="type__fwd_8h_1afd7801064886b233ca23eadf5ba2c1b8" kindref="member">TypeId</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>VISITOR *</type>
          <declname>visitor</declname>
        </param>
        <param>
          <type>ARGS &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Calls <computeroutput>visitor</computeroutput> with a nullptr of the corresponding concrete type class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VISITOR</parametername>
</parameternamelist>
<parameterdescription>
<para>Visitor type that implements Visit() for all Iceberg types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ARGS</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments, if any, will be passed to the Visit function after the <computeroutput>type</computeroutput> argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iceberg/util/visit_type.h" line="116" column="15" bodyfile="iceberg/util/visit_type.h" bodystart="116" bodyend="123"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="iceberg/arrow/arrow_file_io.h" line="27" column="1"/>
  </compounddef>
</doxygen>
