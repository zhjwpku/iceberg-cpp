<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="avro__schema__test_8cc" kind="file" language="C++">
    <compoundname>avro_schema_test.cc</compoundname>
    <includes local="no">string</includes>
    <includes local="no">avro/Compiler.hh</includes>
    <includes local="no">avro/NodeImpl.hh</includes>
    <includes local="no">avro/Types.hh</includes>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="avro__schema__util__internal_8h" local="yes">iceberg/avro/avro_schema_util_internal.h</includes>
    <includes refid="metadata__columns_8h" local="yes">iceberg/metadata_columns.h</includes>
    <includes refid="name__mapping_8h" local="yes">iceberg/name_mapping.h</includes>
    <includes refid="schema_8h" local="yes">iceberg/schema.h</includes>
    <includes refid="matchers_8h" local="yes">iceberg/test/matchers.h</includes>
    <incdepgraph>
      <node id="7">
        <label>iceberg/avro/avro_schema_util_internal.h</label>
        <link refid="avro__schema__util__internal_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>iceberg/expression/literal.h</label>
        <link refid="literal_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>iceberg/iceberg_export.h</label>
        <link refid="iceberg__export_8h_source"/>
      </node>
      <node id="47">
        <label>iceberg/metadata_columns.h</label>
        <link refid="metadata__columns_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>iceberg/name_mapping.h</label>
        <link refid="name__mapping_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>iceberg/result.h</label>
        <link refid="result_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>iceberg/schema.h</label>
        <link refid="schema_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>iceberg/schema_field.h</label>
        <link refid="schema__field_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>iceberg/schema_util.h</label>
        <link refid="schema__util_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>iceberg/test/avro_schema_test.cc</label>
        <link refid="avro__schema__test_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>iceberg/test/matchers.h</label>
        <link refid="matchers_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>iceberg/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>iceberg/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
      </node>
      <node id="42">
        <label>iceberg/util/decimal.h</label>
        <link refid="decimal_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>iceberg/util/formattable.h</label>
        <link refid="formattable_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>iceberg/util/int128.h</label>
        <link refid="int128_8h"/>
      </node>
      <node id="30">
        <label>iceberg/util/lazy.h</label>
        <link refid="lazy_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>iceberg/util/macros.h</label>
        <link refid="macros_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>iceberg/util/string_util.h</label>
        <link refid="string__util_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>iceberg/util/uuid.h</label>
        <link refid="uuid_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>algorithm</label>
      </node>
      <node id="29">
        <label>array</label>
      </node>
      <node id="3">
        <label>avro/Compiler.hh</label>
      </node>
      <node id="9">
        <label>avro/Node.hh</label>
      </node>
      <node id="4">
        <label>avro/NodeImpl.hh</label>
      </node>
      <node id="5">
        <label>avro/Types.hh</label>
      </node>
      <node id="34">
        <label>cassert</label>
      </node>
      <node id="41">
        <label>compare</label>
      </node>
      <node id="31">
        <label>concepts</label>
      </node>
      <node id="23">
        <label>cstdint</label>
      </node>
      <node id="20">
        <label>expected</label>
      </node>
      <node id="21">
        <label>format</label>
      </node>
      <node id="11">
        <label>functional</label>
      </node>
      <node id="51">
        <label>gmock/gmock.h</label>
      </node>
      <node id="6">
        <label>gtest/gtest.h</label>
      </node>
      <node id="43">
        <label>iosfwd</label>
      </node>
      <node id="48">
        <label>limits</label>
      </node>
      <node id="12">
        <label>memory</label>
      </node>
      <node id="32">
        <label>mutex</label>
      </node>
      <node id="13">
        <label>optional</label>
      </node>
      <node id="37">
        <label>ranges</label>
      </node>
      <node id="49">
        <label>set</label>
      </node>
      <node id="14">
        <label>span</label>
      </node>
      <node id="8">
        <label>stack</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="25">
        <label>string_view</label>
      </node>
      <node id="44">
        <label>type_traits</label>
      </node>
      <node id="15">
        <label>unordered_map</label>
      </node>
      <node id="16">
        <label>unordered_set</label>
      </node>
      <node id="39">
        <label>variant</label>
      </node>
      <node id="17">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classiceberg_1_1avro_1_1NameMappingAvroSchemaTest" prot="public">iceberg::avro::NameMappingAvroSchemaTest</innerclass>
    <innernamespace refid="namespaceiceberg">iceberg</innernamespace>
    <innernamespace refid="namespaceiceberg_1_1avro">iceberg::avro</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;avro/Compiler.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;avro/NodeImpl.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;avro/Types.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/avro/avro_schema_util_internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="metadata__columns_8h" kindref="compound">iceberg/metadata_columns.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/name_mapping.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="schema_8h" kindref="compound">iceberg/schema.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iceberg/test/matchers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">iceberg::avro<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckCustomLogicalType(const<sp/>::avro::NodePtr&amp;<sp/>node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>type_name)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;logicalType().type(),<sp/>::avro::LogicalType::CUSTOM);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(node-&gt;logicalType().customLogicalType()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;logicalType().customLogicalType()-&gt;name(),<sp/>type_name);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckFieldIdAt(const<sp/>::avro::NodePtr&amp;<sp/>node,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>int32_t<sp/>field_id,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;field-id&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>ASSERT_LT(index,<sp/>node-&gt;customAttributes());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>attrs<sp/>=<sp/>node-&gt;customAttributesAt(index);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>ASSERT_EQ(attrs.getAttribute(key),<sp/>std::make_optional(std::to_string(field_id)));</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>check<sp/>if<sp/>a<sp/>custom<sp/>attribute<sp/>exists<sp/>for<sp/>a<sp/>field<sp/>name<sp/>preservation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckIcebergFieldName(const<sp/>::avro::NodePtr&amp;<sp/>node,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>original_name)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>ASSERT_LT(index,<sp/>node-&gt;customAttributes());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>attrs<sp/>=<sp/>node-&gt;customAttributesAt(index);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>ASSERT_EQ(attrs.getAttribute(</highlight><highlight class="stringliteral">&quot;iceberg-field-name&quot;</highlight><highlight class="normal">),<sp/>std::make_optional(original_name));</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">TEST(ValidAvroNameTest,<sp/>ValidNames)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Valid<sp/>field<sp/>names<sp/>should<sp/>return<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;valid_field&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;field123&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;_private&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;CamelCase&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;field_with_underscores&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">TEST(ValidAvroNameTest,<sp/>InvalidNames)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Names<sp/>starting<sp/>with<sp/>numbers<sp/>should<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;123field&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;0value&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Names<sp/>with<sp/>special<sp/>characters<sp/>should<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;field-name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;field.name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;field<sp/>name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;field@name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;field#name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">TEST(ValidAvroNameTest,<sp/>EmptyName)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>name<sp/>should<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ValidAvroName(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">TEST(SanitizeFieldNameTest,<sp/>ValidFieldNames)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Valid<sp/>field<sp/>names<sp/>should<sp/>remain<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;valid_field&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;valid_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;field123&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;field123&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;_private&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;_private&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;CamelCase&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;CamelCase&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;field_with_underscores&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;field_with_underscores&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">TEST(SanitizeFieldNameTest,<sp/>InvalidFieldNames)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Field<sp/>names<sp/>starting<sp/>with<sp/>numbers<sp/>should<sp/>be<sp/>prefixed<sp/>with<sp/>underscore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;123field&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;_123field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;0value&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;_0value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Field<sp/>names<sp/>with<sp/>special<sp/>characters<sp/>should<sp/>be<sp/>encoded<sp/>with<sp/>hex<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;field-name&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;field_x2Dname&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;field.name&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;field_x2Ename&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;field<sp/>name&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;field_x20name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;field@name&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;field_x40name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;field#name&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;field_x23name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Complex<sp/>field<sp/>names<sp/>with<sp/>multiple<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;1field-with.special@chars&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;_1field_x2Dwith_x2Especial_x40chars&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;user-email&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;user_x2Demail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">TEST(SanitizeFieldNameTest,<sp/>EdgeCases)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>field<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Field<sp/>name<sp/>with<sp/>only<sp/>special<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;@#$&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;_x40_x23_x24&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Field<sp/>name<sp/>starting<sp/>with<sp/>special<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;-field&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;_x2Dfield&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>EXPECT_EQ(SanitizeFieldName(</highlight><highlight class="stringliteral">&quot;.field&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;_x2Efield&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>BooleanType)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(BooleanType{},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_BOOL);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>IntType)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(IntType{},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_INT);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>LongType)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(LongType{},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_LONG);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>FloatType)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(FloatType{},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_FLOAT);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>DoubleType)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(DoubleType{},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_DOUBLE);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>DecimalType)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(DecimalType{10,<sp/>2},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_FIXED);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;logicalType().type(),<sp/>::avro::LogicalType::DECIMAL);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;logicalType().precision(),<sp/>10);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;logicalType().scale(),<sp/>2);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;name().simpleName(),<sp/></highlight><highlight class="stringliteral">&quot;decimal_10_2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>DateType)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(DateType{},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_INT);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;logicalType().type(),<sp/>::avro::LogicalType::DATE);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>TimeType)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(TimeType{},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_LONG);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;logicalType().type(),<sp/>::avro::LogicalType::TIME_MICROS);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>TimestampType)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(TimestampType{},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_LONG);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;logicalType().type(),<sp/>::avro::LogicalType::TIMESTAMP_MICROS);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;customAttributes(),<sp/>1);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;customAttributesAt(0).getAttribute(</highlight><highlight class="stringliteral">&quot;adjust-to-utc&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>TimestampTzType)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(TimestampTzType{},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_LONG);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;logicalType().type(),<sp/>::avro::LogicalType::TIMESTAMP_MICROS);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;customAttributes(),<sp/>1);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;customAttributesAt(0).getAttribute(</highlight><highlight class="stringliteral">&quot;adjust-to-utc&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>StringType)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(StringType{},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_STRING);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>UuidType)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(UuidType{},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_FIXED);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;logicalType().type(),<sp/>::avro::LogicalType::UUID);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;fixedSize(),<sp/>16);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;name().fullname(),<sp/></highlight><highlight class="stringliteral">&quot;uuid_fixed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>FixedType)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(FixedType{20},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_FIXED);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;fixedSize(),<sp/>20);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;name().fullname(),<sp/></highlight><highlight class="stringliteral">&quot;fixed_20&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>BinaryType)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(BinaryType{},<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_BYTES);</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>StructType)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>StructType<sp/>struct_type{{SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;bool_field&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafb5f5aec1d1d6218809ee512e2f87e83" kindref="member">iceberg::boolean</ref>(),</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2,<sp/></highlight><highlight class="stringliteral">&quot;int_field&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">}}};</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(struct_type,<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;names(),<sp/>2);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;nameAt(0),<sp/></highlight><highlight class="stringliteral">&quot;bool_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;nameAt(1),<sp/></highlight><highlight class="stringliteral">&quot;int_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;customAttributes(),<sp/>2);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;leafAt(0)-&gt;type(),<sp/>::avro::AVRO_BOOL);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;leafAt(1)-&gt;type(),<sp/>::avro::AVRO_UNION);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;leafAt(1)-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;leafAt(1)-&gt;leafAt(0)-&gt;type(),<sp/>::avro::AVRO_NULL);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;leafAt(1)-&gt;leafAt(1)-&gt;type(),<sp/>::avro::AVRO_INT);</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>StructTypeWithFieldNames)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>StructType<sp/>struct_type{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;user-name&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2,<sp/></highlight><highlight class="stringliteral">&quot;valid_field&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">3,<sp/></highlight><highlight class="stringliteral">&quot;email.address&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">4,<sp/></highlight><highlight class="stringliteral">&quot;AnotherField&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">5,<sp/></highlight><highlight class="stringliteral">&quot;123field&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">6,<sp/></highlight><highlight class="stringliteral">&quot;field<sp/>with<sp/>spaces&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafb5f5aec1d1d6218809ee512e2f87e83" kindref="member">iceberg::boolean</ref>(),</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">}}};</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(struct_type,<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;names(),<sp/>6);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;nameAt(0),<sp/></highlight><highlight class="stringliteral">&quot;user_x2Dname&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;user-name&quot;<sp/>-&gt;<sp/>&quot;user_x2Dname&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;nameAt(2),</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;email_x2Eaddress&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;email.address&quot;<sp/>-&gt;<sp/>&quot;email_x2Eaddress&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;nameAt(4),<sp/></highlight><highlight class="stringliteral">&quot;_123field&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;123field&quot;<sp/>-&gt;<sp/>&quot;_123field&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;nameAt(5),</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;field_x20with_x20spaces&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;field<sp/>with<sp/>spaces&quot;<sp/>-&gt;<sp/>&quot;field_x20with_x20spaces&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;nameAt(1),<sp/></highlight><highlight class="stringliteral">&quot;valid_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;nameAt(3),<sp/></highlight><highlight class="stringliteral">&quot;AnotherField&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;customAttributes(),<sp/>6);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1));</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">2,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">3));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">3,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">4));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">4,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">5));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">5,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">6));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>attrs1<sp/>=<sp/>node-&gt;customAttributesAt(1);<sp/><sp/></highlight><highlight class="comment">//<sp/>valid_field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>attrs3<sp/>=<sp/>node-&gt;customAttributesAt(3);<sp/><sp/></highlight><highlight class="comment">//<sp/>AnotherField</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(attrs1.getAttribute(</highlight><highlight class="stringliteral">&quot;iceberg-field-name&quot;</highlight><highlight class="normal">).has_value());</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(attrs3.getAttribute(</highlight><highlight class="stringliteral">&quot;iceberg-field-name&quot;</highlight><highlight class="normal">).has_value());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckIcebergFieldName(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*original_name=*/</highlight><highlight class="stringliteral">&quot;user-name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckIcebergFieldName(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">2,<sp/></highlight><highlight class="comment">/*original_name=*/</highlight><highlight class="stringliteral">&quot;email.address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckIcebergFieldName(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">4,<sp/></highlight><highlight class="comment">/*original_name=*/</highlight><highlight class="stringliteral">&quot;123field&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CheckIcebergFieldName(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">5,<sp/></highlight><highlight class="comment">/*original_name=*/</highlight><highlight class="stringliteral">&quot;field<sp/>with<sp/>spaces&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>ListType)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>ListType<sp/>list_type{SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">5,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(list_type,<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_ARRAY);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;customAttributes(),<sp/>1);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">5,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*key=*/</highlight><highlight class="stringliteral">&quot;element-id&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;leaves(),<sp/>1);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;leafAt(0)-&gt;type(),<sp/>::avro::AVRO_UNION);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;leafAt(0)-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;leafAt(0)-&gt;leafAt(0)-&gt;type(),<sp/>::avro::AVRO_NULL);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;leafAt(0)-&gt;leafAt(1)-&gt;type(),<sp/>::avro::AVRO_STRING);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>MapTypeWithStringKey)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>MapType<sp/>map_type{SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">10,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">11,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(map_type,<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_MAP);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>ASSERT_GT(node-&gt;customAttributes(),<sp/>0);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">10,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*key=*/</highlight><highlight class="stringliteral">&quot;key-id&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">11,</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*key=*/</highlight><highlight class="stringliteral">&quot;value-id&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;leafAt(0)-&gt;type(),<sp/>::avro::AVRO_STRING);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;leafAt(1)-&gt;type(),<sp/>::avro::AVRO_INT);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>MapTypeWithNonStringKey)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>MapType<sp/>map_type{SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">10,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">11,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(map_type,<sp/>&amp;node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_ARRAY);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>CheckCustomLogicalType(node,<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;leaves(),<sp/>1);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>record_node<sp/>=<sp/>node-&gt;leafAt(0);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>ASSERT_EQ(record_node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>EXPECT_EQ(record_node-&gt;name().fullname(),<sp/></highlight><highlight class="stringliteral">&quot;k10_v11&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>ASSERT_EQ(record_node-&gt;customAttributes(),<sp/>2);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(record_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">10));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(record_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">11));</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>ASSERT_EQ(record_node-&gt;names(),<sp/>2);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>EXPECT_EQ(record_node-&gt;nameAt(0),<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>EXPECT_EQ(record_node-&gt;nameAt(1),<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>ASSERT_EQ(record_node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>EXPECT_EQ(record_node-&gt;leafAt(0)-&gt;type(),<sp/>::avro::AVRO_INT);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>EXPECT_EQ(record_node-&gt;leafAt(1)-&gt;type(),<sp/>::avro::AVRO_STRING);</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>InvalidMapKeyType)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>MapType<sp/>map_type{SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>node;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>ToAvroNodeVisitor{}.Visit(map_type,<sp/>&amp;node);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>EXPECT_THAT(status,<sp/>IsError(ErrorKind::kInvalidArgument));</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>EXPECT_THAT(status,<sp/>HasErrorMessage(</highlight><highlight class="stringliteral">&quot;Map<sp/>key<sp/>`key`<sp/>must<sp/>be<sp/>required&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal">TEST(ToAvroNodeVisitorTest,<sp/>NestedTypes)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inner_struct<sp/>=<sp/>std::make_shared&lt;StructType&gt;(std::vector&lt;SchemaField&gt;{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2,<sp/></highlight><highlight class="stringliteral">&quot;string_field&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>(),</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">3,<sp/></highlight><highlight class="stringliteral">&quot;int_field&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>(),</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">}});</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inner_list<sp/>=<sp/>std::make_shared&lt;ListType&gt;(SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">5,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">iceberg::float64</ref>(),</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>StructType<sp/>root_struct{{SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;struct_field&quot;</highlight><highlight class="normal">,<sp/>inner_struct,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SchemaField{</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">4,<sp/></highlight><highlight class="stringliteral">&quot;list_field&quot;</highlight><highlight class="normal">,<sp/>inner_list,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*optional=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">}}};</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>::avro::NodePtr<sp/>root_node;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>EXPECT_THAT(ToAvroNodeVisitor{}.Visit(root_struct,<sp/>&amp;root_node),<sp/>IsOk());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>EXPECT_EQ(root_node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>ASSERT_EQ(root_node-&gt;names(),<sp/>2);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>EXPECT_EQ(root_node-&gt;nameAt(0),<sp/></highlight><highlight class="stringliteral">&quot;struct_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>EXPECT_EQ(root_node-&gt;nameAt(1),<sp/></highlight><highlight class="stringliteral">&quot;list_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>ASSERT_EQ(root_node-&gt;customAttributes(),<sp/>2);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(root_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(root_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">4));</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>struct<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>struct_node<sp/>=<sp/>root_node-&gt;leafAt(0);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>ASSERT_EQ(struct_node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>ASSERT_EQ(struct_node-&gt;names(),<sp/>2);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>EXPECT_EQ(struct_node-&gt;nameAt(0),<sp/></highlight><highlight class="stringliteral">&quot;string_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>EXPECT_EQ(struct_node-&gt;nameAt(1),<sp/></highlight><highlight class="stringliteral">&quot;int_field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>ASSERT_EQ(struct_node-&gt;customAttributes(),<sp/>2);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(struct_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2));</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(struct_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">3));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>ASSERT_EQ(struct_node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>EXPECT_EQ(struct_node-&gt;leafAt(0)-&gt;type(),<sp/>::avro::AVRO_STRING);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>EXPECT_EQ(struct_node-&gt;leafAt(1)-&gt;type(),<sp/>::avro::AVRO_UNION);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>ASSERT_EQ(struct_node-&gt;leafAt(1)-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>EXPECT_EQ(struct_node-&gt;leafAt(1)-&gt;leafAt(0)-&gt;type(),<sp/>::avro::AVRO_NULL);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>EXPECT_EQ(struct_node-&gt;leafAt(1)-&gt;leafAt(1)-&gt;type(),<sp/>::avro::AVRO_INT);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>list<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_union_node<sp/>=<sp/>root_node-&gt;leafAt(1);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>ASSERT_EQ(list_union_node-&gt;type(),<sp/>::avro::AVRO_UNION);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>ASSERT_EQ(list_union_node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>EXPECT_EQ(list_union_node-&gt;leafAt(0)-&gt;type(),<sp/>::avro::AVRO_NULL);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>EXPECT_EQ(list_union_node-&gt;leafAt(1)-&gt;type(),<sp/>::avro::AVRO_ARRAY);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_node<sp/>=<sp/>list_union_node-&gt;leafAt(1);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>ASSERT_EQ(list_node-&gt;type(),<sp/>::avro::AVRO_ARRAY);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>ASSERT_EQ(list_node-&gt;customAttributes(),<sp/>1);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(list_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">5,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*key=*/</highlight><highlight class="stringliteral">&quot;element-id&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>ASSERT_EQ(list_node-&gt;leaves(),<sp/>1);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>EXPECT_EQ(list_node-&gt;leafAt(0)-&gt;type(),<sp/>::avro::AVRO_DOUBLE);</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">TEST(HasIdVisitorTest,<sp/>HasNoIds)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>HasIdVisitor<sp/>visitor;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>EXPECT_THAT(visitor.Visit(::avro::compileJsonSchemaFromString(</highlight><highlight class="stringliteral">&quot;\&quot;string\&quot;&quot;</highlight><highlight class="normal">)),<sp/>IsOk());</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(visitor.HasNoIds());</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(visitor.AllHaveIds());</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">TEST(HasIdVisitorTest,<sp/>RecordWithFieldIds)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="464"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="465"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;test_record&quot;,</highlight></codeline>
<codeline lineno="466"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="467"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;int_field&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;,<sp/>&quot;field-id&quot;:<sp/>1},</highlight></codeline>
<codeline lineno="468"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;string_field&quot;,<sp/>&quot;type&quot;:<sp/>&quot;string&quot;,<sp/>&quot;field-id&quot;:<sp/>2}</highlight></codeline>
<codeline lineno="469"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="470"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="471"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="472"><highlight class="stringliteral"><sp/><sp/>HasIdVisitor<sp/>visitor;</highlight></codeline>
<codeline lineno="473"><highlight class="stringliteral"><sp/><sp/>EXPECT_THAT(visitor.Visit(::avro::compileJsonSchemaFromString(schema_json)),<sp/>IsOk());</highlight></codeline>
<codeline lineno="474"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.HasNoIds());</highlight></codeline>
<codeline lineno="475"><highlight class="stringliteral"><sp/><sp/>EXPECT_TRUE(visitor.AllHaveIds());</highlight></codeline>
<codeline lineno="476"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="477"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="478"><highlight class="stringliteral">TEST(HasIdVisitorTest,<sp/>RecordWithMissingFieldIds)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="480"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="481"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;test_record&quot;,</highlight></codeline>
<codeline lineno="482"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="483"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;int_field&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;,<sp/>&quot;field-id&quot;:<sp/>1},</highlight></codeline>
<codeline lineno="484"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;string_field&quot;,<sp/>&quot;type&quot;:<sp/>&quot;string&quot;}</highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="486"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="487"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="488"><highlight class="stringliteral"><sp/><sp/>HasIdVisitor<sp/>visitor;</highlight></codeline>
<codeline lineno="489"><highlight class="stringliteral"><sp/><sp/>EXPECT_THAT(visitor.Visit(::avro::compileJsonSchemaFromString(schema_json)),<sp/>IsOk());</highlight></codeline>
<codeline lineno="490"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.HasNoIds());</highlight></codeline>
<codeline lineno="491"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.AllHaveIds());</highlight></codeline>
<codeline lineno="492"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="493"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="494"><highlight class="stringliteral">TEST(HasIdVisitorTest,<sp/>ArrayWithElementId)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="496"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline lineno="497"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>&quot;int&quot;,</highlight></codeline>
<codeline lineno="498"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;element-id&quot;:<sp/>5</highlight></codeline>
<codeline lineno="499"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="500"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="501"><highlight class="stringliteral"><sp/><sp/>HasIdVisitor<sp/>visitor;</highlight></codeline>
<codeline lineno="502"><highlight class="stringliteral"><sp/><sp/>EXPECT_THAT(visitor.Visit(::avro::compileJsonSchemaFromString(schema_json)),<sp/>IsOk());</highlight></codeline>
<codeline lineno="503"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.HasNoIds());</highlight></codeline>
<codeline lineno="504"><highlight class="stringliteral"><sp/><sp/>EXPECT_TRUE(visitor.AllHaveIds());</highlight></codeline>
<codeline lineno="505"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="506"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="507"><highlight class="stringliteral">TEST(HasIdVisitorTest,<sp/>ArrayWithoutElementId)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="509"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline lineno="510"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>&quot;int&quot;</highlight></codeline>
<codeline lineno="511"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="512"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="513"><highlight class="stringliteral"><sp/><sp/>HasIdVisitor<sp/>visitor;</highlight></codeline>
<codeline lineno="514"><highlight class="stringliteral"><sp/><sp/>EXPECT_THAT(visitor.Visit(::avro::compileJsonSchemaFromString(schema_json)),<sp/>IsOk());</highlight></codeline>
<codeline lineno="515"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.HasNoIds());</highlight></codeline>
<codeline lineno="516"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.AllHaveIds());</highlight></codeline>
<codeline lineno="517"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="518"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="519"><highlight class="stringliteral">TEST(HasIdVisitorTest,<sp/>MapWithIds)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="521"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;map&quot;,</highlight></codeline>
<codeline lineno="522"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;values&quot;:<sp/>&quot;int&quot;,</highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;key-id&quot;:<sp/>10,</highlight></codeline>
<codeline lineno="524"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;value-id&quot;:<sp/>11</highlight></codeline>
<codeline lineno="525"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="526"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="527"><highlight class="stringliteral"><sp/><sp/>HasIdVisitor<sp/>visitor;</highlight></codeline>
<codeline lineno="528"><highlight class="stringliteral"><sp/><sp/>EXPECT_THAT(visitor.Visit(::avro::compileJsonSchemaFromString(schema_json)),<sp/>IsOk());</highlight></codeline>
<codeline lineno="529"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.HasNoIds());</highlight></codeline>
<codeline lineno="530"><highlight class="stringliteral"><sp/><sp/>EXPECT_TRUE(visitor.AllHaveIds());</highlight></codeline>
<codeline lineno="531"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="532"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="533"><highlight class="stringliteral">TEST(HasIdVisitorTest,<sp/>MapWithPartialIds)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="535"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;map&quot;,</highlight></codeline>
<codeline lineno="536"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;values&quot;:<sp/>&quot;int&quot;,</highlight></codeline>
<codeline lineno="537"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;key-id&quot;:<sp/>10</highlight></codeline>
<codeline lineno="538"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="539"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="540"><highlight class="stringliteral"><sp/><sp/>HasIdVisitor<sp/>visitor;</highlight></codeline>
<codeline lineno="541"><highlight class="stringliteral"><sp/><sp/>EXPECT_THAT(visitor.Visit(::avro::compileJsonSchemaFromString(schema_json)),<sp/>IsOk());</highlight></codeline>
<codeline lineno="542"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.HasNoIds());</highlight></codeline>
<codeline lineno="543"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.AllHaveIds());</highlight></codeline>
<codeline lineno="544"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="545"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="546"><highlight class="stringliteral">TEST(HasIdVisitorTest,<sp/>UnionType)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;([</highlight></codeline>
<codeline lineno="548"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;null&quot;,</highlight></codeline>
<codeline lineno="549"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="551"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;record_in_union&quot;,</highlight></codeline>
<codeline lineno="552"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="553"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;int_field&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;,<sp/>&quot;field-id&quot;:<sp/>1}</highlight></codeline>
<codeline lineno="554"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="555"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="stringliteral"><sp/><sp/>])&quot;;</highlight></codeline>
<codeline lineno="557"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="558"><highlight class="stringliteral"><sp/><sp/>HasIdVisitor<sp/>visitor;</highlight></codeline>
<codeline lineno="559"><highlight class="stringliteral"><sp/><sp/>EXPECT_THAT(visitor.Visit(::avro::compileJsonSchemaFromString(schema_json)),<sp/>IsOk());</highlight></codeline>
<codeline lineno="560"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.HasNoIds());</highlight></codeline>
<codeline lineno="561"><highlight class="stringliteral"><sp/><sp/>EXPECT_TRUE(visitor.AllHaveIds());</highlight></codeline>
<codeline lineno="562"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="563"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="564"><highlight class="stringliteral">TEST(HasIdVisitorTest,<sp/>ComplexNestedSchema)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="566"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="567"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;root&quot;,</highlight></codeline>
<codeline lineno="568"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="569"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;string_field&quot;,</highlight></codeline>
<codeline lineno="571"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;string&quot;,</highlight></codeline>
<codeline lineno="572"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;field-id&quot;:<sp/>1</highlight></codeline>
<codeline lineno="573"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="574"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;record_field&quot;,</highlight></codeline>
<codeline lineno="576"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="578"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;nested&quot;,</highlight></codeline>
<codeline lineno="579"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="580"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;int_field&quot;,</highlight></codeline>
<codeline lineno="582"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;int&quot;,</highlight></codeline>
<codeline lineno="583"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;field-id&quot;:<sp/>3</highlight></codeline>
<codeline lineno="584"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="586"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="587"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;field-id&quot;:<sp/>2</highlight></codeline>
<codeline lineno="588"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="589"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;array_field&quot;,</highlight></codeline>
<codeline lineno="591"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline lineno="593"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>&quot;double&quot;,</highlight></codeline>
<codeline lineno="594"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;element-id&quot;:<sp/>5</highlight></codeline>
<codeline lineno="595"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="596"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;field-id&quot;:<sp/>4</highlight></codeline>
<codeline lineno="597"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="599"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="600"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="601"><highlight class="stringliteral"><sp/><sp/>HasIdVisitor<sp/>visitor;</highlight></codeline>
<codeline lineno="602"><highlight class="stringliteral"><sp/><sp/>EXPECT_THAT(visitor.Visit(::avro::compileJsonSchemaFromString(schema_json)),<sp/>IsOk());</highlight></codeline>
<codeline lineno="603"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.HasNoIds());</highlight></codeline>
<codeline lineno="604"><highlight class="stringliteral"><sp/><sp/>EXPECT_TRUE(visitor.AllHaveIds());</highlight></codeline>
<codeline lineno="605"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="606"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="607"><highlight class="stringliteral">TEST(HasIdVisitorTest,<sp/>ArrayBackedMapWithIds)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="609"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline lineno="610"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="612"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;key_value&quot;,</highlight></codeline>
<codeline lineno="613"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="614"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;key&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;,<sp/>&quot;field-id&quot;:<sp/>10},</highlight></codeline>
<codeline lineno="615"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;value&quot;,<sp/>&quot;type&quot;:<sp/>&quot;string&quot;,<sp/>&quot;field-id&quot;:<sp/>11}</highlight></codeline>
<codeline lineno="616"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="617"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="618"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;logicalType&quot;:<sp/>&quot;map&quot;</highlight></codeline>
<codeline lineno="619"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="620"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="621"><highlight class="stringliteral"><sp/><sp/>HasIdVisitor<sp/>visitor;</highlight></codeline>
<codeline lineno="622"><highlight class="stringliteral"><sp/><sp/>EXPECT_THAT(visitor.Visit(::avro::compileJsonSchemaFromString(schema_json)),<sp/>IsOk());</highlight></codeline>
<codeline lineno="623"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.HasNoIds());</highlight></codeline>
<codeline lineno="624"><highlight class="stringliteral"><sp/><sp/>EXPECT_TRUE(visitor.AllHaveIds());</highlight></codeline>
<codeline lineno="625"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="626"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="627"><highlight class="stringliteral">TEST(HasIdVisitorTest,<sp/>ArrayBackedMapWithPartialIds)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="629"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline lineno="630"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="632"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;key_value&quot;,</highlight></codeline>
<codeline lineno="633"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="634"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;key&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;,<sp/>&quot;field-id&quot;:<sp/>10},</highlight></codeline>
<codeline lineno="635"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;value&quot;,<sp/>&quot;type&quot;:<sp/>&quot;string&quot;}</highlight></codeline>
<codeline lineno="636"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="637"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="638"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;logicalType&quot;:<sp/>&quot;map&quot;</highlight></codeline>
<codeline lineno="639"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="640"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="641"><highlight class="stringliteral"><sp/><sp/>HasIdVisitor<sp/>visitor;</highlight></codeline>
<codeline lineno="642"><highlight class="stringliteral"><sp/><sp/>EXPECT_THAT(visitor.Visit(::avro::compileJsonSchemaFromString(schema_json)),<sp/>IsOk());</highlight></codeline>
<codeline lineno="643"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.HasNoIds());</highlight></codeline>
<codeline lineno="644"><highlight class="stringliteral"><sp/><sp/>EXPECT_FALSE(visitor.AllHaveIds());</highlight></codeline>
<codeline lineno="645"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="646"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="647"><highlight class="stringliteral">TEST(AvroSchemaProjectionTest,<sp/>ProjectIdenticalSchemas)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>iceberg<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">3,<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>()),</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">4,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">iceberg::float64</ref>()),</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>equivalent<sp/>avro<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="658"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="659"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="660"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="661"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;long&quot;,<sp/>&quot;field-id&quot;:<sp/>1},</highlight></codeline>
<codeline lineno="662"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;name&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;string&quot;],<sp/>&quot;field-id&quot;:<sp/>2},</highlight></codeline>
<codeline lineno="663"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;age&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;int&quot;],<sp/>&quot;field-id&quot;:<sp/>3},</highlight></codeline>
<codeline lineno="664"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;data&quot;,<sp/>&quot;type&quot;:<sp/>&quot;double&quot;,<sp/>&quot;field-id&quot;:<sp/>4}</highlight></codeline>
<codeline lineno="665"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="666"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="667"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>4);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>projection.fields.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(projection.fields[i].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[i].from),<sp/>i);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectSubsetSchema)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>subset<sp/>iceberg<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">3,<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>()),</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>full<sp/>avro<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="690"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="691"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="692"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="693"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;long&quot;,<sp/>&quot;field-id&quot;:<sp/>1},</highlight></codeline>
<codeline lineno="694"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;name&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;string&quot;],<sp/>&quot;field-id&quot;:<sp/>2},</highlight></codeline>
<codeline lineno="695"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;age&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;int&quot;],<sp/>&quot;field-id&quot;:<sp/>3},</highlight></codeline>
<codeline lineno="696"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;data&quot;,<sp/>&quot;type&quot;:<sp/>&quot;double&quot;,<sp/>&quot;field-id&quot;:<sp/>4}</highlight></codeline>
<codeline lineno="697"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="698"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="699"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>2);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[1].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[1].from),<sp/>2);</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectWithPruning)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>subset<sp/>iceberg<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">3,<sp/></highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>()),</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>full<sp/>avro<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="722"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="723"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="724"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="725"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;long&quot;,<sp/>&quot;field-id&quot;:<sp/>1},</highlight></codeline>
<codeline lineno="726"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;name&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;string&quot;],<sp/>&quot;field-id&quot;:<sp/>2},</highlight></codeline>
<codeline lineno="727"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;age&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;int&quot;],<sp/>&quot;field-id&quot;:<sp/>3},</highlight></codeline>
<codeline lineno="728"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;data&quot;,<sp/>&quot;type&quot;:<sp/>&quot;double&quot;,<sp/>&quot;field-id&quot;:<sp/>4}</highlight></codeline>
<codeline lineno="729"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="730"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="731"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>2);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[1].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[1].from),<sp/>1);</highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectMissingOptionalField)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>with<sp/>an<sp/>extra<sp/>optional<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">10,<sp/></highlight><highlight class="stringliteral">&quot;extra&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>avro<sp/>schema<sp/>without<sp/>the<sp/>extra<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="755"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="756"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="757"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="758"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;long&quot;,<sp/>&quot;field-id&quot;:<sp/>1},</highlight></codeline>
<codeline lineno="759"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;name&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;string&quot;],<sp/>&quot;field-id&quot;:<sp/>2}</highlight></codeline>
<codeline lineno="760"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="761"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="762"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>3);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[1].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[1].from),<sp/>1);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[2].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adaf2655c2dee87cb9b0646f678a630394b" kindref="member">FieldProjection::Kind::kNull</ref>);</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectMissingRequiredField)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>with<sp/>a<sp/>required<sp/>field<sp/>that&apos;s<sp/>missing<sp/>from<sp/>the<sp/>avro<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">10,<sp/></highlight><highlight class="stringliteral">&quot;extra&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="786"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="787"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="788"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="789"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;long&quot;,<sp/>&quot;field-id&quot;:<sp/>1},</highlight></codeline>
<codeline lineno="790"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;name&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;string&quot;],<sp/>&quot;field-id&quot;:<sp/>2}</highlight></codeline>
<codeline lineno="791"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="792"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="793"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsError(ErrorKind::kInvalidSchema));</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>HasErrorMessage(</highlight><highlight class="stringliteral">&quot;Missing<sp/>required<sp/>field&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectMetadataColumn)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>with<sp/>a<sp/>metadata<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MetadataColumns::kFilePath,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="809"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="810"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="811"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="812"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;long&quot;,<sp/>&quot;field-id&quot;:<sp/>1}</highlight></codeline>
<codeline lineno="813"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="814"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="815"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>2);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[1].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adadc744975fcdff37e4159bd60ef0ee5ab" kindref="member">FieldProjection::Kind::kMetadata</ref>);</highlight></codeline>
<codeline lineno="826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectSchemaEvolutionIntToLong)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>expecting<sp/>a<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>avro<sp/>schema<sp/>with<sp/>an<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="836"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="837"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="838"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="839"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;,<sp/>&quot;field-id&quot;:<sp/>1}</highlight></codeline>
<codeline lineno="840"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="841"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="842"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>1);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectSchemaEvolutionFloatToDouble)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>expecting<sp/>a<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga8457285a5fea3eda5b3f4289bce62ecb" kindref="member">iceberg::float64</ref>()),</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>avro<sp/>schema<sp/>with<sp/>a<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="862"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="863"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="864"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="865"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;value&quot;,<sp/>&quot;type&quot;:<sp/>&quot;float&quot;,<sp/>&quot;field-id&quot;:<sp/>1}</highlight></codeline>
<codeline lineno="866"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="867"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="868"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>1);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectSchemaEvolutionIncompatibleTypes)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>expecting<sp/>an<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>()),</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>avro<sp/>schema<sp/>with<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="888"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="889"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="890"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="891"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;value&quot;,<sp/>&quot;type&quot;:<sp/>&quot;string&quot;,<sp/>&quot;field-id&quot;:<sp/>1}</highlight></codeline>
<codeline lineno="892"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="893"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="894"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsError(ErrorKind::kInvalidSchema));</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>HasErrorMessage(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>read&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectNestedStructures)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>with<sp/>nested<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">3,<sp/></highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;StructType&gt;(std::vector&lt;SchemaField&gt;{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">101,<sp/></highlight><highlight class="stringliteral">&quot;street&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">102,<sp/></highlight><highlight class="stringliteral">&quot;city&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})),</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>equivalent<sp/>avro<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="916"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="917"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="918"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="919"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;long&quot;,<sp/>&quot;field-id&quot;:<sp/>1},</highlight></codeline>
<codeline lineno="920"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;address&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="922"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;address_record&quot;,</highlight></codeline>
<codeline lineno="923"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="924"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;street&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;string&quot;],<sp/>&quot;field-id&quot;:<sp/>101},</highlight></codeline>
<codeline lineno="925"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;city&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;string&quot;],<sp/>&quot;field-id&quot;:<sp/>102}</highlight></codeline>
<codeline lineno="926"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="927"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}],<sp/>&quot;field-id&quot;:<sp/>3}</highlight></codeline>
<codeline lineno="928"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="929"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="930"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>2);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[1].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[1].from),<sp/>1);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>struct<sp/>field<sp/>has<sp/>children<sp/>correctly<sp/>mapped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[1].children.size(),<sp/>2);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[1].children[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[1].children[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[1].children[1].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[1].children[1].from),<sp/>1);</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectListType)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>with<sp/>a<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gafca6afb41a025fd4a7eed7809d4b653f" kindref="member">iceberg::int64</ref>()),</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2,<sp/></highlight><highlight class="stringliteral">&quot;numbers&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;ListType&gt;(<ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">101,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>()))),</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>equivalent<sp/>avro<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="963"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="964"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="965"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="966"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;long&quot;,<sp/>&quot;field-id&quot;:<sp/>1},</highlight></codeline>
<codeline lineno="967"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;numbers&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline lineno="969"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;int&quot;],</highlight></codeline>
<codeline lineno="970"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;element-id&quot;:<sp/>101</highlight></codeline>
<codeline lineno="971"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}],<sp/>&quot;field-id&quot;:<sp/>2}</highlight></codeline>
<codeline lineno="972"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="973"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="974"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>2);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[1].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[1].from),<sp/>1);</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectMapType)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>with<sp/>a<sp/>string-&gt;int<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;counts&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;MapType&gt;(</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">101,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">102,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>()))),</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>equivalent<sp/>avro<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="1000"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1001"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="1002"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1003"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;counts&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;map&quot;,</highlight></codeline>
<codeline lineno="1005"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;values&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;int&quot;],</highlight></codeline>
<codeline lineno="1006"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;key-id&quot;:<sp/>101,</highlight></codeline>
<codeline lineno="1007"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;value-id&quot;:<sp/>102</highlight></codeline>
<codeline lineno="1008"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}],<sp/>&quot;field-id&quot;:<sp/>1}</highlight></codeline>
<codeline lineno="1009"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1010"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="1011"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>1);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].children.size(),<sp/>2);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectMapTypeWithNonStringKey)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>with<sp/>an<sp/>int-&gt;string<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;counts&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;MapType&gt;(</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">101,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>()),</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">102,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()))),</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>equivalent<sp/>avro<sp/>schema<sp/>(using<sp/>array-backed<sp/>map<sp/>for<sp/>non-string<sp/>keys)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="1036"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1037"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="1038"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1039"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;counts&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline lineno="1041"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1043"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;key_value&quot;,</highlight></codeline>
<codeline lineno="1044"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1045"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;key&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;,<sp/>&quot;field-id&quot;:<sp/>101},</highlight></codeline>
<codeline lineno="1046"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;value&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;string&quot;],<sp/>&quot;field-id&quot;:<sp/>102}</highlight></codeline>
<codeline lineno="1047"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1048"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1049"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;logicalType&quot;:<sp/>&quot;map&quot;</highlight></codeline>
<codeline lineno="1050"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}],<sp/>&quot;field-id&quot;:<sp/>1}</highlight></codeline>
<codeline lineno="1051"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1052"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="1053"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>1);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].children.size(),<sp/>2);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectListOfStruct)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>with<sp/>list<sp/>of<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;items&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;ListType&gt;(<ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">101,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;StructType&gt;(std::vector&lt;SchemaField&gt;{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1aeeb98db825450095da8f57dfbb422a77" kindref="member">SchemaField::MakeOptional</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">102,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga91f0688c58d168d755610a2b5a1a222e" kindref="member">iceberg::int32</ref>()),</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">103,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1ga877a22ff733d9ca08b85258b8decbcdb" kindref="member">iceberg::string</ref>()),</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})))),</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>equivalent<sp/>avro<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="1081"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1082"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="1083"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1084"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;items&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline lineno="1086"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>[&quot;null&quot;,<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1088"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;element_record&quot;,</highlight></codeline>
<codeline lineno="1089"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1090"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;x&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;int&quot;],<sp/>&quot;field-id&quot;:<sp/>102},</highlight></codeline>
<codeline lineno="1091"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;y&quot;,<sp/>&quot;type&quot;:<sp/>&quot;string&quot;,<sp/>&quot;field-id&quot;:<sp/>103}</highlight></codeline>
<codeline lineno="1092"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1093"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}],</highlight></codeline>
<codeline lineno="1094"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;element-id&quot;:<sp/>101</highlight></codeline>
<codeline lineno="1095"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}],<sp/>&quot;field-id&quot;:<sp/>1}</highlight></codeline>
<codeline lineno="1096"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1097"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="1098"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>1);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>list<sp/>element<sp/>struct<sp/>is<sp/>properly<sp/>projected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].children.size(),<sp/>1);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>element_proj<sp/>=<sp/>projection.fields[0].children[0];</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>ASSERT_EQ(element_proj.children.size(),<sp/>2);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>ASSERT_EQ(element_proj.children[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(element_proj.children[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>ASSERT_EQ(element_proj.children[1].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(element_proj.children[1].from),<sp/>1);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectDecimalType)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>with<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">iceberg::decimal</ref>(18,<sp/>2)),</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>avro<sp/>schema<sp/>with<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="1127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="1129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;value&quot;,</highlight></codeline>
<codeline lineno="1132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;fixed&quot;,</highlight></codeline>
<codeline lineno="1134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;decimal_9_2&quot;,</highlight></codeline>
<codeline lineno="1135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;size&quot;:<sp/>4,</highlight></codeline>
<codeline lineno="1136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;logicalType&quot;:<sp/>&quot;decimal&quot;,</highlight></codeline>
<codeline lineno="1137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;precision&quot;:<sp/>9,</highlight></codeline>
<codeline lineno="1138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;scale&quot;:<sp/>2</highlight></codeline>
<codeline lineno="1139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;field-id&quot;:<sp/>1</highlight></codeline>
<codeline lineno="1141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1143"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="1144"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>projection<sp/>=<sp/>*projection_result;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields.size(),<sp/>1);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>ASSERT_EQ(projection.fields[0].kind,<sp/><ref refid="structiceberg_1_1FieldProjection_1a99745e34381f167e29f057e2045942adabbb9b6614134f223d02f032cd529275d" kindref="member">FieldProjection::Kind::kProjected</ref>);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>ASSERT_EQ(std::get&lt;1&gt;(projection.fields[0].from),<sp/>0);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal">TEST(AvroSchemaProjectionTest,<sp/>ProjectDecimalIncompatible)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>iceberg<sp/>schema<sp/>with<sp/>decimal<sp/>having<sp/>different<sp/>scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>Schema<sp/>expected_schema({</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classiceberg_1_1SchemaField_1a33775dfa40a452378646a4dfb7419800" kindref="member">SchemaField::MakeRequired</ref>(</highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__type-factories_1gaf9e64fe9d9556ef90130264f95b4d9f2" kindref="member">iceberg::decimal</ref>(18,<sp/>3)),</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>avro<sp/>schema<sp/>with<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="1164"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1165"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;iceberg_schema&quot;,</highlight></codeline>
<codeline lineno="1166"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1167"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;value&quot;,</highlight></codeline>
<codeline lineno="1169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;fixed&quot;,</highlight></codeline>
<codeline lineno="1171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;decimal_9_2&quot;,</highlight></codeline>
<codeline lineno="1172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;size&quot;:<sp/>4,</highlight></codeline>
<codeline lineno="1173"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;logicalType&quot;:<sp/>&quot;decimal&quot;,</highlight></codeline>
<codeline lineno="1174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;precision&quot;:<sp/>9,</highlight></codeline>
<codeline lineno="1175"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;scale&quot;:<sp/>2</highlight></codeline>
<codeline lineno="1176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;field-id&quot;:<sp/>1</highlight></codeline>
<codeline lineno="1178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1180"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="1181"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>projection_result<sp/>=</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Project(expected_schema,<sp/>avro_schema.root(),<sp/></highlight><highlight class="comment">/*prune_source=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>IsError(ErrorKind::kInvalidSchema));</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>ASSERT_THAT(projection_result,<sp/>HasErrorMessage(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>read&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NameMapping<sp/>tests<sp/>for<sp/>Avro<sp/>schema<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190" refid="classiceberg_1_1avro_1_1NameMappingAvroSchemaTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classiceberg_1_1avro_1_1NameMappingAvroSchemaTest" kindref="compound">NameMappingAvroSchemaTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>create<sp/>a<sp/>simple<sp/>name<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;NameMapping&gt;<sp/>CreateSimpleNameMapping()<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>fields;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1});</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>2});</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>3});</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classiceberg_1_1NameMapping_1a98c55a42873ca93287da04c9717b4070" kindref="member">NameMapping::Make</ref>(std::move(fields));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>create<sp/>a<sp/>nested<sp/>name<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;NameMapping&gt;<sp/>CreateNestedNameMapping()<sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>fields;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1});</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nested<sp/>mapping<sp/>for<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>address_fields;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>address_fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;street&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>10});</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>address_fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;city&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>11});</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>address_fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;zip&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>12});</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>address_mapping<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>(std::move(address_fields));</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_id<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nested_mapping<sp/>=<sp/>std::move(address_mapping)});</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classiceberg_1_1NameMapping_1a98c55a42873ca93287da04c9717b4070" kindref="member">NameMapping::Make</ref>(std::move(fields));</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>create<sp/>a<sp/>name<sp/>mapping<sp/>for<sp/>array<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;NameMapping&gt;<sp/>CreateArrayNameMapping()<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>fields;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1});</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nested<sp/>mapping<sp/>for<sp/>array<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>element_fields;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>element_fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>20});</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element_mapping<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>(std::move(element_fields));</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;items&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>2,<sp/>.nested_mapping<sp/>=<sp/>std::move(element_mapping)});</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classiceberg_1_1NameMapping_1a98c55a42873ca93287da04c9717b4070" kindref="member">NameMapping::Make</ref>(std::move(fields));</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>create<sp/>a<sp/>name<sp/>mapping<sp/>for<sp/>map<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;NameMapping&gt;<sp/>CreateMapNameMapping()<sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>fields;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1});</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nested<sp/>mapping<sp/>for<sp/>map<sp/>key-value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>map_fields;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>map_fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>30});</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>map_fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>31});</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_mapping<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>(std::move(map_fields));</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;properties&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_id<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nested_mapping<sp/>=<sp/>std::move(map_mapping)});</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classiceberg_1_1NameMapping_1a98c55a42873ca93287da04c9717b4070" kindref="member">NameMapping::Make</ref>(std::move(fields));</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>create<sp/>a<sp/>name<sp/>mapping<sp/>for<sp/>union<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;NameMapping&gt;<sp/>CreateUnionNameMapping()<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>fields;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1});</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>2});</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classiceberg_1_1NameMapping_1a98c55a42873ca93287da04c9717b4070" kindref="member">NameMapping::Make</ref>(std::move(fields));</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>create<sp/>a<sp/>name<sp/>mapping<sp/>for<sp/>complex<sp/>map<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(array&lt;struct&lt;key,value&gt;&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;NameMapping&gt;<sp/>CreateComplexMapNameMapping()<sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>fields;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1});</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nested<sp/>mapping<sp/>for<sp/>array<sp/>element<sp/>(struct&lt;key,value&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>element_fields;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>element_fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>40});</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>element_fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>41});</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element_mapping<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>(std::move(element_fields));</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nested<sp/>mapping<sp/>for<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>array_fields;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>array_fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.field_id<sp/>=<sp/>50,</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.nested_mapping<sp/>=<sp/>std::move(element_mapping)});</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>array_mapping<sp/>=<sp/><ref refid="classiceberg_1_1MappedFields_1a4d9a94184226b1bfdddb09e4f2926cec" kindref="member">MappedFields::Make</ref>(std::move(array_fields));</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>fields.emplace_back(<ref refid="structiceberg_1_1MappedField" kindref="compound">MappedField</ref>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structiceberg_1_1MappedField_1ab6ecf22afa73722b39834438184f7562" kindref="member">names</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;entries&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>2,<sp/>.nested_mapping<sp/>=<sp/>std::move(array_mapping)});</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classiceberg_1_1NameMapping_1a98c55a42873ca93287da04c9717b4070" kindref="member">NameMapping::Make</ref>(std::move(fields));</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal">TEST_F(<ref refid="classiceberg_1_1avro_1_1NameMappingAvroSchemaTest" kindref="compound">NameMappingAvroSchemaTest</ref>,<sp/>ApplyNameMappingToRecord)<sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>simple<sp/>Avro<sp/>record<sp/>schema<sp/>without<sp/>field<sp/>IDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="1291"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1292"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;test_record&quot;,</highlight></codeline>
<codeline lineno="1293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1294"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;},</highlight></codeline>
<codeline lineno="1295"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;name&quot;,<sp/>&quot;type&quot;:<sp/>&quot;string&quot;},</highlight></codeline>
<codeline lineno="1296"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;age&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;}</highlight></codeline>
<codeline lineno="1297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1298"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="1299"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name_mapping<sp/>=<sp/>CreateSimpleNameMapping();</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>MakeAvroNodeWithFieldIds(avro_schema.root(),<sp/>*name_mapping);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>node<sp/>=<sp/>*result;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;names(),<sp/>3);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;leaves(),<sp/>3);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>field<sp/>IDs<sp/>are<sp/>properly<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;customAttributes(),<sp/>3);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1));</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2));</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">2,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">3));</highlight></codeline>
<codeline lineno="1316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal">TEST_F(NameMappingAvroSchemaTest,<sp/>ApplyNameMappingToNestedRecord)<sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>nested<sp/>Avro<sp/>record<sp/>schema<sp/>without<sp/>field<sp/>IDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="1321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;test_record&quot;,</highlight></codeline>
<codeline lineno="1323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;},</highlight></codeline>
<codeline lineno="1325"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;address&quot;,<sp/>&quot;type&quot;:<sp/>{</highlight></codeline>
<codeline lineno="1326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1327"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;address&quot;,</highlight></codeline>
<codeline lineno="1328"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1329"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;street&quot;,<sp/>&quot;type&quot;:<sp/>&quot;string&quot;},</highlight></codeline>
<codeline lineno="1330"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;city&quot;,<sp/>&quot;type&quot;:<sp/>&quot;string&quot;},</highlight></codeline>
<codeline lineno="1331"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;zip&quot;,<sp/>&quot;type&quot;:<sp/>&quot;string&quot;}</highlight></codeline>
<codeline lineno="1332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1333"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1334"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1335"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="1336"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name_mapping<sp/>=<sp/>CreateNestedNameMapping();</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>MakeAvroNodeWithFieldIds(avro_schema.root(),<sp/>*name_mapping);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>node<sp/>=<sp/>*result;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;names(),<sp/>2);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>EXPECT_EQ(node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>field<sp/>IDs<sp/>are<sp/>properly<sp/>applied<sp/>to<sp/>top-level<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>ASSERT_EQ(node-&gt;customAttributes(),<sp/>2);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1));</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2));</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>nested<sp/>record</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>address_node<sp/>=<sp/>node-&gt;leafAt(1);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>EXPECT_EQ(address_node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>EXPECT_EQ(address_node-&gt;names(),<sp/>3);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>EXPECT_EQ(address_node-&gt;leaves(),<sp/>3);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>field<sp/>IDs<sp/>are<sp/>properly<sp/>applied<sp/>to<sp/>nested<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>ASSERT_EQ(address_node-&gt;customAttributes(),<sp/>3);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(address_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">10));</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(address_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">11));</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(address_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">2,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">12));</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal">TEST_F(NameMappingAvroSchemaTest,<sp/>ApplyNameMappingToArray)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>Avro<sp/>array<sp/>schema<sp/>without<sp/>field<sp/>IDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="1369"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1370"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;test_record&quot;,</highlight></codeline>
<codeline lineno="1371"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1372"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;},</highlight></codeline>
<codeline lineno="1373"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;items&quot;,<sp/>&quot;type&quot;:<sp/>{</highlight></codeline>
<codeline lineno="1374"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline lineno="1375"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>&quot;string&quot;</highlight></codeline>
<codeline lineno="1376"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1377"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1378"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="1379"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name_mapping<sp/>=<sp/>CreateArrayNameMapping();</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>MakeAvroNodeWithFieldIds(avro_schema.root(),<sp/>*name_mapping);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>new_node<sp/>=<sp/>*result;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>EXPECT_EQ(new_node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>EXPECT_EQ(new_node-&gt;names(),<sp/>2);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>EXPECT_EQ(new_node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>field<sp/>IDs<sp/>are<sp/>properly<sp/>applied<sp/>to<sp/>top-level<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>ASSERT_EQ(new_node-&gt;customAttributes(),<sp/>2);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(new_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1));</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(new_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2));</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>array<sp/>field<sp/>structure<sp/>and<sp/>element<sp/>field<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>array_node<sp/>=<sp/>new_node-&gt;leafAt(1);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>EXPECT_EQ(array_node-&gt;type(),<sp/>::avro::AVRO_ARRAY);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>EXPECT_EQ(array_node-&gt;leaves(),<sp/>1);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>array<sp/>element<sp/>has<sp/>field<sp/>ID<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>element_node<sp/>=<sp/>array_node-&gt;leafAt(0);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>EXPECT_EQ(element_node-&gt;type(),<sp/>::avro::AVRO_STRING);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(array_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">20,</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*key=*/</highlight><highlight class="stringliteral">&quot;element-id&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal">TEST_F(NameMappingAvroSchemaTest,<sp/>ApplyNameMappingToMap)<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>Avro<sp/>map<sp/>schema<sp/>without<sp/>field<sp/>IDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="1411"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1412"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;test_record&quot;,</highlight></codeline>
<codeline lineno="1413"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1414"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;},</highlight></codeline>
<codeline lineno="1415"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;properties&quot;,<sp/>&quot;type&quot;:<sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;map&quot;,</highlight></codeline>
<codeline lineno="1417"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;values&quot;:<sp/>&quot;string&quot;</highlight></codeline>
<codeline lineno="1418"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1419"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1420"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="1421"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name_mapping<sp/>=<sp/>CreateMapNameMapping();</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>MakeAvroNodeWithFieldIds(avro_schema.root(),<sp/>*name_mapping);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>new_node<sp/>=<sp/>*result;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/>EXPECT_EQ(new_node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>EXPECT_EQ(new_node-&gt;names(),<sp/>2);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>EXPECT_EQ(new_node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>field<sp/>IDs<sp/>are<sp/>properly<sp/>applied<sp/>to<sp/>top-level<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/>ASSERT_EQ(new_node-&gt;customAttributes(),<sp/>2);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(new_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1));</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(new_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2));</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>map<sp/>field<sp/>structure<sp/>and<sp/>key-value<sp/>field<sp/>IDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>map_node<sp/>=<sp/>new_node-&gt;leafAt(1);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/>EXPECT_EQ(map_node-&gt;type(),<sp/>::avro::AVRO_MAP);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>ASSERT_GE(map_node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>EXPECT_EQ(map_node-&gt;leafAt(0)-&gt;type(),<sp/>::avro::AVRO_STRING);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>EXPECT_EQ(map_node-&gt;leafAt(1)-&gt;type(),<sp/>::avro::AVRO_STRING);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>ASSERT_EQ(map_node-&gt;customAttributes(),<sp/>2);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(map_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">30,</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*key=*/</highlight><highlight class="stringliteral">&quot;key-id&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(map_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">31,</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*key=*/</highlight><highlight class="stringliteral">&quot;value-id&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal">TEST_F(NameMappingAvroSchemaTest,<sp/>ApplyNameMappingToComplexMap)<sp/>{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>Avro<sp/>schema<sp/>for<sp/>complex<sp/>map<sp/>(array&lt;struct&lt;key,value&gt;&gt;)<sp/>without<sp/>field<sp/>IDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>represents<sp/>a<sp/>map<sp/>where<sp/>key<sp/>is<sp/>not<sp/>a<sp/>string<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="1455"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1456"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;test_record&quot;,</highlight></codeline>
<codeline lineno="1457"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1458"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;},</highlight></codeline>
<codeline lineno="1459"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;entries&quot;,<sp/>&quot;type&quot;:<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;array&quot;,</highlight></codeline>
<codeline lineno="1461"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;items&quot;:<sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1463"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;entry&quot;,</highlight></codeline>
<codeline lineno="1464"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1465"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;key&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;},</highlight></codeline>
<codeline lineno="1466"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;value&quot;,<sp/>&quot;type&quot;:<sp/>&quot;string&quot;}</highlight></codeline>
<codeline lineno="1467"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1468"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1470"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1471"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="1472"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name_mapping<sp/>=<sp/>CreateComplexMapNameMapping();</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>MakeAvroNodeWithFieldIds(avro_schema.root(),<sp/>*name_mapping);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>new_node<sp/>=<sp/>*result;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/>EXPECT_EQ(new_node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>EXPECT_EQ(new_node-&gt;names(),<sp/>2);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/>EXPECT_EQ(new_node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>field<sp/>IDs<sp/>are<sp/>properly<sp/>applied<sp/>to<sp/>top-level<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/>ASSERT_EQ(new_node-&gt;customAttributes(),<sp/>2);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(new_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1));</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(new_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2));</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>array<sp/>field<sp/>structure<sp/>(representing<sp/>the<sp/>map)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>array_node<sp/>=<sp/>new_node-&gt;leafAt(1);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>EXPECT_EQ(array_node-&gt;type(),<sp/>::avro::AVRO_ARRAY);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>EXPECT_EQ(array_node-&gt;leaves(),<sp/>1);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>array<sp/>element<sp/>(struct&lt;key,value&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>element_node<sp/>=<sp/>array_node-&gt;leafAt(0);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/>EXPECT_EQ(element_node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>EXPECT_EQ(element_node-&gt;names(),<sp/>2);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>EXPECT_EQ(element_node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>field<sp/>IDs<sp/>are<sp/>properly<sp/>applied<sp/>to<sp/>struct<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>ASSERT_EQ(element_node-&gt;customAttributes(),<sp/>2);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(element_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">40));</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(element_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">41));</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>key<sp/>and<sp/>value<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/>EXPECT_EQ(element_node-&gt;leafAt(0)-&gt;type(),<sp/>::avro::AVRO_INT);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>EXPECT_EQ(element_node-&gt;leafAt(1)-&gt;type(),<sp/>::avro::AVRO_STRING);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal">TEST_F(NameMappingAvroSchemaTest,<sp/>ApplyNameMappingToUnion)<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>Avro<sp/>union<sp/>schema<sp/>without<sp/>field<sp/>IDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="1513"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1514"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;test_record&quot;,</highlight></codeline>
<codeline lineno="1515"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1516"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;},</highlight></codeline>
<codeline lineno="1517"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;data&quot;,<sp/>&quot;type&quot;:<sp/>[&quot;null&quot;,<sp/>&quot;string&quot;]}</highlight></codeline>
<codeline lineno="1518"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1519"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="1520"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name_mapping<sp/>=<sp/>CreateUnionNameMapping();</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>MakeAvroNodeWithFieldIds(avro_schema.root(),<sp/>*name_mapping);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>ASSERT_THAT(result,<sp/>IsOk());</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>new_node<sp/>=<sp/>*result;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>EXPECT_EQ(new_node-&gt;type(),<sp/>::avro::AVRO_RECORD);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>EXPECT_EQ(new_node-&gt;names(),<sp/>2);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>EXPECT_EQ(new_node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>field<sp/>IDs<sp/>are<sp/>properly<sp/>applied<sp/>to<sp/>top-level<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>ASSERT_EQ(new_node-&gt;customAttributes(),<sp/>2);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(new_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">0,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">1));</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/>ASSERT_NO_FATAL_FAILURE(CheckFieldIdAt(new_node,<sp/></highlight><highlight class="comment">/*index=*/</highlight><highlight class="normal">1,<sp/></highlight><highlight class="comment">/*field_id=*/</highlight><highlight class="normal">2));</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>union<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>union_node<sp/>=<sp/>new_node-&gt;leafAt(1);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>EXPECT_EQ(union_node-&gt;type(),<sp/>::avro::AVRO_UNION);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>EXPECT_EQ(union_node-&gt;leaves(),<sp/>2);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>non_null_branch<sp/>=<sp/>union_node-&gt;leafAt(1);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>EXPECT_EQ(non_null_branch-&gt;type(),<sp/>::avro::AVRO_STRING);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal">TEST_F(NameMappingAvroSchemaTest,<sp/>MissingFieldIdError)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>name<sp/>mapping<sp/>with<sp/>missing<sp/>field<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>std::vector&lt;MappedField&gt;<sp/>fields;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>fields.emplace_back(MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">},<sp/>.field_id<sp/>=<sp/>1});</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>fields.emplace_back(MappedField{.names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">}});<sp/><sp/></highlight><highlight class="comment">//<sp/>Missing<sp/>field_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name_mapping<sp/>=<sp/><ref refid="classiceberg_1_1NameMapping_1a98c55a42873ca93287da04c9717b4070" kindref="member">NameMapping::Make</ref>(std::move(fields));</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>simple<sp/>Avro<sp/>record<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/>std::string<sp/>avro_schema_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="1555"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;record&quot;,</highlight></codeline>
<codeline lineno="1556"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;test_record&quot;,</highlight></codeline>
<codeline lineno="1557"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;fields&quot;:<sp/>[</highlight></codeline>
<codeline lineno="1558"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;id&quot;,<sp/>&quot;type&quot;:<sp/>&quot;int&quot;},</highlight></codeline>
<codeline lineno="1559"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{&quot;name&quot;:<sp/>&quot;name&quot;,<sp/>&quot;type&quot;:<sp/>&quot;string&quot;}</highlight></codeline>
<codeline lineno="1560"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1561"><highlight class="stringliteral"><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="1562"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>avro_schema<sp/>=<sp/>::avro::compileJsonSchemaFromString(avro_schema_json);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>MakeAvroNodeWithFieldIds(avro_schema.root(),<sp/>*name_mapping);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/>ASSERT_THAT(result,<sp/>IsError(ErrorKind::kInvalidSchema));</highlight></codeline>
<codeline lineno="1566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>iceberg::avro</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="iceberg/test/avro_schema_test.cc"/>
  </compounddef>
</doxygen>
